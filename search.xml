<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css定位总结</title>
    <url>/2020/02/23/CSS/css%E5%AE%9A%E4%BD%8D%E6%80%BB%E7%BB%93-css%E5%AE%9A%E4%BD%8D%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="css定位"><a href="#css定位" class="headerlink" title="css定位"></a>css定位</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">块级元素 独占一行、可设宽高、默认父元素宽度、高度如果不设置只能靠内容撑起</span><br><span class="line">	常见元素 <span class="selector-tag">div</span> h <span class="selector-tag">p</span> <span class="selector-tag">ul</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> </span><br><span class="line">行内元素 在一行显示、不可设宽高、紧靠内容撑起宽高</span><br><span class="line">	常见元素 <span class="selector-tag">span</span> <span class="selector-tag">a</span> <span class="selector-tag">strong</span> <span class="selector-tag">b</span> <span class="selector-tag">em</span> l <span class="selector-tag">del</span> s</span><br><span class="line">行内块元素 在一行显示、可设宽高、不会默认父元素宽度</span><br><span class="line">	常见元素 <span class="selector-tag">img</span> <span class="selector-tag">input</span> <span class="selector-tag">td</span></span><br><span class="line">四种定位</span><br><span class="line">通过 <span class="attribute">position</span> 属性设置</span><br><span class="line">static</span><br><span class="line">relative</span><br><span class="line">absolute</span><br><span class="line">fixed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">postion:relative</span><br><span class="line">top:</span><br><span class="line">buttom:</span><br><span class="line">right:</span><br><span class="line">left</span><br><span class="line">偏移原来位置，且原位置所占空间保留。</span><br></pre></td></tr></table></figure>

<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>:absolute</span><br><span class="line">根据祖先元素偏移，原来位置空间删除。</span><br></pre></td></tr></table></figure>

<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">float</span>:</span><br><span class="line">偏移后只是原位置不占据空间，但是文字会浮动其周围，原因是早起就是为了开发环绕图片的所开发的。</span><br><span class="line">解决各种元素环绕的方法就是设置clear.</span><br><span class="line">clear:right left both inherit 就是说该元素的哪一边不允许出现浮动元素</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>css框模型总结</title>
    <url>/2020/02/23/CSS/css%E6%A1%86%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93-css%E6%A1%86%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="css框模型"><a href="#css框模型" class="headerlink" title="css框模型"></a>css框模型</h1><p><img src="https://quinntian.com/upload/2020/2/image-b1d9940ce7124af6b0100718386301b0.png" alt="image.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">由外到内 </span><br><span class="line">外边距<span class="attribute">margin</span> 由边框到外的距离。</span><br><span class="line">边框<span class="attribute">border</span> 边框。</span><br><span class="line">内边距<span class="attribute">padding</span> 由边框到内的距离。</span><br><span class="line">元素element 实际部分。</span><br><span class="line">外边距、边框、内边距的默认都是<span class="number">0</span>，但是有可能被设置过。</span><br><span class="line">正常下<span class="attribute">width</span>设置的是元素的宽度，但是早起IE宽度是指元素宽度+内边距+边框宽度。</span><br></pre></td></tr></table></figure>

<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">各种写法</span><br><span class="line"><span class="attribute">margin</span>:长度单位、百分比、负值,其中百分比基于父元素</span><br><span class="line">margin:上 左 下 右</span><br><span class="line">margin-top</span><br><span class="line">margin-buttom</span><br><span class="line">margin-right</span><br><span class="line">margin-left</span><br><span class="line">外边距的合并</span><br><span class="line">上下合并 使用最大的外边距</span><br><span class="line">包含合并 如果没有设置内边距，也会发生合并</span><br><span class="line">空元素合并 没有内容、边距、填充也会发生合并</span><br></pre></td></tr></table></figure>

<p>值传递</p>
<p><img src="https://quinntian.com/upload/2020/2/image-e03349933f784aac9776d9cca6567ba6.png" alt="image.png"></p>
<h2 id="border"><a href="#border" class="headerlink" title="border"></a>border</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-style</span></span><br><span class="line"><span class="attribute">none</span>	定义无边框。</span><br><span class="line">hidden	与 &quot;<span class="attribute">none</span>&quot; 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。</span><br><span class="line">dotted	定义点状边框。在大多数浏览器中呈现为实线。</span><br><span class="line">dashed	定义虚线。在大多数浏览器中呈现为实线。</span><br><span class="line">solid	定义实线。</span><br><span class="line">double	定义双线。双线的宽度等于 <span class="attribute">border-width</span> 的值。</span><br><span class="line">groove	定义 <span class="number">3</span>D 凹槽边框。其效果取决于 <span class="attribute">border-color</span> 的值。</span><br><span class="line">ridge	定义 <span class="number">3</span>D 垄状边框。其效果取决于 <span class="attribute">border-color</span> 的值。</span><br><span class="line">inset	定义 <span class="number">3</span>D inset 边框。其效果取决于 <span class="attribute">border-color</span> 的值。</span><br><span class="line">outset	定义 <span class="number">3</span>D outset 边框。其效果取决于 <span class="attribute">border-color</span> 的值。</span><br><span class="line"><span class="attribute">inherit</span>	规定应该从父元素继承边框样式。</span><br><span class="line"><span class="attribute">border-width</span></span><br><span class="line">thin	定义细的边框。</span><br><span class="line">medium	默认。定义中等的边框。</span><br><span class="line">thick	定义粗的边框。</span><br><span class="line">length	允许您自定义边框的宽度。</span><br><span class="line"><span class="attribute">inherit</span>	规定应该从父元素继承边框宽度。</span><br><span class="line"><span class="attribute">border-color</span></span><br><span class="line">透明色：transparent</span><br><span class="line">统一设置</span><br><span class="line"><span class="attribute">border</span>:宽度 样式 颜色</span><br><span class="line">样式必须设置</span><br><span class="line">宽度、样式、颜色都可以四方向分别设置上右下左、单独设置，值传递和外边距一样。</span><br></pre></td></tr></table></figure>

<h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding</span> 长度\百分比  不允许负值</span><br><span class="line"><span class="attribute">padding</span> 上左下右</span><br><span class="line"><span class="attribute">padding-top</span>/buttom/<span class="attribute">right</span>/<span class="attribute">left</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>css选择器总结</title>
    <url>/2020/02/22/CSS/css%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93-css%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h2 id="1-元素选择器"><a href="#1-元素选择器" class="headerlink" title="1.元素选择器"></a>1.元素选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>元素名&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-分组选择器"><a href="#2-分组选择器" class="headerlink" title="2.分组选择器"></a>2.分组选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>元素名,...,...&#123;&#125; 中间使用逗号分隔</span><br><span class="line">*&#123;&#125; 群组选择器</span><br></pre></td></tr></table></figure>

<h2 id="3-类选择器"><a href="#3-类选择器" class="headerlink" title="3.类选择器"></a>3.类选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span>类名&#123;css;...&#125;</span><br><span class="line">元素名<span class="selector-class">.class</span>类名&#123;&#125; 具有class的所有元素-结合元素选择器</span><br><span class="line"><span class="selector-class">.class1</span><span class="selector-class">.class2</span>&#123;&#125; 指必须包含这两个类名-多类选择器</span><br></pre></td></tr></table></figure>

<h2 id="4-ID选择器"><a href="#4-ID选择器" class="headerlink" title="4.ID选择器"></a>4.ID选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-属性选择器"><a href="#5-属性选择器" class="headerlink" title="5.属性选择器"></a>5.属性选择器</h2><h3 id="匹配属性名"><a href="#匹配属性名" class="headerlink" title="匹配属性名"></a>匹配属性名</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">标签名<span class="selector-attr">[属性名]</span>&#123;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匹配属性值"><a href="#匹配属性值" class="headerlink" title="匹配属性值"></a>匹配属性值</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.完全匹配属性值</span><br><span class="line">标签名<span class="selector-attr">[属性名=<span class="string">&quot;属性值&quot;</span>]</span>&#123;&#125;   解释：完全匹配。</span><br><span class="line"><span class="number">2</span>.匹配部分属性值</span><br><span class="line">标签名<span class="selector-attr">[属性名~=<span class="string">&quot;属性值1&quot;</span>]</span>&#123;&#125; 解释：在标签下，属性值含有属性值<span class="number">1</span>即可。</span><br><span class="line"><span class="number">3</span>.字串匹配属性选择器</span><br><span class="line">标签名<span class="selector-attr">[属性名^=<span class="string">&quot;属性值1&quot;</span>]</span>&#123;&#125; 解释：在标签下，匹配以属性值<span class="number">1</span>开头的属性值。</span><br><span class="line">标签名<span class="selector-attr">[属性名$=<span class="string">&quot;属性值1&quot;</span>]</span>&#123;&#125; 解释：在标签下，匹配以属性值<span class="number">1</span>结尾的属性值。</span><br><span class="line">标签名<span class="selector-attr">[属性名*=<span class="string">&quot;属性值1&quot;</span>]</span>&#123;&#125; 解释：在标签下，匹配以包含属性值<span class="number">1</span>的属性值。</span><br><span class="line"><span class="number">4</span>.特定属性值选择器</span><br><span class="line">标签名<span class="selector-attr">[属性名|=<span class="string">&quot;属性值1&quot;</span>]</span>&#123;&#125; 解释：在标签下，匹配以属性值<span class="number">1</span>或以属性值开头的属性值。</span><br></pre></td></tr></table></figure>

<h2 id="6-后代选择器"><a href="#6-后代选择器" class="headerlink" title="6.后代选择器"></a>6.后代选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">标签名<span class="number">1</span> 标签名<span class="number">2</span> ...&#123;&#125; 解释：标签之间是空格，是指标签下含有。</span><br></pre></td></tr></table></figure>

<h2 id="7-子元素选择器"><a href="#7-子元素选择器" class="headerlink" title="7.子元素选择器"></a>7.子元素选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">标签名<span class="number">1</span> &gt; 标签名<span class="number">2</span> ...&#123;&#125; 解释：标签之间的符号，两个元素必须紧挨着，与后代选择器有所区别。后代选择器是下面有就可，</span><br><span class="line">子元素选择器是下面必须是第一个。</span><br></pre></td></tr></table></figure>

<h2 id="8-相邻兄弟选择器"><a href="#8-相邻兄弟选择器" class="headerlink" title="8.相邻兄弟选择器"></a>8.相邻兄弟选择器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标签名1 + 标签名2...&#123;&#125; 解释：首先要使之生效必须这两个元素在同一个父元素下，其次关于后面的样式生效只能作用于两个元素的后一个元素。</span><br></pre></td></tr></table></figure>

<h2 id="9-伪类与伪元素"><a href="#9-伪类与伪元素" class="headerlink" title="9.伪类与伪元素"></a>9.伪类与伪元素</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">伪类格式</span><br><span class="line">标签名:伪元素&#123;&#125;</span><br><span class="line">伪类</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125;		<span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125;	<span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;	<span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125;	<span class="comment">/* 选定的链接 */</span></span><br><span class="line">伪类+CSS类</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.red</span> : visited &#123;color: <span class="number">#FF0000</span>&#125;</span><br><span class="line">&lt;<span class="selector-tag">a</span> class=&quot;red&quot; href=&quot;css_syntax<span class="selector-class">.asp</span>&quot;&gt;CSS Syntax&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">伪元素</span><br><span class="line"><span class="selector-pseudo">:first</span>-line</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-line</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-variant</span>:small-caps;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-pseudo">:first</span>-letter</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-letter</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:xx-large;</span><br><span class="line">  &#125;</span><br><span class="line">伪类元素后面的样式限定以下，其他的不可以</span><br><span class="line"><span class="attribute">font</span></span><br><span class="line"><span class="attribute">color</span></span><br><span class="line"><span class="attribute">background</span></span><br><span class="line"><span class="attribute">margin</span></span><br><span class="line"><span class="attribute">padding</span></span><br><span class="line"><span class="attribute">border</span></span><br><span class="line"><span class="attribute">text-decoration</span></span><br><span class="line"><span class="attribute">vertical-align</span> (仅当 <span class="attribute">float</span> 为 <span class="attribute">none</span> 时)</span><br><span class="line"><span class="attribute">text-transform</span></span><br><span class="line"><span class="attribute">line-height</span></span><br><span class="line"><span class="attribute">float</span></span><br><span class="line"><span class="attribute">clear</span></span><br><span class="line">伪类+css</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.article</span><span class="selector-pseudo">:first</span>-letter</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;<span class="selector-tag">article</span>&quot;&gt;This is <span class="selector-tag">a</span> paragraph in an <span class="selector-tag">article</span>。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">多重伪类元素</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-letter 第一个字母设置</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:xx-large;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-line 第一行设置</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#0000ff</span>;</span><br><span class="line">  <span class="attribute">font-variant</span>:small-caps;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">h1</span>:before 元素之前插入内容</span><br><span class="line">  &#123;</span><br><span class="line">  content:<span class="built_in">url</span>(<span class="string">logo.gif</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">h1</span>:after 元素之后插入内容</span><br><span class="line">  &#123;</span><br><span class="line">  content:<span class="built_in">url</span>(<span class="string">logo.gif</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Git_bash走代理总结（Http代理以及SSH设置Http代理和Socks代理）.md</title>
    <url>/2018/07/30/Git/Git_bash%E8%B5%B0%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93%EF%BC%88Http%E4%BB%A3%E7%90%86%E4%BB%A5%E5%8F%8ASSH%E8%AE%BE%E7%BD%AEHttp%E4%BB%A3%E7%90%86%E5%92%8CSocks%E4%BB%A3%E7%90%86%EF%BC%89.md-2019102314160004733/</url>
    <content><![CDATA[<p>title: Git bash走代理总结（Http代理以及SSH设置Http代理和Socks代理）<br>date: ‘2018-07-30 10:20:53’<br>updated: ‘2018-07-30 10:34:14’<br>tags: [Git, 后端]<br>permalink: /articles/2018/07/30/1532916041334.html</p>
<hr>
<p>说明：由于最近Github在国内下载速度只有20k左右，搭完梯子后寻找Git代理方法，发现网上的方法比较乱，于是总结一下。</p>
<h3 id="1-Http代理设置"><a href="#1-Http代理设置" class="headerlink" title="1.Http代理设置"></a>1.Http代理设置</h3><ul>
<li>命令：<code> git config --global http.proxy http://127.0.0.1:1087</code></li>
<li>说明： 全局设置http代理</li>
<li>此命令修改的文件为 <code> C:\Users\用户名\.gitconfig</code> (Windows环境下)</li>
<li>取消设置 <code>git config --global --unset http.proxy</code></li>
<li>网上还有一种设置https代理，如上代码改为<code>https</code>，但并未发现有效<h3 id="2-设置SSH代理"><a href="#2-设置SSH代理" class="headerlink" title="2.设置SSH代理"></a>2.设置SSH代理</h3>SSH代理最大方便之处就是无需输入密码<br>修改的文件为<code> C:\Users\用户名\.ssh\config</code> (不存在自行创建)<h4 id="2-1设置本地http或sockt代理"><a href="#2-1设置本地http或sockt代理" class="headerlink" title="2.1设置本地http或sockt代理"></a>2.1设置本地http或sockt代理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">ProxyCommand connect -H 127.0.0.1:8100 %h %p # -S为socks</span><br><span class="line">HostName %h</span><br><span class="line">Port 22</span><br><span class="line">User git</span><br><span class="line">IdentityFile  ~/.ssh/id_rsa </span><br><span class="line">IdentitiesOnly yes</span><br></pre></td></tr></table></figure></li>
<li><em>说明：此设置应该是需要安装connect命令，具体下载地址为<a href="https://bitbucket.org/gotoh/connect/overview">connect.exe</a><br>由当时将此文件放到git安装目录下的bin文件夹下。connect具体命令参数参考<a href="https://bitbucket.org/gotoh/connect/wiki/Home">官方说明文档</a></em>*</li>
</ul>
<h4 id="2-2其他设置方法"><a href="#2-2其他设置方法" class="headerlink" title="2.2其他设置方法"></a>2.2其他设置方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 必须是 github.com</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line"># 走 HTTP 代理</span><br><span class="line"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080</span><br><span class="line"># 走 socks5 代理（如 Shadowsocks）</span><br><span class="line"># ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>
<p>此方法走socket代理设置有效，http代理验证会报错</p>
<p>参考文章地址<br><a href="https://bitbucket.org/gotoh/connect/wiki/Home">https://bitbucket.org/gotoh/connect/wiki/Home</a><br><a href="https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1">https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1</a><br><a href="https://www.hi-linux.com/posts/11850.html">https://www.hi-linux.com/posts/11850.html</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Github速度被限制解决方法.md</title>
    <url>/2018/07/12/Git/Github%E9%80%9F%E5%BA%A6%E8%A2%AB%E9%99%90%E5%88%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.md-2019102314160241163/</url>
    <content><![CDATA[<p>title: Github速度被限制解决方法<br>date: ‘2018-07-12 12:08:23’<br>updated: ‘2018-07-12 12:08:23’<br>tags: [GitHub]<br>permalink: /articles/2018/07/12/1531368502688.html</p>
<hr>
<p><strong>1.修改host文件会有速度提升</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">151.101.72.249 global-ssl.fastly.Net</span><br><span class="line">192.30.253.112 github.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Git基本命令详解及示例.md</title>
    <url>/2018/07/23/Git/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E7%A4%BA%E4%BE%8B.md-2019102314160243498/</url>
    <content><![CDATA[<p>title: Git基本命令详解及示例<br>date: ‘2018-07-23 20:40:37’<br>updated: ‘2018-08-16 00:26:49’<br>tags: [Git, 后端]<br>permalink: /articles/2018/07/23/1532347122477.html</p>
<hr>
<p><img src="https://res.quinntian.xyz//file/2018/07/41a7bd07145c4182940a798877a487df_git_big_jb51.jpg" alt="git_big_jb51jpg"> </p>
<h2 id="1-Git设置签名"><a href="#1-Git设置签名" class="headerlink" title="1.Git设置签名"></a>1.Git设置签名</h2><ul>
<li>项目/仓库级别</li>
</ul>
<p>1.范围<br><strong>只对当前的仓库有效</strong><br>2.命令<br><code> git config user.name xx</code><br><code>    git config user.email xx@xx.co</code></p>
<ul>
<li>全局级别</li>
</ul>
<p>1.范围<br><strong>对当前登陆用户有效</strong><br>2.命令<br><code>git config --global</code></p>
<ul>
<li><p>级别优先级<br>就近原则：2者都有时采用项目级别</p>
<h2 id="2-Git初始化仓库"><a href="#2-Git初始化仓库" class="headerlink" title="2.Git初始化仓库"></a>2.Git初始化仓库</h2></li>
<li><p>命令<br><code>git init</code></p>
<h2 id="3-Git查看状态"><a href="#3-Git查看状态" class="headerlink" title="3.Git查看状态"></a>3.Git查看状态</h2></li>
<li><p>命令<br><code>git status </code></p>
</li>
<li><p>工作区、暂存区、仓库区都无文件时状态<br><img src="https://res.quinntian.xyz//file/2018/07/b8449a4c6a10497e9a1028cdfdf83169_Snipaste_20180723_162933.png" alt="Snipaste_20180723_162933png"></p>
</li>
<li><p>工作区、暂存区有文件、仓库区无文件时<br><img src="https://res.quinntian.xyz//file/2018/07/444a4f4d2ce1462bbb0297f13a7ae18f_Snipaste_20180723_163151.png" alt="Snipaste_20180723_163151png"><br><img src="https://res.quinntian.xyz//file/2018/07/51e89c27a5414c75826aa9993ed8f350_Snipaste_20180723_164402.png" alt="Snipaste_20180723_164402png"> </p>
<h2 id="4-Git删除暂存区文件命令"><a href="#4-Git删除暂存区文件命令" class="headerlink" title="4.Git删除暂存区文件命令"></a>4.Git删除暂存区文件命令</h2><p><code> git rm --cached[file]</code><br><img src="https://res.quinntian.xyz//file/2018/07/b6b8d70261384568a5235d88ca252d29_Snipaste_20180723_165121.png" alt="Snipaste_20180723_165121png"> </p>
<h2 id="5-Git提交到仓库命令"><a href="#5-Git提交到仓库命令" class="headerlink" title="5.Git提交到仓库命令"></a>5.Git提交到仓库命令</h2><p><code>git commit –m[信息][filename]</code></p>
</li>
<li><p>工作区、暂存区、仓库区都有文件<br><img src="https://res.quinntian.xyz//file/2018/07/09811684c4054441b10d9476b1493884_Snipaste_20180723_165635.png" alt="Snipaste_20180723_165635png"><br><img src="https://res.quinntian.xyz//file/2018/07/84ff456ba07045db89e803c2ece7e070_Snipaste_20180723_165743.png" alt="Snipaste_20180723_165743png"><br>继续向文件中添加内容<br><img src="https://res.quinntian.xyz//file/2018/07/132e65b13d5f43c4bd35108924ddefed_Snipaste_20180723_170530.png" alt="Snipaste_20180723_170530png"><br>此时Git status<br><img src="https://res.quinntian.xyz//file/2018/07/8899ce3111ae482f8b6935745dc1dbf6_Snipaste_20180723_170107.png" alt="Snipaste_20180723_170107png"> </p>
<h2 id="6-Git添加到暂存区"><a href="#6-Git添加到暂存区" class="headerlink" title="6.Git添加到暂存区"></a>6.Git添加到暂存区</h2><p><code>git add [file]</code><br><img src="https://res.quinntian.xyz//file/2018/07/daff6a09fae7480197505868c6ef723e_Snipaste_20180723_170504.png" alt="Snipaste_20180723_170504png"> </p>
<h2 id="7-Git查看历史记录"><a href="#7-Git查看历史记录" class="headerlink" title="7.Git查看历史记录"></a>7.Git查看历史记录</h2><h3 id="7-1-最完整的形式"><a href="#7-1-最完整的形式" class="headerlink" title="7.1 最完整的形式"></a>7.1 最完整的形式</h3><p><code>git log</code><br><img src="https://res.quinntian.xyz//file/2018/07/7d0052114a0c4957b38b88100e360f4c_Snipaste_20180723_172635.png" alt="Snipaste_20180723_172635png"> </p>
</li>
</ul>
<p>多屏显示相关操作<br>1.空格向下翻页<br>2.b上翻页<br>3.q下翻页</p>
<h3 id="7-2-简洁的形式"><a href="#7-2-简洁的形式" class="headerlink" title="7.2 简洁的形式"></a>7.2 简洁的形式</h3><p><code>git log --pretty=oneline </code><br><img src="https://res.quinntian.xyz//file/2018/07/f71416c5cec14515bf700ef6700c89e5_Snipaste_20180723_172752.png" alt="Snipaste_20180723_172752png"> </p>
<h3 id="7-3-更简洁的形式"><a href="#7-3-更简洁的形式" class="headerlink" title="7.3 更简洁的形式"></a>7.3 更简洁的形式</h3><p><code>git log --oneline</code><br><img src="https://res.quinntian.xyz//file/2018/07/1e624849669341e5864d1505d4732b86_Snipaste_20180723_172823.png" alt="Snipaste_20180723_172823png"> </p>
<h3 id="7-4-显示步数的方式"><a href="#7-4-显示步数的方式" class="headerlink" title="7.4 显示步数的方式"></a>7.4 显示步数的方式</h3><p><code>git relog</code><br><img src="https://res.quinntian.xyz//file/2018/07/1ec4aebb753a4aa0816688fba1c3b68b_Snipaste_20180723_172848.png" alt="Snipaste_20180723_172848png"><br><img src="https://res.quinntian.xyz//file/2018/07/9e9bbbb134c948c594b485c03e902551_Snipaste_20180723_174108.png" alt="Snipaste_20180723_174108png"> </p>
<h2 id="8-Git回退"><a href="#8-Git回退" class="headerlink" title="8.Git回退"></a>8.Git回退</h2><h3 id="8-1-回退本质"><a href="#8-1-回退本质" class="headerlink" title="8.1 回退本质"></a>8.1 回退本质</h3><p><img src="https://res.quinntian.xyz//file/2018/07/26d100c9e83444c9b6cdcd2faffe6fce_Snipaste_20180723_173044.png" alt="Snipaste_20180723_173044png"></p>
<h3 id="8-2-基于索引值回退"><a href="#8-2-基于索引值回退" class="headerlink" title="8.2 基于索引值回退"></a>8.2 基于索引值回退</h3><p>先查看历史记录<br><code> git reset [索引值]</code><br><img src="https://res.quinntian.xyz//file/2018/07/c8ee605037ff4a348aee9caf377c80c7_Snipaste_20180723_172823.png" alt="Snipaste_20180723_172823png"><br><img src="https://res.quinntian.xyz//file/2018/07/9d6e90c6f3bd4253afb0403456946b73_Snipaste_20180723_174108.png" alt="Snipaste_20180723_174108png"></p>
<h3 id="8-3-使用"><a href="#8-3-使用" class="headerlink" title="8.3 使用^"></a>8.3 使用^</h3><p><code> git relog</code> 只能查看以当前<strong>为起点</strong>的历史记录<br><code> git reset --hard head[^] ^</code> 回退几步就是几个^<br> <img src="https://res.quinntian.xyz//file/2018/07/782d82c6d5d74508be4d264c653e5586_Snipaste_20180723_174852.png" alt="Snipaste_20180723_174852png"> </p>
<h3 id="8-4-使用-n"><a href="#8-4-使用-n" class="headerlink" title="8.4 使用~[n]"></a>8.4 使用~[n]</h3><p><code> git reset --hard head[~n]</code></p>
<h3 id="8-5-相关参数"><a href="#8-5-相关参数" class="headerlink" title="8.5 相关参数"></a>8.5 相关参数</h3><p><img src="https://res.quinntian.xyz//file/2018/07/6c31992ea8a74e7da0abef54f99a7c30_Snipaste_20180723_175326.png" alt="Snipaste_20180723_175326png"> </p>
<p><strong>[soft]参数</strong> 本地库移动指针<br><strong>[mixed]参数</strong> 本地库移动head指针和重置暂存区<br>**[hard]**参数 本地库、暂存区、工作区重置</p>
<h3 id="8-6-删除文件的找回"><a href="#8-6-删除文件的找回" class="headerlink" title="8.6 删除文件的找回"></a>8.6 删除文件的找回</h3><p>前提：删除之前，文件存在时的状态提交到本地库<br>操作：<code>git reset --hard HEAD[指针位置]</code></p>
<ul>
<li>删除操作提交到本地库，指针位置指向历史记录</li>
<li>删除操作尚未提交到本地库，指针位置直接使用HEAD</li>
</ul>
<h2 id="9-Git比较文件差异命令"><a href="#9-Git比较文件差异命令" class="headerlink" title="9.Git比较文件差异命令"></a>9.Git比较文件差异命令</h2><ul>
<li>命令<code>git dff [filename]</code><br>git工作区和暂存区比较<br>示例<br><img src="https://res.quinntian.xyz//file/2018/07/87947e464ab747cf937ff6966aec74b8_image.png" alt="imagepng"><br><img src="https://res.quinntian.xyz//file/2018/07/c9acaa7be1fb46fc9e9b226ec578086b_image.png" alt="imagepng"></li>
<li>命令<code>git dff [本地库中的历史版本][filename]</code><br>将工作区中的文件和本地库历史记录作比较<br>示例<br><code> git diff HEAD [file] 或git diff head^ [file]</code></li>
<li>不指定文件名的时候比较当前工作区中所有的文件<br>示例<br><code>git diff head或git diff</code></li>
</ul>
<p>10.版本控制命令<br>版本控制中使用多条线同时推进多个任务<br><img src="https://res.quinntian.xyz//file/2018/07/f838925f4bb542449ba61fffaaafe424_image.png" alt="imagepng"><br>同时并行推进多个功能开发<br>各个分支开发过程中，某分支开发分支不会对其他分支有任何映像</p>
<h3 id="10-1-查看分支"><a href="#10-1-查看分支" class="headerlink" title="10.1 查看分支"></a>10.1 查看分支</h3><p><code>git branch -v</code><br><img src="https://res.quinntian.xyz//file/2018/07/0e8c787edc7246a6b79e3e68c134b96d_image.png" alt="imagepng"> </p>
<h3 id="10-2-创建分支"><a href="#10-2-创建分支" class="headerlink" title="10.2 创建分支"></a>10.2 创建分支</h3><p><code>git branch [分支名]</code><br><img src="https://res.quinntian.xyz//file/2018/07/058db832b317423e9900ab807651242d_image.png" alt="imagepng"><br><img src="https://res.quinntian.xyz//file/2018/07/9de37d7dfb68491e99375d923658f0a6_image.png" alt="imagepng"> </p>
<h3 id="10-3-切换分支"><a href="#10-3-切换分支" class="headerlink" title="10.3 切换分支"></a>10.3 切换分支</h3><p><code>git checkout [分支名]</code><br><img src="https://res.quinntian.xyz//file/2018/07/e408ac349838486e8a2152912299b733_image.png" alt="imagepng"> </p>
<h3 id="10-4-合并分支"><a href="#10-4-合并分支" class="headerlink" title="10.4 合并分支"></a>10.4 合并分支</h3><p><code> git merger [要合并的分支]</code> <strong>要合并分支首先切换到主分支</strong></p>
<p>示例</p>
<p><img src="https://res.quinntian.xyz//file/2018/07/1eb354c66f09479d9103e020a2510961_image.png" alt="imagepng"><br><img src="https://res.quinntian.xyz//file/2018/07/893edc14012d4e449bce739f78cdf8df_image.png" alt="imagepng"> </p>
<h3 id="10-4-解决冲突"><a href="#10-4-解决冲突" class="headerlink" title="10.4 解决冲突"></a>10.4 解决冲突</h3><p>冲突的表现<br>会自动合并并标记冲突<br><img src="https://res.quinntian.xyz//file/2018/07/c343eb632eef47aba77bbc1187f59db0_image.png" alt="imagepng"> </p>
<p>冲突的解决</p>
<ul>
<li>1.编辑文件，把文件修改到满意程度</li>
<li>2.git add[文件名]</li>
<li>3.git commit -m[]此时不需要加文件名</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat7进入管理界面的方法，401错误解决方法</title>
    <url>/2018/07/24/Java/Tomcat7%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C401%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-2019102314154178147/</url>
    <content><![CDATA[<p>title: Tomcat7进入管理界面的方法，401错误解决方法<br>date: ‘2018-07-24 10:50:05’<br>updated: ‘2018-07-24 10:57:43’<br>tags: [Tomcat]<br>permalink: /articles/2018/07/24/1532400605140.html</p>
<hr>
<p>原博客文章备份：<a href="https://blog.csdn.net/leofitz/article/details/79886706">https://blog.csdn.net/leofitz/article/details/79886706</a><br>按照网上各种教程，取消注释等等方法，<strong>总是输入三次用户和密码后显示401错误</strong>，只有按下面代码更改后能进入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tomcat-users&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  NOTE:  By default, no user is included in the &quot;manager-gui&quot; role required</span><br><span class="line">  to operate the &quot;/manager/html&quot; web application.  If you wish to use this app,</span><br><span class="line">  you must define such a user - the username and password are arbitrary.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  NOTE:  The sample user and role entries below are wrapped in a comment</span><br><span class="line">  and thus are ignored when reading this file. Do not forget to remove</span><br><span class="line">  &lt;!.. ..&gt; that surrounds them.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">  &lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class="line">  &lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class="line">  &lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">  &lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;tomcat,manager-gui&quot;/&gt;</span><br><span class="line">  &lt;user username=&quot;both&quot; password=&quot;tomcat&quot; roles=&quot;tomcat,role1&quot;/&gt;</span><br><span class="line">  &lt;user username=&quot;role1&quot; password=&quot;tomcat&quot; roles=&quot;role1&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat不同项目使用不同的端口号.md</title>
    <url>/2018/07/21/Java/Tomcat%E4%B8%8D%E5%90%8C%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7.md-2019102314154447278/</url>
    <content><![CDATA[<p>title: Tomcat不同项目使用不同的端口号<br>date: ‘2018-07-21 12:04:13’<br>updated: ‘2018-07-21 12:06:45’<br>tags: [Tomcat, 后端]<br>permalink: /articles/2018/07/21/1532145852473.html</p>
<hr>
<p><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/07/28ca60812b5a4fcfb323a0f78c10a533_Snipaste_20180721_115505.png" alt="Snipaste_20180721_115505png"> </p>
<p><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/07/f60e6deae8804708b38f5df7fc027208_Snipaste_20180721_115552.png" alt="Snipaste_20180721_115552png"> </p>
<p><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/07/6036bbd269804eec90b4ddd8e6fa0cac_Snipaste_20180721_120147.png" alt="Snipaste_20180721_120147png"> </p>
<p>Tomcat设置不输入项目名直接访问</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;Context <span class="built_in">path</span>=<span class="string">&quot;&quot;</span> docBase=<span class="string">&quot;solo&quot;</span> <span class="built_in">debug</span>=<span class="string">&quot;0&quot;</span> reloadable=<span class="string">&quot;true&quot;</span>/&gt; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>ES6笔记</title>
    <url>/2020/12/09/JavaScript/ES6%E7%AC%94%E8%AE%B0-es6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="es6是什么"><a href="#es6是什么" class="headerlink" title="es6是什么"></a>es6是什么</h1><blockquote>
<p>ECMAScript 6 目前基本成为业界标准，它的普及速度比 ES5 要快很多，主要原因是现代浏览器对 ES6 的支持相当迅速，尤其是 Chrome 和 Firefox 浏览器，已经支持 ES6 中绝大多数的特性。</p>
</blockquote>
<p><strong>就是最新的JavaScript标准，之前是es5</strong></p>
<h1 id="let、const-和-block-作用域"><a href="#let、const-和-block-作用域" class="headerlink" title="let、const 和 block 作用域"></a>let、const 和 block 作用域</h1><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#123;</span><br><span class="line">  let a = <span class="number">3</span>;</span><br><span class="line">  console.log(a); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line">console.log(a); <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>let 允许创建块级作用域，ES6 推荐在函数中使用 let 定义变量，而非 var：</p>
</blockquote>
<p><strong>创建块级作用域，在函数体中使用不再用var 定义变量了，而是let</strong></p>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> ARR = [<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">  ARR.push(<span class="number">7</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(ARR); <span class="comment">// [5,6,7]</span></span><br><span class="line">  ARR = <span class="number">10</span>; <span class="comment">// TypeError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>同样在块级作用域有效的另一个变量声明方式是 const，它可以声明一个常量。ES6 中，const 声明的常量类似于指针，它指向某个引用，也就是说这个「常量」并非一成不变的</p>
</blockquote>
<p><strong>使用const声明块级变量，声明的是常量，类似于C中的指针（引用），不是一成不变的</strong></p>
<blockquote>
<p>let 关键词声明的变量不具备变量提升（hoisting）特性<br>let 和 const 声明只在最靠近的一个块中（花括号内）有效<br>当使用常量 const 声明时，请使用大写变量，如：CAPITAL_CASING<br>const 在声明时必须被赋值</p>
</blockquote>
<ul>
<li><strong>let关键字声明的变量不具备变量提升，所谓变量提升就是：先声明后用和先用后声明都一样，js默认提升到首部，但是用let就不行，变量不会被默认上升到首部，也就是说在哪声明后下面能用，之上不能使用</strong></li>
<li><strong>作用域问题：let和var声明靠近最近的花括号中可以使用</strong></li>
<li>**声明标准问题：const必须使用大写变量</li>
<li><strong>const声明必须赋值</strong><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><blockquote>
<p>ES6 中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 =&gt;，紧接着是函数体：</p>
</blockquote>
</li>
</ul>
<p><strong>函数的简写形式</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var getPrice = function() &#123;</span><br><span class="line">  return 4.55;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// Implementation with Arrow Function</span><br><span class="line">var getPrice = () =&gt; 4.55;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>第一种js常见的函数，第二种函数简写形式<br>具体语法—&gt;++（函数参数）=&gt;{函数体}++</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">let arr = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;];</span><br><span class="line"> </span><br><span class="line">let breakfast = arr.map(fruit =&gt; &#123;</span><br><span class="line">  return fruit + &#x27;s&#x27;;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">console.log(breakfast); // apples bananas oranges</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong>关于上面map函数可能看不懂是JavaScript的原生函数，其中fruit是函数的参数，这里因为一个参数省略了括号</strong>，<br>他的作用是<br>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。<br>map() 方法按照原始数组元素顺序依次处理元素。<br><strong>就是返回经过函数处理的数组，也就是说调用这个方法，会把数组中的数据依次传入后面的函数处理</strong><br>语法：<strong>array.map(function(currentValue,index,arr), thisValue)</strong><br><strong>其中第二个参数是可选值</strong>，参见 <a href="https://www.runoob.com/jsref/jsref-map.html">https://www.runoob.com/jsref/jsref-map.html</a><br><strong>下面是正常使用非es6简化函数的用法</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var numbers = [65, 44, 12, 4];</span><br><span class="line"></span><br><span class="line">function multiplyArrayElement(num) &#123;</span><br><span class="line">    return num * document.getElementById(&quot;multiplyWith&quot;).value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML = numbers.map(multiplyArrayElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>箭头函数让this对象总是指向对象本身</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">  this.age = 0;</span><br><span class="line"> </span><br><span class="line">  setInterval(function growUp() &#123;</span><br><span class="line">    // 在非严格模式下，growUp() 函数的 this 指向 window 对象</span><br><span class="line">    this.age++;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">alert(this.age);</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person();</span><br></pre></td></tr></table></figure>
<p><strong>运行后会发现浏览器的提示永远都是0，也就是说明grow函数内的this.age指向的并不是外部函数person里的this.age，而是指向的windows对象</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">  var self = this;</span><br><span class="line">  self.age = 0;</span><br><span class="line"> </span><br><span class="line">  setInterval(function growUp() &#123;</span><br><span class="line">    self.age++;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>所以在这种写法中，如果grow函数需要使用外部的函数的age，我们通常的做法是先将this赋值给一个对象，这样就避免了指向Windows对象</strong><br><strong>但是使用箭头函数避免上述麻烦</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">unction Person()&#123;</span><br><span class="line">  this.age = 0;</span><br><span class="line"> </span><br><span class="line">  setInterval(() =&gt; &#123;</span><br><span class="line">    // |this| 指向 person 对象</span><br><span class="line">    this.age++;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var person = new Person();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h1><p><strong>ES6 中允许你对函数参数设置默认值</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">let getFinalPrice = (price, tax=0.7) =&gt; price + price * tax;</span><br><span class="line">getFinalPrice(500); // 850</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Spread-Rest-操作符"><a href="#Spread-Rest-操作符" class="headerlink" title="Spread / Rest 操作符"></a>Spread / Rest 操作符</h1><blockquote>
<p>Spread / Rest 操作符指的是 …，具体是 Spread 还是 Rest 需要看上下文语境。</p>
</blockquote>
<p><strong>就是三个点…</strong><br>当被用于迭代器中时，它是一个 Spread 操作符：<br><strong>作为数组传入，但是参数是三个此时…的作用就是迭代数组分别传入参数</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">function foo(x,y,z) &#123;</span><br><span class="line">  console.log(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let arr = [1,2,3];</span><br><span class="line">foo(...arr); // 1 2 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>用于函数传参的时候是一个rest<br><strong>数组传参的时候，把参数转换为数组形式</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">function foo(...args) &#123;</span><br><span class="line">  console.log(args);</span><br><span class="line">&#125;</span><br><span class="line">foo( 1, 2, 3, 4, 5); // [1, 2, 3, 4, 5]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript匿名函数和回调函数的理解.md</title>
    <url>/2018/09/03/JavaScript/JavaScript%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3.md-2019102314160828543/</url>
    <content><![CDATA[<p>title: JavaScript匿名函数和回调函数的理解<br>date: ‘2018-09-03 16:46:23’<br>updated: ‘2018-09-03 17:06:42’<br>tags: [JavaScript]<br>permalink: /articles/2018/09/03/1535964349016.html</p>
<hr>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数又称闭包函数，顾名思义就是没有函数名的函数</p>
<h4 id="1-创建函数的方式"><a href="#1-创建函数的方式" class="headerlink" title="1.创建函数的方式"></a>1.创建函数的方式</h4><p>普通函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;函数体&#125;</span><br></pre></td></tr></table></figure>
<p>匿名函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;函数体&#125;</span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">// &quot;function&quot; </span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;<span class="keyword">return</span> x+y;&#125;);<span class="comment">// &quot;function&quot; </span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;return x*y;&quot;</span>))<span class="comment">// &quot;function&quot; </span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">// &quot;function&quot;</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;<span class="keyword">return</span> x+y;&#125;);<span class="comment">// &quot;function&quot;</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;return x*y;&quot;</span>))<span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-匿名函数用途"><a href="#2-匿名函数用途" class="headerlink" title="2.匿名函数用途"></a>2.匿名函数用途</h4><p>回调函数和直接使用函数</p>
<h4 id="3-匿名函数调用"><a href="#3-匿名函数调用" class="headerlink" title="3.匿名函数调用"></a>3.匿名函数调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> abc=<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123; </span><br><span class="line"><span class="keyword">return</span> x+y; </span><br><span class="line">  &#125; </span><br><span class="line"> alert(abc(<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// &quot;5&quot;</span></span><br></pre></td></tr></table></figure>
<p>或使用小括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert((<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;<span class="keyword">return</span> x+y;&#125;)(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">// &quot;5&quot; </span></span><br><span class="line">alert((<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;return x*y;&quot;</span>))(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">// &quot;6&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>小括号能把我们的表达式组合分块，并且每一块，也就是每一对小括号，都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号对返回的，就是一个匿名函数的Function 对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var abc=function(x,y)&#123;return x+y;&#125;;// 把匿名函数对象赋给abc </span><br><span class="line">// abc 的constructor 就和匿名函数的constructor 一样了。也就是说，两个函数的实现是一样的。 </span><br><span class="line">alert((abc).constructor==(function(x,y)&#123;return x+y;&#125;).constructor);</span><br></pre></td></tr></table></figure>
<p>PS ：constructor 是指创建对象的函数。也就是函数对象所代表的函数体。<br>总之，将其（被小括号包含的匿名函数）理解为括号表达式返回的函数对象，然后就可以对这个函数对象作正常的参数列表调用了。（前面这里犯了个错误，只有函数表达式还是不能直接调用函数的，去掉匿名函数括号必须要伴随将表达式赋值。也就是(function(){alert(1)})() 应该是与 a=function(){alert(1)}() 等价，不能连a= 都去掉。）</p>
<p>匿名函数链式调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function(o) &#123; </span><br><span class="line">alert(o); </span><br><span class="line">return arguments.callee; </span><br><span class="line">&#125;)(&#x27;water&#x27;)(&#x27;down&#x27;);</span><br></pre></td></tr></table></figure>
<p>不常见的匿名函数调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~(function()&#123; </span><br><span class="line">alert(&#x27;water&#x27;); </span><br><span class="line">&#125;)();//写法有点酷~</span><br><span class="line"></span><br><span class="line">void function()&#123; </span><br><span class="line">alert(&#x27;water&#x27;); </span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">+function()&#123; </span><br><span class="line">alert(&#x27;water&#x27;); </span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">-function()&#123; </span><br><span class="line">alert(&#x27;water&#x27;); </span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">~function()&#123; </span><br><span class="line">alert(&#x27;water&#x27;); </span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">!function()&#123; </span><br><span class="line">alert(&#x27;water&#x27;); </span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">(function()&#123; </span><br><span class="line">alert(&#x27;water&#x27;); </span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<h4 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4.闭包"></a>4.闭包</h4><blockquote>
<p>闭包是什么？闭包是指某种程序语言中的代码块允许一级函数存在并且在一级函数中所定义的自由变量能不被释放，直到一级函数被释放前，一级函数外也能应用这些未释放的自由变量。<br>怎样？看得一头冒汗吧…… 没事，我也是（虽然是我是了解的，只是表达能力的问题）。让我们换个更加简单的方法说明：闭包，其实是一种语言特性，它是指的是程序设计语言中，允许将函数看作对象，然后能像在对象中的操作般在函数中定义实例（局部）变量，而这些变量能在函数中保存到函数的实例对象销毁为止，其它代码块能通过某种方式获取这些实例（局部）变量的值并进行应用扩展。<br>不知道这么再解释后会否更加清晰，如果还是不明白，那么我们再简化一下：<strong>闭包，其实就是指程序语言中能让代码调用已运行的函数中所定义的局部变量。</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var abc=function(y)&#123; </span><br><span class="line">var x=y;// 这个是局部变量 </span><br><span class="line">return function()&#123; </span><br><span class="line">alert(x++);// 就是这里调用了闭包特性中的一级函数局部变量的x ，并对它进行操作 </span><br><span class="line">alert(y--);// 引用的参数变量也是自由变量 </span><br><span class="line">&#125;&#125;(5);// 初始化 </span><br><span class="line">abc();// &quot;5&quot; &quot;5&quot; </span><br><span class="line">abc();// &quot;6&quot; &quot;4&quot; </span><br><span class="line">abc();// &quot;7&quot; &quot;3&quot; </span><br><span class="line">alert(x);// 报错！“x” 未定义！</span><br></pre></td></tr></table></figure>
<p>是否应用了闭包特性，必须确定该段代码有没有最重要的要素：未销毁的局部变量。那么很显然，没有任何实现的匿名函数不可能应用了闭包特性。但如果匿名函数里面有实现呢？那也还得确定它的实现中有没有 用到那些未销毁的局部变量。所以如果问你那个开篇中的jQuery 代码片段是应用了JS 里的什么特性？那么它只是匿名函数与匿名函数的调用而已。但是，它 隐含了闭包的特性，并且随时可以实现闭包应用。</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>函数的一种创建方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//可以这样创建函数`</span><br><span class="line"></span><br><span class="line">var fn = new `Function(&quot;arg1&quot;,&quot;arg2&quot;,&quot;return arg1 * arg2;&quot;);`</span><br><span class="line"></span><br><span class="line">fn(2, 3); //6</span><br></pre></td></tr></table></figure>
<p>传递函数作为回调</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fn(arg1, arg2, callback)&#123;</span><br><span class="line"> var num = Math.ceil(Math.random() * (arg1 - arg2) + arg2);</span><br><span class="line"> callback(num);　　//传递结果</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(10, 20, function(num)&#123;</span><br><span class="line"> console.log(&quot;Callback called! Num: &quot; + num); </span><br><span class="line">&#125;);　　　　//结果为10和20之间的随机数</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/article/58722.htm">原文地址</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript要点笔记</title>
    <url>/2020/12/09/JavaScript/JavaScript%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0-js%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h1><blockquote>
<p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x = <span class="number">5</span>; <span class="comment">// 变量 x 设置为 5</span></span><br><span class="line"></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// 在元素中显示 x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x; <span class="comment">// 声明 x</span></span><br><span class="line"><span class="comment">//结果相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x; <span class="comment">// 声明 x</span></span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// 变量 x 设置为 5</span></span><br><span class="line"></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// 在元素中显示 x</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>变量提升：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部</strong></li>
</ul>
<p><strong>变量初始化不会提升</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></span><br><span class="line"></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.innerHTML = x + <span class="string">&quot; &quot;</span> + y;           <span class="comment">// 显示 x 和 y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">7</span>; <span class="comment">// 初始化 y</span></span><br><span class="line">等同于</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></span><br><span class="line"><span class="keyword">var</span> y;     <span class="comment">// 声明 y</span></span><br><span class="line"></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.innerHTML = x + <span class="string">&quot; &quot;</span> + y;           <span class="comment">// 显示 x 和 y</span></span><br><span class="line"></span><br><span class="line">y = <span class="number">7</span>;    <span class="comment">// 设置 y 为 7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>运行显示y未定义；所谓初始化就是声明的同时附初始值。上面y未被声明的原因是，使用在前，初始化在在后，但初始化不会提升变量</strong><br>改成如下，可以正常运行，是因为初始化在上，尽管未被提升。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">7</span>; <span class="comment">// 初始化 y</span></span><br><span class="line"></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>); <span class="comment">// 查找元素</span></span><br><span class="line">elem.innerHTML = x + <span class="string">&quot; &quot;</span> + y;           <span class="comment">// 显示 x 和 y</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>为了避免这些问题，通常我们在每个作用域开始前声明这些变量，这也是正常的 JavaScript 解析步骤，易于我们理解。</strong></li>
<li><strong>JavaScript 严格模式(strict mode)不允许使用未声明的变量。</strong><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><blockquote>
<p>JavaScript 严格模式（strict mode）即在严格的条件下运行。<br>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。<br>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。<br>“use strict” 的目的是指定代码在严格条件下执行。</p>
</blockquote>
</li>
</ul>
<p><strong>严格模式下你不能使用未声明的变量。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">支持严格模式的浏览器:</span><br><span class="line">Internet Explorer <span class="number">10</span> +、 Firefox <span class="number">4</span>+ Chrome <span class="number">13</span>+、 Safari <span class="number">5.1</span>+、 Opera <span class="number">12</span>+。</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>不允许删除变量或对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">delete</span> x;                <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>不允许删除函数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">p1, p2</span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">delete</span> x;                <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>不允许变量重名:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">p1, p1</span>) </span>&#123;&#125;;   <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p><strong>不允许使用八进制:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">010</span>;             <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不允许使用转义字符:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = \<span class="number">010</span>;            <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>不允许对只读属性赋值:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;x&quot;</span>, &#123;<span class="attr">value</span>:<span class="number">0</span>, <span class="attr">writable</span>:<span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">obj.x = <span class="number">3.14</span>;            <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>不允许对一个使用getter方法读取的属性进行赋值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="keyword">get</span> <span class="title">x</span>() &#123;<span class="keyword">return</span> <span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">obj.x = <span class="number">3.14</span>;            <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>不允许删除一个不允许删除的属性：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">delete Object.prototype; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>变量名不能使用 “eval” 字符串:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">3.14</span>;         <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>变量名不能使用 “arguments” 字符串:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">arguments</span> = <span class="number">3.14</span>;    <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>不允许使用以下这种语句</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">Math</span>)&#123;x = cos(<span class="number">2</span>)&#125;; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>由于一些安全原因，在作用域 eval() 创建的变量不能被调用：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span> (<span class="string">&quot;var x = 2&quot;</span>);</span><br><span class="line">alert (x);               <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>禁止this关键字指向全局对象。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回false，因为&quot;this&quot;指向全局对象，&quot;!this&quot;就是false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">f();<span class="comment">// 报错，this未定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>保留关键字</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">为了向将来Javascript的新版本过渡，严格模式新增了一些保留关键字：</span><br><span class="line"></span><br><span class="line">implements</span><br><span class="line">interface</span><br><span class="line"><span class="keyword">let</span></span><br><span class="line">package</span><br><span class="line">private</span><br><span class="line">protected</span><br><span class="line">public</span><br><span class="line"><span class="keyword">static</span></span><br><span class="line"><span class="keyword">yield</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote>
<p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p>
</blockquote>
<h2 id="函数的基本语法"><a href="#函数的基本语法" class="headerlink" title="函数的基本语法"></a>函数的基本语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionname</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>大小写敏感</strong></p>
<h2 id="返回值函数"><a href="#返回值函数" class="headerlink" title="返回值函数"></a>返回值函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>函数内的变量是<strong>局部变量</strong>，<strong>函数外声明的是全局变量</strong></li>
<li><strong>声明周期：局部变量函数运行完，全局变量页面关闭</strong></li>
</ul>
<p><strong>变量如果没声明就赋值，则会把变量赋值为windows</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> var1 = <span class="number">1</span>; <span class="comment">// 不可配置全局属性</span></span><br><span class="line">var2 = <span class="number">2</span>; <span class="comment">// 没有使用 var 声明，可配置全局属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.var1); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.var1); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.var2); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var1; <span class="comment">// false 无法删除</span></span><br><span class="line"><span class="built_in">console</span>.log(var1); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> var2; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> var2); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(var2); <span class="comment">// 已经删除 报错变量未定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>意思是未声明全局变量可以配置也就是可以删除，声明的不可以配置也就是不可以删除</strong></p>
<h2 id="函数表达式即匿名函数"><a href="#函数表达式即匿名函数" class="headerlink" title="函数表达式即匿名函数"></a>函数表达式即匿名函数</h2><p><strong>所谓函数表达式就是将函数赋值给一个变量的格式，这个变量以后就可以当做函数来使用，而不是以往只能用带括号的形式调用</strong><br><strong>另外这种格式，还有另外一种叫法++匿名函数++</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;;</span><br><span class="line"><span class="keyword">var</span> z = x(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="内置构造函数来定义函数"><a href="#内置构造函数来定义函数" class="headerlink" title="内置构造函数来定义函数"></a>内置构造函数来定义函数</h2><p><strong>使用函数构造器，通过js内置的函数构造器进行定义</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;return a * b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p><strong>参见提升</strong><br><strong>函数可以在声明之前就可以调用。提升将函数的作用域提升到前面</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myFunction(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>使用表达式定义函数无法提升</strong></p>
<h2 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h2><ul>
<li><strong>只有函数表达式才能自调用，其格式是在后面加一个括号</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;Hello!!&quot;</span>;      <span class="comment">// 我将调用自己</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>上面的函数用一个括号括起来的意思是说明这是一个函数表达式-匿名函数</strong></p>
<h2 id="函数可以当做值和表达式使用"><a href="#函数可以当做值和表达式使用" class="headerlink" title="函数可以当做值和表达式使用"></a>函数可以当做值和表达式使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h2 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h2><p><strong>在js中任何一个都可以当做对象</strong></p>
<blockquote>
<p>在 JavaScript 中使用 typeof 操作符判断函数类型将返回 “function” 。<br>但是JavaScript 函数描述为一个对象更加准确。<br><strong>JavaScript的函数是由属性和方法的</strong><br>比如arguments.length返回函数调用参数个数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>toString方法可以函数作为一个字符串返回，运行后整个函数会作为一个字符串输出</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> txt = myFunction.toString();</span><br></pre></td></tr></table></figure>
<h2 id="函数与对象里的方法的关系"><a href="#函数与对象里的方法的关系" class="headerlink" title="函数与对象里的方法的关系"></a>函数与对象里的方法的关系</h2><ul>
<li><strong>函数如果在所定义对象里出现，叫做对象方法</strong></li>
<li><strong>函数如果用于创建新的对象，叫做对象的构造函数</strong><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2></li>
</ul>
<p><strong>在es6笔记中提到</strong><br><strong>声明函数的语法变了，变得更加简洁</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; &#123; 函数声明 &#125;</span><br><span class="line"></span><br><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; 表达式(单一)</span><br><span class="line"><span class="comment">// 相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>当括号里的参数只有一个的时候，可以把括号省略不写</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(单一参数) =&gt; &#123;函数声明&#125;</span><br><span class="line">单一参数 =&gt; &#123;函数声明&#125;</span><br></pre></td></tr></table></figure>
<p><strong>如果没有参数，则圆括号必须写</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;函数声明&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>es5当前与es6的对比</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>有的箭头函数没有自己的this,所以不适合用于对象中的方法，参见<a href="#%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95">对象方法</a></strong></li>
<li>箭头函数会帮我绑定外层this的值，也就是说一个函数里如果有一个箭头函数，那么在里面的this和外层函数的this所指向的都是外层。<a href="%E5%8F%82%E8%A7%81es6%E7%9A%84this">参见es6的this</a></li>
<li><strong>箭头函数不能提升，必须先声明后使用</strong></li>
<li>使用箭头函数最好使用const声明，而不是var,因为函数是个常量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123; <span class="keyword">return</span> x * y &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="函数的显式参数和隐式参数"><a href="#函数的显式参数和隐式参数" class="headerlink" title="函数的显式参数和隐式参数"></a>函数的显式参数和隐式参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">functionName</span>(<span class="params">parameter1, parameter2, parameter3</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 要执行的代码……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><strong>什么是显式参数：显式参数就是定义函数的时候会显式的指明参数</strong></li>
<li><strong>什么是隐式参数：就是调用函数传递函数真正的值</strong></li>
<li><strong>类似Java中的形参和实参</strong></li>
</ul>
<p><strong>参数规则</strong></p>
<ul>
<li><strong>显式参数不需要指定类数据类型</strong></li>
<li><strong>隐式参数没有类型检测</strong></li>
<li><strong>隐式参数的个数没有限制，不会检测，传几个是几个</strong></li>
<li><strong>在ES5中参数掉用的时候如果没有出入参数，参数默认设置位undefined，但是建议最好设置一个默认值</strong><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">function myFunction(x, y) &#123;</span><br><span class="line">    if (y === undefined) &#123;</span><br><span class="line">          y = 0;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">function myFunction(x, y) &#123;</span><br><span class="line">    y = y || 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>上面面||意思是或的意思，如果函数定义了那么代表是true，如果参数未定义则是undefined代表false，那么会返回0，并赋值给y</strong></p>
<h2 id="ES6函数支持设置默认值"><a href="#ES6函数支持设置默认值" class="headerlink" title="ES6函数支持设置默认值"></a>ES6函数支持设置默认值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">x, y = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// y is 10 if not passed or undefined</span></span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myFunction(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 输出 2</span></span><br><span class="line">myFunction(<span class="number">5</span>); <span class="comment">// 输出 15, y 参数的默认值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="函数里的内置对象arguments"><a href="#函数里的内置对象arguments" class="headerlink" title="函数里的内置对象arguments"></a>函数里的内置对象arguments</h2><p><strong>函数是一个对象，里面内置一个对象，arguments里有函数调用的参数数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x = findMax(<span class="number">1</span>, <span class="number">123</span>, <span class="number">500</span>, <span class="number">115</span>, <span class="number">44</span>, <span class="number">88</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &lt; <span class="number">2</span>) <span class="keyword">return</span> max;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">            max = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>上面的函数 尽管没有显示参数，但是仍然可以传递参数进去，见显式参数和隐式参数，但是传入的参数如何使用，这时候就可以用arguments对象，这个对象以数组的方式存储函数的参数列表</strong></p>
<h2 id="函数通过值传递参数"><a href="#函数通过值传递参数" class="headerlink" title="函数通过值传递参数"></a>函数通过值传递参数</h2><p><strong>函数通过隐式参数将值传入函数内，在函数内修改参数的值，不会影响外部值，也不会影响显示参数的初始值</strong></p>
<h2 id="函数通过对象传递参数"><a href="#函数通过对象传递参数" class="headerlink" title="函数通过对象传递参数"></a>函数通过对象传递参数</h2><p><strong>因为是对象，对象是一种引用，所以在函数内修改对象的属性，就会修改其初始值，因为对象是一种引用</strong></p>
<h2 id="函数作为一个函数调用与this的指向"><a href="#函数作为一个函数调用与this的指向" class="headerlink" title="函数作为一个函数调用与this的指向"></a>函数作为一个函数调用与this的指向</h2><ul>
<li><strong>在函数中this的作用：谁调用指向谁</strong></li>
<li><strong>直接调用：<code>函数名（参数列表）</code></strong><blockquote>
<p>函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。<br>在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。<br>在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。<br>myFunction() 和 window.myFunction() 是一样的：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.myFunction(<span class="number">10</span>, <span class="number">2</span>);    <span class="comment">// window.myFunction(10, 2) 返回 20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>函数中的this</strong><br><strong>函数中的this指向其谁调用就指向谁</strong>，<strong>因此如果不是被自身调用就会指向被调用者，在web浏览器中就会指向windows对象（浏览器）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">myFunction();                <span class="comment">// 返回 window 对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="函数作为方法调用与this的指向"><a href="#函数作为方法调用与this的指向" class="headerlink" title="函数作为方法调用与this的指向"></a>函数作为方法调用与this的指向</h2><p><strong>函数在对象中叫做方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.fullName();         <span class="comment">// 返回 &quot;John Doe&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>上述函数做一个对象中的方法，函数同时也是一个对象，其所有者是对象myObject，那么this所代表的是函数的拥有者myObject对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ar myObject = &#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.fullName();          <span class="comment">// 返回 [object Object] (所有者对象)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用构造函数调用函数与this指向"><a href="#使用构造函数调用函数与this指向" class="headerlink" title="使用构造函数调用函数与this指向"></a>使用构造函数调用函数与this指向</h2><ul>
<li><strong>什么是调用函数的构造函数：在调用函数前，前面增加一个new</strong></li>
<li><strong>实际是指调用函数的构造函数，会创建一个新的对象，这个新对象继承了构造函数的属性和方法</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数：只是函数体内写法不同，其他语法未变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName = arg1;</span><br><span class="line">    <span class="built_in">this</span>.lastName  = arg2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// This    creates a new object</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> myFunction(<span class="string">&quot;John&quot;</span>,<span class="string">&quot;Doe&quot;</span>);</span><br><span class="line">x.firstName;                             <span class="comment">// 返回 &quot;John&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>这里的this没有任何的值，只有当函数被调用实例化的时候才会创建,实例化后这里的this是指向新创建对象本身，因为这里是指新创建的实例其继承构造函数中的属性和方法，严格来说已经不叫函数对象</strong></p>
<h2 id="函数的方法调用函数"><a href="#函数的方法调用函数" class="headerlink" title="函数的方法调用函数"></a>函数的方法调用函数</h2><p><strong>函数是一种对象，那么对象就有属性和方法</strong><br><strong>在函数对象中有预定义的两个方法可以调用函数，叫做call()和apply（）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p id=<span class="string">&quot;demo&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> myObject;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> a * b;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">myObject = myFunction.call(myObject, <span class="number">10</span>, <span class="number">2</span>);    <span class="comment">// 返回 20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = myObject; </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&lt;script&gt;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> myObject, myArray;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> a * b;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">myArray = [<span class="number">10</span>, <span class="number">2</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">myObject = myFunction.apply(myObject, myArray);      <span class="comment">// 返回 20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = myObject; </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。<br>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。<br>通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用。</p>
</blockquote>
<p><strong>两个方法的第一参数都是传入一个对象</strong><br><strong>不同的是apply第二个参数传入的是数组，而call单独传入</strong></p>
<h1 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h1><blockquote>
<p>JavaScript 对象是拥有属性和方法的数据。</p>
</blockquote>
<p><strong>在js中什么都是变量</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car = <span class="string">&quot;Fiat&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>上面是变量赋值为…</strong><br><strong>对象是变量，变量也是对象，不同的是对象可以包含多个变量</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;<span class="attr">type</span>:<span class="string">&quot;Fiat&quot;</span>, <span class="attr">model</span>:<span class="number">500</span>, <span class="attr">color</span>:<span class="string">&quot;white&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="对象定义"><a href="#对象定义" class="headerlink" title="对象定义"></a>对象定义</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><p><strong>对象是键值对的容器</strong><br><strong>所以上面的键值对叫做对象属性</strong></p>
<blockquote>
<p><strong>类似</strong><br>PHP 中的关联数组<br>Python 中的字典<br>C 语言中的哈希表<br>Java 中的哈希映射<br>Ruby 和 Perl 中的哈希表</p>
</blockquote>
<h2 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.lastName;</span><br><span class="line">person[<span class="string">&quot;lastName&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>一种类似java对象.属性名，一种类似键值对取值</strong></p>
<h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法<span id="对象方法"></h2><p><strong>访问</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">name = person.fullName();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>创建</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methodName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span> : <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="attr">id</span> : <span class="number">5566</span>,</span><br><span class="line">    <span class="attr">fullName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>格式是++方法名：function{方法体}++</strong><br><strong>对象的方法和单独创建函数格式不同</strong></p>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p><strong>抽象来说js作用域就是变量、对象、函数的集合</strong></p>
<h2 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处不能调用 carName 变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> carName = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">    <span class="comment">// 函数内可调用 carName 变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>函数内是局部作用域，声明的变量是局部变量不能再外部使用，函数运行完销毁</strong></p>
<h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carName = <span class="string">&quot; Volvo&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数内可调用 carName 变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>函数外是全局作用域，声明的变量叫全局变量，任何地方可用，浏览器关闭销毁</strong></li>
<li><strong>没有声明，就赋值，是全局变量，尽管可能在函数体内声明了，如下</strong></li>
<li><strong>函数的参数是局部变量</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    carName = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">    <span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h2></li>
<li>局部变量函数用完就销毁</li>
<li>全局变量浏览器关闭才销毁<h2 id="HTML全局变量与window对象"><a href="#HTML全局变量与window对象" class="headerlink" title="HTML全局变量与window对象"></a>HTML全局变量与window对象</h2></li>
</ul>
<p><strong>window对象是全局变量，同时所有的全局变量都是属于window对象，所以可以如下调用</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处可使用 window.carName</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    carName = <span class="string">&quot;Volvo&quot;</span>;<span class="comment">//此处是全局变量因为没有var定义就直接赋值了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>什么是事件？发生在html元素上的事，比如单击一个按钮</strong><br><strong>只有你使用了js才会触发这些事件</strong><br><strong>HTML的事件可以使浏览器的行为，如HTML 页面完成加载，也可是用户行为如1</strong><br><strong>事件触发可以去执行一些js代码</strong></p>
<p><strong>事件的使用</strong><br><strong>在HTML元素的属性中有事件属性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;getElementById(&#x27;demo&#x27;).innerHTML=Date()&quot;</span>&gt;现在的时间是?&lt;/button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>这里的onclick就是HTML元素的一个属性，事件属性，在属性值里可以书写js代码！</strong><br><strong>如何调用js代码，比较常见的是在事件的属性值里书写js代码</strong></p>
<blockquote>
<p>事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:<br>页面加载时触发事件<br>页面关闭时触发事件<br>用户点击按钮执行动作<br>验证用户输入内容的合法性<br>等等 …<br>可以使用多种方法来执行 JavaScript 事件代码：</p>
</blockquote>
<ul>
<li>HTML 事件属性可以直接执行 JavaScript 代码</li>
<li>HTML 事件属性可以调用 JavaScript 函数</li>
<li>你可以为 HTML 元素指定自己的事件处理程序<br>你可以阻止事件的发生。<br>等等 ..</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>CenOS配置JDK</title>
    <url>/2018/07/24/Linux/CenOS%E9%85%8D%E7%BD%AEJDK-2019102314155747091/</url>
    <content><![CDATA[<p>title: CenOS配置JDK<br>date: ‘2018-07-24 10:52:09’<br>updated: ‘2018-07-24 10:56:58’<br>tags: [Linux, Java]<br>permalink: /articles/2018/07/24/1532400728584.html</p>
<hr>
<p>原博客文章备份： <a href="https://blog.csdn.net/leofitz/article/details/79883844">https://blog.csdn.net/leofitz/article/details/79883844</a></p>
<h1 id="CenOS配置JDK7"><a href="#CenOS配置JDK7" class="headerlink" title="CenOS配置JDK7"></a>CenOS配置JDK7</h1><p>2018年04月10日 17:06:20</p>
<p>阅读数：18 <a href="https://mp.csdn.net/postedit/79883844">编辑</a></p>
<h3 id="1-删除系统自带的JDK"><a href="#1-删除系统自带的JDK" class="headerlink" title="1.删除系统自带的JDK"></a>1.删除系统自带的JDK</h3><p><code>rpm -qa | grep jdk</code><br><img src="https://img-blog.csdn.net/20180410163432871?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGVvRml0eg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br><code>rpm -e --nodeps</code>删除<br><img src="https://img-blog.csdn.net/20180410163748904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGVvRml0eg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<h3 id="2-下载JDK"><a href="#2-下载JDK" class="headerlink" title="2.下载JDK"></a>2.下载JDK</h3><p>jdk7u79-linux-x64.tar.gz</p>
<h3 id="3-安装JDK"><a href="#3-安装JDK" class="headerlink" title="3.安装JDK"></a>3.安装JDK</h3><h4 id="3-1-检测当前系统中jdk的安装版本"><a href="#3-1-检测当前系统中jdk的安装版本" class="headerlink" title="3.1 检测当前系统中jdk的安装版本"></a>3.1 检测当前系统中jdk的安装版本</h4><p><code>java -version</code>显示未找到此命令<br><img src="https://img-blog.csdn.net/20180410164541407?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGVvRml0eg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<h4 id="3-2-解压下载好的jdk7u79-linux-x64-tar-gz"><a href="#3-2-解压下载好的jdk7u79-linux-x64-tar-gz" class="headerlink" title="3.2 解压下载好的jdk7u79-linux-x64.tar.gz"></a>3.2 解压下载好的jdk7u79-linux-x64.tar.gz</h4><p>当前安装包在我的myftp文件夹中，解压到目标文件夹<br><code>tar -zxvf jdk7u79-linux-x64.tar.gz -C /usr/lib/jvm</code></p>
<p><img src="https://img-blog.csdn.net/20180410165319714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGVvRml0eg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<h5 id="3-3-配置环境变量"><a href="#3-3-配置环境变量" class="headerlink" title="3.3 配置环境变量"></a>3.3 配置环境变量</h5><p><code>vim /etc/profile</code><br>在前面添加环境变量</p>
<p><code>export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_131  export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</code><br><img src="https://img-blog.csdn.net/20180410170250726?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGVvRml0eg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br><code>source /etc/profile</code>执行后立即生效无需重启</p>
<h4 id="3-4-查看Java版本安装完毕"><a href="#3-4-查看Java版本安装完毕" class="headerlink" title="3.4 查看Java版本安装完毕"></a>3.4 查看Java版本安装完毕</h4><p><code>java -version</code><br><img src="https://img-blog.csdn.net/20180410170527733?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTGVvRml0eg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS7使用Firewalld打开关闭防火墙与端口</title>
    <url>/2018/07/24/Linux/CentOS7%E4%BD%BF%E7%94%A8Firewalld%E6%89%93%E5%BC%80%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8E%E7%AB%AF%E5%8F%A3-2019102314155705067/</url>
    <content><![CDATA[<p>title: CentOS7使用firewalld打开关闭防火墙与端口<br>date: ‘2018-07-24 10:47:52’<br>updated: ‘2018-07-24 10:58:09’<br>tags: [Linux]<br>permalink: /articles/2018/07/24/1532400461850.html</p>
<hr>
<p>1、firewalld的基本使用</p>
<p>启动： systemctl start firewalld</p>
<p>关闭： systemctl stop firewalld</p>
<p>查看状态： systemctl status firewalld </p>
<p>开机禁用  ： systemctl disable firewalld</p>
<p>开机启用  ： systemctl enable firewalld</p>
<p>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p>
<p>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</p>
<p>3.配置firewalld-cmd</p>
<p>查看版本： firewall-cmd –version</p>
<p>查看帮助： firewall-cmd –help</p>
<p>显示状态： firewall-cmd –state</p>
<p>查看所有打开的端口： firewall-cmd –zone=public –list-ports</p>
<p>更新防火墙规则： firewall-cmd –reload</p>
<p>查看区域信息:  firewall-cmd –get-active-zones</p>
<p>查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0</p>
<p>拒绝所有包：firewall-cmd –panic-on</p>
<p>取消拒绝状态： firewall-cmd –panic-off</p>
<p>查看是否拒绝： firewall-cmd –query-panic</p>
<p>那怎么开启一个端口呢</p>
<p>添加</p>
<p>firewall-cmd –zone=public –add-port=80/tcp –permanent    （–permanent永久生效，没有此参数重启后失效）</p>
<p>重新载入</p>
<p>firewall-cmd –reload</p>
<p>查看</p>
<p>firewall-cmd –zone= public –query-port=80/tcp</p>
<p>删除</p>
<p>firewall-cmd –zone= public –remove-port=80/tcp –permanent</p>
<p>收藏至：<a href="https://www.cnblogs.com/moxiaoan/p/5683743.html">https://www.cnblogs.com/moxiaoan/p/5683743.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS8安装Seafile8.0专业版遇到的问题.md</title>
    <url>/2021/03/09/Linux/CentOS8%E5%AE%89%E8%A3%85Seafile8.0%E4%B8%93%E4%B8%9A%E7%89%88%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.md-centos8-an-zhuang-seafile80-zhuan-ye-ban-yu-dao-de-wen-ti-md/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul>
<li>我是用手动安装的，如果是用脚本安装和docker安装请忽略。</li>
<li>另外如果你想在centos7下装7.1+或8.0,必须装好python3.</li>
<li>中文版没找到专业版下载地址，直接去英文版<a href="https://download.seafile.com/d/6e5297246c/?p=/pro">https://download.seafile.com/d/6e5297246c/?p=/pro</a> 3用户免费，中文官网并没有明确指明</li>
</ul>
<h1 id="安装参考文档"><a href="#安装参考文档" class="headerlink" title="安装参考文档"></a>安装参考文档</h1><p>最好看英文文档和中文文档结合，有些中文文档并没有讲<br>英文文档，比如装着装着报错，肯定是没安装某些库。seafile安装会把python一家老小许多库全都装都一边。</p>
<ul>
<li>英文文档<br><a href="https://manual.seafile.com/deploy_pro/office_documents_preview/#faq-about-office-document-preview">https://manual.seafile.com/deploy_pro/office_documents_preview/#faq-about-office-document-preview</a></li>
<li>中文文档<br><a href="https://cloud.seafile.com/published/seafile-manual-cn/deploy_pro/office_documents_preview.md">https://cloud.seafile.com/published/seafile-manual-cn/deploy_pro/office_documents_preview.md</a><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1>系统环境：centos8.0<h1 id="安装中遇到的问题"><a href="#安装中遇到的问题" class="headerlink" title="安装中遇到的问题"></a>安装中遇到的问题</h1><h2 id="没有安装Mysqlclient报错"><a href="#没有安装Mysqlclient报错" class="headerlink" title="没有安装Mysqlclient报错"></a>没有安装Mysqlclient报错</h2>因为centos8是用的python3<br><code>pip3 install MySQLdb</code>前提是你要安装了pip3<br>否则<code>yum -y install pip3</code><h2 id="fatal-error-Python-h-No-such-file-or-directory"><a href="#fatal-error-Python-h-No-such-file-or-directory" class="headerlink" title="# fatal error: Python.h: No such file or directory"></a># fatal error: Python.h: No such file or directory</h2>没有安装<code>python3-dev</code><br><code>yum -y install install python3-dev</code><h2 id="已经启动seahub，没有报错，但是外网无法访问"><a href="#已经启动seahub，没有报错，但是外网无法访问" class="headerlink" title="已经启动seahub，没有报错，但是外网无法访问"></a>已经启动seahub，没有报错，但是外网无法访问</h2>排除防火墙和安全组、SElinux<br>因为<code>seafile7.0以后</code>就不支持直接8000访问了<br>编辑seafile安装目录下的<code>gunicorn.conf 把 bind=127.0.0.1 改成0.0.0.0</code>就可访问了<h2 id="seafile-LibreOffice-seahub前端报错问题，报服务器内部错误，报文件转换失败"><a href="#seafile-LibreOffice-seahub前端报错问题，报服务器内部错误，报文件转换失败" class="headerlink" title="seafile LibreOffice seahub前端报错问题，报服务器内部错误，报文件转换失败"></a>seafile LibreOffice seahub前端报错问题，报服务器内部错误，报文件转换失败</h2></li>
</ul>
<ol>
<li>升级LibreOffice版本</li>
<li>先查看日志，虽然中文文档写让看seafevent.log但是里面是不显示office报错的，英文文档写让看seahub.log<br>/conf/seafevents.conf，添加<br>[OFFICE CONVERTER]<br>enabled = true<br>host = 127.0.0.1 # 本机的IP地址，默认 127.0.0.1<br>port = 6000 # 端口，默认6000<br>workers = 1 # 并发运行 libreoffice 的进程数<br>outputdir = /tmp/ # 转换后的 office/pdf 文件的缓存路径。 默认是 /tmp/.<br>打开 seafile/conf/seahub_settings.py，添加:<br>OFFICE_CONVERTOR_ROOT = ‘<a href="http://127.0.0.1:6000/%E2%80%99">http://127.0.0.1:6000/’</a> # 与seafevents.conf中的 host 和 port 保持一致<br>重启seafilehub</li>
<li><strong>如果重启后报文件转换失败</strong>，<br>还有一种可能，这点再英文文档中提到了，但是中文文档没写<code>This error indicates you have not installed the package. Install it by .libreoffice-headless&quot;sudo yum install libreoffice-headless&quot;</code>没安装这个库<br>还不行执行<code>pkill -f soffice.bin</code></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Centos7以上Nginx配置成系统服务自启动</title>
    <url>/2021/02/24/Linux/Centos7%E4%BB%A5%E4%B8%8ANginx%E9%85%8D%E7%BD%AE%E6%88%90%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%90%AF%E5%8A%A8-centos7-yi-shang-nginx-pei-zhi-cheng-xi-tong-fu-wu-zi-qi-dong/</url>
    <content><![CDATA[<h1 id="创建开机自启文件"><a href="#创建开机自启文件" class="headerlink" title="创建开机自启文件"></a>创建开机自启文件</h1><p>首先在以下目录创建文件</p>
<p>   <code>vim /lib/systemd/system/nginx.service</code></p>
<p>   配置文件如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"># 设置执行启动、重新载入和停止的命令地址</span><br><span class="line">ExecStart=/usr/local/webserver/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/webserver/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/webserver/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参数说明<br>| [Unit] | 服务的说明 |<br>| — | — |<br>| Description | 描述服务 |<br>| After | 描述服务类别 |</p>
<table>
<thead>
<tr>
<th>[Service]</th>
<th>服务运行参数的设置</th>
</tr>
</thead>
<tbody><tr>
<td>Type=forking</td>
<td>是后台运行的形式</td>
</tr>
<tr>
<td>ExecStart</td>
<td>为服务的具体运行命令</td>
</tr>
<tr>
<td>ExecReload</td>
<td>为重启命令</td>
</tr>
<tr>
<td>ExecStop</td>
<td>为停止命令</td>
</tr>
<tr>
<td>PrivateTmp=True</td>
<td>表示给服务分配独立的临时空间</td>
</tr>
<tr>
<td>tip</td>
<td></td>
</tr>
<tr>
<td>[Service]的启动、重启、停止命令全部要求使用绝对路径</td>
<td></td>
</tr>
<tr>
<td>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</td>
<td></td>
</tr>
<tr>
<td>对于nginx的位置可以使用<code>find / -name nginx</code>进行寻找</td>
<td></td>
</tr>
</tbody></table>
<h1 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h1><p>设置开机自启动</p>
<p><code>systemctl enable nginx</code></p>
<p>关闭开机自动启动</p>
<p><code>systemctl disable nginx</code></p>
<h1 id="服务的相关命令"><a href="#服务的相关命令" class="headerlink" title="服务的相关命令"></a>服务的相关命令</h1><p>启动nginx服务</p>
<p><code>systemctl start nginx.service</code></p>
<p>停止服务</p>
<p><code>systemctl stop nginx.service</code></p>
<p>重新启动服务</p>
<p><code>systemctl restart nginx.service</code></p>
<p>查看所有已启动的服务</p>
<p><code>systemctl list-units --type=service</code></p>
<p>查看服务当前状态</p>
<p><code>systemctl status nginx.service</code></p>
<p>设置开机自启动</p>
<p><code>systemctl enable nginx.service</code></p>
<p>停止开机自启动</p>
<p><code>systemctl disable nginx.service</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Centos7以上版本Vsftpd安装、Firewall和SELinux配置</title>
    <url>/2018/07/24/Linux/Centos7%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%ACVsftpd%E5%AE%89%E8%A3%85%E3%80%81Firewall%E5%92%8CSELinux%E9%85%8D%E7%BD%AE-2019102314160021092/</url>
    <content><![CDATA[<p>title: Centos7以上版本 vsftpd安装、firewall和SELinux配置<br>date: ‘2018-07-24 10:56:13’<br>updated: ‘2018-07-24 10:59:26’<br>tags: [Linux]<br>permalink: /articles/2018/07/24/1532400973145.html</p>
<hr>
<p>原博客文章备份：<a href="https://blog.csdn.net/leofitz/article/details/79842559">https://blog.csdn.net/leofitz/article/details/79842559</a><br>   <strong>CentOS7.0以上版本更换了防火墙为firewall</strong><br>   <strong>CentOS7.0之前版本的防火墙配置不再适用</strong></p>
<h2 id="firewall防火墙配置"><a href="#firewall防火墙配置" class="headerlink" title="firewall防火墙配置"></a><strong>firewall防火墙配置</strong></h2><h3 id="重启防火墙服务"><a href="#重启防火墙服务" class="headerlink" title="重启防火墙服务"></a>重启防火墙服务</h3><p><code>systemctl restart firewalld.service</code></p>
<h3 id="重载防火墙配置"><a href="#重载防火墙配置" class="headerlink" title="重载防火墙配置"></a>重载防火墙配置</h3><p><code>firewall-cmd --reload</code></p>
<h3 id="添加端口"><a href="#添加端口" class="headerlink" title="添加端口"></a>添加端口</h3><p><code>firewall-cmd --zone=public --add-port=21/tcp --permanent</code></p>
<h3 id="添加vsftpd服务"><a href="#添加vsftpd服务" class="headerlink" title="添加vsftpd服务"></a>添加vsftpd服务</h3><p><code>firewall-cmd --permanent --add-service=ftp</code></p>
<h2 id="SELinux配置"><a href="#SELinux配置" class="headerlink" title="SELinux配置"></a><strong>SELinux配置</strong></h2><h3 id="为什么要设置SELinux"><a href="#为什么要设置SELinux" class="headerlink" title="为什么要设置SELinux?"></a>为什么要设置SELinux?</h3><ul>
<li>  SELinux(Security-Enhanced Linux)是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统。NSA是在Linux社区的帮助下开发了一种访问控制体系，在这种访问控制体系的限制下，进程只能访问那些在他的任务中所需要文件。</li>
<li>  SELinux旨在提高Linux系统的安全性，提供强健的安全保证，可防御未知攻击。</li>
<li>  大部分情况下，我们访问ftp的时候会被SELinux拦截，当然如果你没也设置SELiunx也能正常访问，此步可以跳过。</li>
<li>  大家通常的作法是关闭SELiunx，这样做会引起其它安全问题，嫌麻烦的可以直接关闭：</li>
</ul>
<h3 id="通常直接关闭"><a href="#通常直接关闭" class="headerlink" title="通常直接关闭"></a>通常直接关闭</h3><p><code>vi /etc/selinux/config</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#SELINUX=enforcing #注释掉</span><br><span class="line"></span><br><span class="line">#SELINUXTYPE=targeted #注释掉</span><br><span class="line"></span><br><span class="line">SELINUX=disabled #增加</span><br><span class="line"></span><br><span class="line">:wq! #保存退出</span><br></pre></td></tr></table></figure>

<h3 id="配置-SELinux（只做参考可以直接关闭）"><a href="#配置-SELinux（只做参考可以直接关闭）" class="headerlink" title="配置 SELinux（只做参考可以直接关闭）"></a>配置 SELinux（只做参考可以直接关闭）</h3><p>setenforce 0 #让SELinux进入Permissive模式（宽容模式）<br>SELiunx一共有三种模式： </p>
<ul>
<li>enforcing（强制模式 ）：开始限制domain/type </li>
<li>permissive（宽容模式） ：仅会有警告信息 </li>
<li>disabled（关闭）：关闭SELinux</li>
</ul>
<p>设置SELiunx：</p>
<blockquote>
<p>[root@localhost ~]# /usr/sbin/sestatus -v #查看SELinux状态 SELinux<br>status: enabled #启用 SELinuxfs mount:<br>/sys/fs/selinux SELinux root directory: /etc/selinux Loaded<br>policy name: targeted Current mode:<br>enforcing</p>
</blockquote>
<p><code>setenforce 0 #暂时让SELinux进入Permissive模式</code></p>
<p>这个时候我们尝试访问一下ftp目录，发现能够正常访问。<br>我们查看一下权限：</p>
<blockquote>
<p>[root@localhost ~]# getsebool -a | grep ftp<br>ftpd_anon_write –&gt; off<br>ftpd_connect_all_unreserved –&gt; off<br>ftpd_connect_db –&gt; off<br>ftpd_full_access –&gt; off<br>ftpd_use_cifs –&gt; off<br>ftpd_use_fusefs –&gt; off<br>ftpd_use_nfs –&gt; off<br>ftpd_use_passive_mode –&gt; off<br>httpd_can_connect_ftp –&gt; off<br>httpd_enable_ftp_server –&gt; off<br>tftp_anon_write –&gt; off<br>tftp_home_dir –&gt; off<br>ftp_home_dir和allow_ftpd_full_access必须为on 才能使vsftpd 具有访问ftp根目录，以及文件传输等权限。</p>
</blockquote>
<p><code>setsebool -P tftp_home_dir 1</code><br><code>setsebool -P allow_ftpd_full_access 1</code><br>让我们再回到强制模式：<br><code>setenforce 1 #进入Enforcing模式</code><br>如果还是不行的话，可能是我们的目录没有权限：<br><code>chmod -R 777 /usr/yong.cao/ftp #ftp的访问路径</code></p>
<h3 id="配置vsftpd"><a href="#配置vsftpd" class="headerlink" title="配置vsftpd"></a><strong>配置vsftpd</strong></h3><ul>
<li>  用<code>vim /etc/vsftpd/vsftpd.conf</code>打开后修改或者新增：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">anonymous_enable=NO    #不允许匿名访问</span><br><span class="line"></span><br><span class="line">write_enable=YES    #写权限</span><br><span class="line"></span><br><span class="line">local_root=/usr/yong.cao/ftp   #这里是我自定义的ftp目录</span><br><span class="line"></span><br><span class="line">chroot_local_user=YES    #这个是限制ftp用户只能在自己目录，如果ftp可以跳到其它任意目录是比较危险的，建议限制</span><br><span class="line"></span><br><span class="line">allow_writeable_chroot=YES   #2.3.5之后，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了，需新增此配置</span><br></pre></td></tr></table></figure>

<h3 id="激活root用户"><a href="#激活root用户" class="headerlink" title="激活root用户"></a><strong>激活root用户</strong></h3><p>处于安全考虑，root用户是不能作为ftp的登录账户的，如果在没有限制访问目录的情况下，root用户可以在ftp里访问任一文件，所以默认是不能登录ftp的。当然，你也可以为新建一些用户，专门作为ftp用户，个人习惯，用虚拟机的时候我一般直接用root用户登录ftp。</p>
<p>我们需要注释或者删除/etc/vsftpd/ftpusers和/etc/vsftpd/user_list中的root：</p>
<p><code>vi /etc/vsftpd/ftpusers</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Users that are not allowed to login via ftp</span><br><span class="line">#root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">news</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">nobody</span><br></pre></td></tr></table></figure>

<p><code>vi /etc/vsftpd/user_list</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vsftpd userlist</span><br><span class="line">#If userlist_deny=NO, only allow users in this file</span><br><span class="line">#If userlist_deny=YES (default), never allow users in this file, and</span><br><span class="line">#do not even prompt for a password.</span><br><span class="line">#Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers</span><br><span class="line">#for users that are denied.</span><br><span class="line">#root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">news</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">nobody</span><br></pre></td></tr></table></figure>

<h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p>CentOS7中是用这个命令：<br><code>systemctl restart vsftpd.service</code><br>如果是其它系统：<br><code>service restart vsftpd</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Centos7搭建SS方法.md</title>
    <url>/2018/07/24/Linux/Centos7%E6%90%AD%E5%BB%BASS%E6%96%B9%E6%B3%95.md-2019102314155706419/</url>
    <content><![CDATA[<p>title: Centos7搭建SS方法<br>date: ‘2018-07-24 10:43:33’<br>updated: ‘2018-07-24 11:05:53’<br>tags: [SS, 后端, Linux]<br>permalink: /articles/2018/07/24/1532400212591.html</p>
<hr>
<p>参考文章地址<br><a href="https://blog.csdn.net/u013309540/article/details/74330305">https://blog.csdn.net/u013309540/article/details/74330305</a><br><a href="https://blog.csdn.net/tmacsky/article/details/78795809">https://blog.csdn.net/tmacsky/article/details/78795809</a><br>SS：<a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a></p>
<h4 id="1-安装pip"><a href="#1-安装pip" class="headerlink" title="1.安装pip"></a>1.安装pip</h4><h5 id="1-1安装epel扩展源"><a href="#1-1安装epel扩展源" class="headerlink" title="1.1安装epel扩展源"></a>1.1安装epel扩展源</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure>

<h5 id="1-2安装python-pip"><a href="#1-2安装python-pip" class="headerlink" title="1.2安装python-pip"></a>1.2安装python-pip</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y install python-pip</span><br></pre></td></tr></table></figure>

<h5 id="1-3升级pip"><a href="#1-3升级pip" class="headerlink" title="1.3升级pip"></a>1.3升级pip</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>显示Complete！后表示安装成功，最好清除下cache。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum clean all</span><br></pre></td></tr></table></figure>

<h4 id="2-安装shdowsocks"><a href="#2-安装shdowsocks" class="headerlink" title="2.安装shdowsocks"></a>2.安装shdowsocks</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<p>安装过程中可能会提示pip版本低了，需要更新下pip。</p>
<h5 id="2-1配置服务端"><a href="#2-1配置服务端" class="headerlink" title="2.1配置服务端"></a>2.1配置服务端</h5><p>新建一个配置文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>

<p>然后输入如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;    &quot;server&quot;:&quot;server_ip&quot;,    &quot;server_port&quot;:25,    &quot;local_address&quot;: &quot;127.0.0.1&quot;,    &quot;local_port&quot;:1080,    &quot;password&quot;:&quot;password&quot;,    &quot;timeout&quot;:300,    &quot;method&quot;:&quot;aes-256-cfb&quot;,    &quot;fast_open&quot;: false &#125; </span><br></pre></td></tr></table></figure>

<p>多用户支持可以如下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, </span><br><span class="line">&quot;local_port&quot;:1080, </span><br><span class="line">&quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password8989&quot;, </span><br><span class="line">&quot;7979&quot;:&quot;password7979&quot;, </span><br><span class="line">&quot;6969&quot;:&quot;password6969&quot; &#125;, </span><br><span class="line">&quot;timeout&quot;:300, </span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;, </span><br><span class="line">&quot;fast_open&quot;: false &#125;</span><br></pre></td></tr></table></figure>

<p>主要需要设置server_ip、port和password三项，设置好后保存退出。</p>
<h5 id="2-2启动shadowsocks"><a href="#2-2启动shadowsocks" class="headerlink" title="2.2启动shadowsocks"></a>2.2启动shadowsocks</h5><p>最好将其设置成服务启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/shadowsocks.service</span><br></pre></td></tr></table></figure>

<p>然后输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]Description=Shadowsocks [Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json [Install]WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>启动服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable shadowsocks</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start shadowsocks</span><br></pre></td></tr></table></figure>

<p>查看服务是否启动成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status shadowsocks -l</span><br></pre></td></tr></table></figure>

<p>如需要停止服务使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop shadowsocks</span><br></pre></td></tr></table></figure>

<h5 id="2-3开启防火墙端口"><a href="#2-3开启防火墙端口" class="headerlink" title="2.3开启防火墙端口"></a>2.3开启防火墙端口</h5><p>如果没设置防火墙端口开启，可能不能访问到该端口服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=25/tcp --permanent</span><br></pre></td></tr></table></figure>

<h4 id="3-加速"><a href="#3-加速" class="headerlink" title="3.加速"></a>3.加速</h4><p>加速可以选择用锐速或者BBR，这里就不赘述了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Centos下Nginx源码安装</title>
    <url>/2021/02/24/Linux/Centos%E4%B8%8BNginx%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85-centos-xia-nginx-yuan-ma-an-zhuang/</url>
    <content><![CDATA[<h1 id="1-安装编译工具"><a href="#1-安装编译工具" class="headerlink" title="1.安装编译工具"></a>1.安装编译工具</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure>
<h1 id="2-安装PRCE"><a href="#2-安装PRCE" class="headerlink" title="2.安装PRCE"></a>2.安装PRCE</h1><p><strong>用于支持rewrite</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</span><br><span class="line">根据版本选择</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解压安装包</span><br><span class="line">tar zxvf pcre-8.35.tar.gz</span><br><span class="line">进入文件夹</span><br><span class="line">cd pcre-8.35</span><br><span class="line">编译</span><br><span class="line">./configure</span><br><span class="line">编译安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>查看版本是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcre-config --version</span><br></pre></td></tr></table></figure>
<h1 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3.安装nginx"></a>3.安装nginx</h1><ol>
<li>下载nginx<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://nginx.org/download/nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>解压安装包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zxvf nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>进入安装包目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd nginx-1.6.2</span><br></pre></td></tr></table></figure></li>
<li>编译安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置你需要安装的模块</span><br><span class="line">./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35</span><br><span class="line"></span><br><span class="line">编译和安装</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li>查看版本是否安装成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/webserver/nginx/sbin/nginx -v</span><br></pre></td></tr></table></figure></li>
<li>配置nginx</li>
<li>备份原来的配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/local/webserver/nginx/conf/nginx.conf </span><br><span class="line">/usr/local/webserver/nginx/conf/nginx.conf.bak</span><br></pre></td></tr></table></figure></li>
<li>替换自己写的配置文件<br>参考<a href="https://quinntian.com/?p=104">https://quinntian.com/?p=104</a></li>
<li>检查配置文件格式是否正确<br><code>/usr/local/webserver/nginx/sbin/nginx -t</code></li>
<li>启动ngxin<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/webserver/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>
<h1 id="4-常见命令"><a href="#4-常见命令" class="headerlink" title="4.常见命令"></a>4.常见命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 检查配置文件格式</span><br><span class="line">/usr/local/webserver/nginx/sbin/nginx -t</span><br><span class="line">/usr/local/webserver/nginx/sbin/nginx -s reload            # 重新载入配置文件</span><br><span class="line">/usr/local/webserver/nginx/sbin/nginx -s reopen            # 重启 Nginx</span><br><span class="line">/usr/local/webserver/nginx/sbin/nginx -s stop              # 停止 Nginx</span><br></pre></td></tr></table></figure>
<h1 id="5-将nginx配置成系统服务"><a href="#5-将nginx配置成系统服务" class="headerlink" title="5.将nginx配置成系统服务"></a>5.将nginx配置成系统服务</h1>参考<a href="https://quinntian.com/?p=103">https://quinntian.com/?p=103</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Centos配置Tomcat</title>
    <url>/2018/07/24/Linux/Centos%E9%85%8D%E7%BD%AETomcat-2019102314160074428/</url>
    <content><![CDATA[<p>title: Centos配置Tomcat<br>date: ‘2018-07-24 10:54:14’<br>updated: ‘2018-07-24 10:56:47’<br>tags: [Tomcat]<br>permalink: /articles/2018/07/24/1532400848708.html</p>
<hr>
<p>原博客文章备份：<a href="https://blog.csdn.net/leofitz/article/details/79884819">https://blog.csdn.net/leofitz/article/details/79884819</a></p>
<h4 id="1-配置jdk"><a href="#1-配置jdk" class="headerlink" title="1.配置jdk"></a>1.配置jdk</h4><p>详见配置jdk的<a href="https://blog.csdn.net/LeoFitz/article/details/79883844">博文</a></p>
<h4 id="2-下载并上传到自己的Centos中"><a href="#2-下载并上传到自己的Centos中" class="headerlink" title="2.下载并上传到自己的Centos中"></a>2.下载并上传到自己的Centos中</h4><p>下载<a href="https://download.csdn.net/download/leofitz/10339430">Tomcat7.0</a>或者去Tomcat官网自行下载<br>上传到自己的Centos服务器中</p>
<h4 id="3-安装Tomcat服务器"><a href="#3-安装Tomcat服务器" class="headerlink" title="3. 安装Tomcat服务器"></a>3. 安装Tomcat服务器</h4><h5 id="3-1-解压安装包"><a href="#3-1-解压安装包" class="headerlink" title="3.1 解压安装包"></a>3.1 解压安装包</h5><p><code>tar zxvf apache-tomcat-7.0.85.tar.gz</code><br><img src="https://img-blog.csdn.net/20180410173204208?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlb0ZpdHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br><img src="https://img-blog.csdn.net/20180410173535737?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlb0ZpdHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>
<h5 id="3-2-修改tomcat服务器的启动端口"><a href="#3-2-修改tomcat服务器的启动端口" class="headerlink" title="3.2 修改tomcat服务器的启动端口"></a>3.2 修改tomcat服务器的启动端口</h5><p><img src="https://img-blog.csdn.net/20180410173704266?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlb0ZpdHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br><code>vi server.xml</code><br><img src="https://img-blog.csdn.net/20180410173841555?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlb0ZpdHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>
<h4 id="4-服务器的启动与停止"><a href="#4-服务器的启动与停止" class="headerlink" title="4. 服务器的启动与停止"></a>4. 服务器的启动与停止</h4><p>进入服务器的bin目录下<br>启动 <code>./startup.sh</code><br>停止<code>./shutdown.sh</code><br>查看端口号是否被占用 <code>lsof -i:端口号</code><br><img src="https://img-blog.csdn.net/20180410174126372?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlb0ZpdHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下配置定时备份MYSQL数据库</title>
    <url>/2020/01/31/Linux/Linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BDMYSQL%E6%95%B0%E6%8D%AE%E5%BA%93-linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0. 写在前面"></a>0. 写在前面</h1><p><strong>数据无价 定时备份</strong></p>
<h1 id="1-创建备份数据库存放处"><a href="#1-创建备份数据库存放处" class="headerlink" title="1. 创建备份数据库存放处"></a>1. 创建备份数据库存放处</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mkdir -p /backup/data</span><br></pre></td></tr></table></figure>
<h1 id="2-编写脚本"><a href="#2-编写脚本" class="headerlink" title="2. 编写脚本"></a>2. 编写脚本</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">DATE=`date +%Y%m%d%H%M`                #备份日期时间</span><br><span class="line">DATABASE=                              #备份数据库名称</span><br><span class="line">DB_USERNAME=root                       #数据库账号</span><br><span class="line">DB_PASSWORD=&quot;&quot;       		       #数据库密码</span><br><span class="line">BACKUP_PATH=/backup/data               #备份数据，禁止放在网站目录下</span><br><span class="line"></span><br><span class="line">#备份命令</span><br><span class="line"></span><br><span class="line">/usr/bin/mysqldump-u $DB_USERNAME-p $DB_PASSWORD -h 127.0.0.1 -R --opt $DATABASE | gzip &gt; $&#123;BACKUP_PATH&#125;\/$&#123;DATABASE&#125;_$&#123;DATE&#125;.sql.gz</span><br><span class="line"></span><br><span class="line">#删除7天前备份文件</span><br><span class="line">find $&#123;BACKUP_PATH&#125; -mtime +7 -name &quot;$&#123;DATABASE&#125;_*.sql.gz&quot; -exec rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h1 id="3-测试脚本"><a href="#3-测试脚本" class="headerlink" title="3. 测试脚本"></a>3. 测试脚本</h1><p>给脚本执行权限 #chmod +x mysql_backup.sh<br>sh 你的脚本</p>
<h1 id="4-配置定时任务"><a href="#4-配置定时任务" class="headerlink" title="4. 配置定时任务"></a>4. 配置定时任务</h1><p><code>crontab -e</code>设置定时要求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">5 * * * * /mysql_backup.sh #设置每天五点调用</span><br></pre></td></tr></table></figure>
<p><code>crontab -l</code>列出当前任务<br><code>service crontab reload</code>重新载入配置文件</p>
<h1 id="6-关于crontab命令"><a href="#6-关于crontab命令" class="headerlink" title="6. 关于crontab命令"></a>6. 关于crontab命令</h1><h2 id="6-1-格式"><a href="#6-1-格式" class="headerlink" title="6.1 格式"></a>6.1 格式</h2><p><code>crontab [ -u user ] &#123; -l | -r | -e &#125;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文							 	 </span><br><span class="line">字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv </span><br><span class="line">VISUAL joe)</span><br><span class="line">-r : 删除目前的时程表</span><br><span class="line">-l : 列出目前的时程表</span><br></pre></td></tr></table></figure>
<ul>
<li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li>
<li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li>
<li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li>
<li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li>
<li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure>
<h2 id="6-2-例子"><a href="#6-2-例子" class="headerlink" title="6.2 例子"></a>6.2 例子</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">每月每天每小时的第 0 分钟执行一次 /bin/ls</span><br><span class="line"></span><br><span class="line">0 * * * * /bin/ls</span><br><span class="line">在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</span><br><span class="line"></span><br><span class="line">0 6-12/3 * 12 * /usr/bin/backup</span><br><span class="line">周一到周五每天下午 5:00 寄一封信给 alex@domain.name</span><br><span class="line"></span><br><span class="line">0 17 * * 1-5 mail -s &quot;hi&quot; alex@domain.name &lt; /tmp/maildata</span><br><span class="line">每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分....执行 echo &quot;haha&quot;</span><br><span class="line"></span><br><span class="line">20 0-23/2 * * * echo &quot;haha&quot;</span><br><span class="line">下面再看看几个具体的例子：</span><br><span class="line"></span><br><span class="line">0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache </span><br><span class="line"></span><br><span class="line">50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 </span><br><span class="line"></span><br><span class="line">50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 </span><br><span class="line"></span><br><span class="line">0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 </span><br><span class="line"></span><br><span class="line">1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 </span><br><span class="line"></span><br><span class="line">00 03 * * 1-5 find /home &quot;*.xxx&quot; -mtime +4 -exec rm &#123;&#125; \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</span><br><span class="line"></span><br><span class="line">30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</span><br></pre></td></tr></table></figure>
<h2 id="6-3-其他"><a href="#6-3-其他" class="headerlink" title="6.3 其他"></a>6.3 其他</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/sbin/service crond start //启动服务</span><br><span class="line"></span><br><span class="line">/sbin/service crond stop //关闭服务</span><br><span class="line"></span><br><span class="line">/sbin/service crond restart //重启服务</span><br><span class="line"></span><br><span class="line">/sbin/service crond reload //重新载入配置</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux复制、移动、删除命令.md</title>
    <url>/2018/07/21/Linux/linux%E5%A4%8D%E5%88%B6%E3%80%81%E7%A7%BB%E5%8A%A8%E3%80%81%E5%88%A0%E9%99%A4%E5%91%BD%E4%BB%A4.md-2019102314160849463/</url>
    <content><![CDATA[<p>title: linux复制、移动、删除命令<br>date: ‘2018-07-21 11:51:42’<br>updated: ‘2018-07-21 12:05:43’<br>tags: [Linux]<br>permalink: /articles/2018/07/21/1532145081228.html</p>
<hr>
<p><strong>linux下文件的复制、移动与删除命令为：cp，mv，rm</strong></p>
<h1 id="一、文件复制命令cp"><a href="#一、文件复制命令cp" class="headerlink" title="一、文件复制命令cp"></a>一、文件复制命令cp</h1><p>命令格式：cp [-adfilprsu] 源文件(source) 目标文件(destination)<br>cp [option] source1 source2 source3 … directory<br>参数说明：<br>-a:是指archive的意思，也说是指复制所有的目录<br>-d:若源文件为连接文件(link file)，则复制连接文件属性而非文件本身<br>-f:强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制<br>-i:若目标文件(destination)已存在，在覆盖时会先询问是否真的操作<br>-l:建立硬连接(hard link)的连接文件，而非复制文件本身<br>-p:与文件的属性一起复制，而非使用默认属性<br>-r:递归复制，用于目录的复制操作<br>-s:复制成符号连接文件(symbolic link)，即“快捷方式”文件<br>-u:若目标文件比源文件旧，更新目标文件 </p>
<p>如将/test1目录下的file1复制到/test3目录，并将文件名改为file2,可输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /test1/file1 /test3/file2</span><br></pre></td></tr></table></figure>



<h1 id="二、文件移动命令mv"><a href="#二、文件移动命令mv" class="headerlink" title="二、文件移动命令mv"></a>二、文件移动命令mv</h1><p>命令格式：mv [-fiv] source destination<br>参数说明：<br>-f:force，强制直接移动而不询问<br>-i:若目标文件(destination)已经存在，就会询问是否覆盖<br>-u:若目标文件已经存在，且源文件比较新，才会更新</p>
<p>如将/test1目录下的file1复制到/test3 目录，并将文件名改为file2,可输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /test1/file1 /test3/file2</span><br></pre></td></tr></table></figure>



<h1 id="三、文件删除命令rm"><a href="#三、文件删除命令rm" class="headerlink" title="三、文件删除命令rm"></a>三、文件删除命令rm</h1><p>命令格式：rm [fir] 文件或目录<br>参数说明：<br>-f:强制删除<br>-i:交互模式，在删除前询问用户是否操作<br>-r:递归删除，常用在目录的删除</p>
<p>如删除/test目录下的file1文件，可以输入以下命令：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rm</span> -i /<span class="keyword">test</span>/file1</span><br></pre></td></tr></table></figure>




<p>复制：<br>CP命令<br>格式: CP [选项]  源文件或目录   目的文件或目录<br>选项说明:-b 同名,备分原来的文件<br>        -f 强制覆盖同名文件<br>        -r  按递归方式保留原目录结构复制文件</p>
<p>cp -Rf /home/user1/* /root/temp/<br>将 /home/user1目录下的所有东西拷到/root/temp/下而不拷贝user1目录本身。<br>即格式为：cp -rf 原路径/ 目的路径/</p>
<p>移动：<br>mv ./WorkReport/web.xml ./WorkReport/WEB-INF/<br>注：移动/WorkReport/web.xml文件到/WorkReport/WEB-INF/</p>
<p>mv /data/new /data/old/<br>注：移动/data/new 到/data/old/文件夹下<br>注意点：移动文件夹的话就不要再加 / 了</p>
<p>如果是移动文件夹下的所有文件的话就可以文件夹后面跟上 /* </p>
<p>mv /data/new/* /data/old/</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux文件权限相关命令</title>
    <url>/2021/03/01/Linux/linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4-linux-wen-jian-quan-xian-xiang-guan-ming-ling/</url>
    <content><![CDATA[<h1 id="权限的基本概念"><a href="#权限的基本概念" class="headerlink" title="权限的基本概念"></a>权限的基本概念</h1><p>一个文件/目录如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类型标识 rwx rwx rwx</span><br></pre></td></tr></table></figure>
<ul>
<li>第一组文件拥有者权限</li>
<li>第二组文件拥有者所属组权限</li>
<li>第三组其他用户的权限</li>
<li><code>r</code>权限：<ul>
<li>文件：可以看、可以复制</li>
<li>目录：可以看目录有多少文件、不能看具体某个文件里面内容</li>
</ul>
</li>
<li><code>w</code>权限：<ul>
<li>文件：可以修改、不可以删除</li>
<li>目录：可以创建、删除、重命名目录里面的文件</li>
</ul>
</li>
<li><code>x</code>表示可执行权限<ul>
<li>文件：程序需要可执行不需要可读，脚本需要可执行和可读权限</li>
<li>目录：可以进入目录并且访问目录中文件</li>
</ul>
</li>
<li>与访问权限有关的用户<ul>
<li>文件拥有者 如上第一组</li>
<li>同组用户 如上第二组</li>
<li>其他用户 如上第三组</li>
</ul>
</li>
<li>权限表示法<ul>
<li>字母表示法<br>  <code>ugoa</code> <code>+-=</code> <code>rwx</code><ul>
<li>u 文件拥有者</li>
<li>g 同组用户</li>
<li>o other其他用户</li>
<li>a all所有用户</li>
<li>+增加权限</li>
<li>-减少权限</li>
<li>=指定权限</li>
</ul>
</li>
<li>数字表示法<br>3位二进制代码1表示有0表示无，转换成十进制就是0-7个数字<br>7种<ul>
<li>— 000  </li>
<li>–x 001 1 可执行</li>
<li>-w- 010 2 可写</li>
<li>-wx 011 3 可写可读</li>
<li>r– 100 4 可读</li>
<li>r-x 101 5 可读可执行</li>
<li>rw- 110 6 可读可写</li>
<li>rwx 111 7 可读可写可执行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="结合命令修改权限"><a href="#结合命令修改权限" class="headerlink" title="结合命令修改权限"></a>结合命令修改权限</h1><h2 id="1-chmod修改目录或文件权限"><a href="#1-chmod修改目录或文件权限" class="headerlink" title="1. chmod修改目录或文件权限"></a>1. chmod修改目录或文件权限</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行前</span><br><span class="line">drwxwxr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">18</span>:<span class="number">12</span> test1</span><br><span class="line">chmod g+r /test1</span><br><span class="line">运行结果</span><br><span class="line">drwxrwxr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">18</span>:<span class="number">12</span> test1</span><br><span class="line">	</span><br><span class="line">chmod -v <span class="number">777</span> test1</span><br><span class="line">mode of <span class="string">&quot;test1&quot;</span> changed <span class="keyword">from</span> 0775 (rwxrwxr-x) to 0777 (rwxrwxrwx)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-v</code>表示显示详细变更信息</li>
<li><code>-R</code>表示目录下所有文件都变更权限</li>
</ul>
<h2 id="2-umask设置新建文件或目录的权限"><a href="#2-umask设置新建文件或目录的权限" class="headerlink" title="2.umask设置新建文件或目录的权限"></a>2.umask设置新建文件或目录的权限</h2><p><code>umask</code>对于目录的最大权限是777<code>rwxrwxrwx</code>，对于文件最大权限是666<code>rw-rw-rw-</code><br>指定一个权限比如你要指定033，那么实际设置的权限是<code>744</code>和<code>644</code>，前者目录，后者文件，实际原理是<code>异或</code>运算 033的二进制与777的二进制<code>异或</code>，644与666的二进制<code>异或</code><br>case</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">umask</span><br><span class="line">0022</span><br><span class="line">mkdir test2</span><br><span class="line">ls -l</span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1567</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">16</span>:<span class="number">16</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">1615</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">16</span>:<span class="number">18</span> initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">22</span>:<span class="number">21</span> test2</span><br></pre></td></tr></table></figure>
<ul>
<li>也就是说明默认的权限被设置成<code>022</code>，那么设置的目录默认就是<code>777异或022=755</code>，也就是<code>rwxr-xr-x</code> <code>=111101101</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">touch file1</span><br><span class="line">ls -l</span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1567</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">16</span>:<span class="number">16</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root    <span class="number">0</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">22</span>:<span class="number">27</span> file1</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">1615</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">16</span>:<span class="number">18</span> initial-setup-ks.cfg</span><br><span class="line">drwxrwxrwx. <span class="number">2</span> root root    <span class="number">6</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">18</span>:<span class="number">12</span> test1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>那么新建文件的默认权限就是<code>666异或022=644</code>即<code>rw-r--r--</code><blockquote>
<p>比较位相同0，不同1-&gt;异或eor^<br>异或在线运算器：<a href="https://www.jisuan.mobi/pmbbmb3bzzuHuJUi.html">https://www.jisuan.mobi/pmbbmb3bzzuHuJUi.html</a></p>
</blockquote>
</li>
<li><code>umask</code><strong>重启后失效</strong><h2 id="3-chown修改文件或目录拥有者"><a href="#3-chown修改文件或目录拥有者" class="headerlink" title="3.chown修改文件或目录拥有者"></a>3.chown修改文件或目录拥有者</h2><code>chown  用户名 文件或目录</code><br>case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls -l</span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1567</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">16</span>:<span class="number">16</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root    <span class="number">0</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">22</span>:<span class="number">27</span> file1</span><br><span class="line"></span><br><span class="line">chown tom file1 </span><br><span class="line">ls -l</span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1567</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">16</span>:<span class="number">16</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> tom  root    <span class="number">0</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">22</span>:<span class="number">27</span> file1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<code>chown 用户:用户组 文件或目录</code><br>case2<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chown tom:tom   file1 </span><br><span class="line">ls -l</span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1567</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">16</span>:<span class="number">16</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> tom  tom     <span class="number">0</span> <span class="number">3</span>月   <span class="number">1</span> <span class="number">22</span>:<span class="number">27</span> file1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>4.chgrp改变文件或目录的组<br><code>chgrp 新组 文件名或目录</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>在CentOS8上安装Nginx+Nextcloud21</title>
    <url>/2021/03/12/Linux/%E5%9C%A8CentOS8%E4%B8%8A%E5%AE%89%E8%A3%85Nginx+Nextcloud21-zai-centos8-shang-an-zhuang-nginxnextcloud21/</url>
    <content><![CDATA[<h1 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1.安装Nginx"></a>1.安装Nginx</h1><p>如果是CentOS8以下替换成<code>yum</code>安装，<code>dnf</code>是新一代包管理工具。<br><code>sudo dnf install nginx</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">systemctl start nginx</span><br><span class="line"># 设置开机自启</span><br><span class="line">systemctl enable nginx</span><br><span class="line"># 查看状态</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>
<p>添加https和http端口到防火墙，如果你开启了防火墙，否则忽略这一步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=http --permanent</span><br><span class="line">firewall-cmd --add-service=https --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h1 id="2-安装PHP-FPM"><a href="#2-安装PHP-FPM" class="headerlink" title="2.安装PHP FPM"></a>2.安装PHP FPM</h1><p>安装一些必要的工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install -y epel-release yum-utils unzip curl wget \</span><br><span class="line">bash-completion policycoreutils-python-utils mlocate bzip2</span><br></pre></td></tr></table></figure>
<p>安装REMI仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>安装yum-utils package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install yum-utils</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf module reset php</span><br><span class="line">dnf module install php:remi-7.4</span><br></pre></td></tr></table></figure>
<p>安装PHP所需模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install -y php php-gd php-mbstring php-intl php-pecl-apcu\</span><br><span class="line">     php-mysqlnd php-opcache php-json php-zip</span><br><span class="line"></span><br><span class="line">dnf install -y php-redis php-imagick</span><br></pre></td></tr></table></figure>

<h1 id="3-配置PHP-FPM"><a href="#3-配置PHP-FPM" class="headerlink" title="3.配置PHP-FPM"></a>3.配置PHP-FPM</h1><p><code>vim /etc/php.ini</code>增加或取消如下注释并保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory_limit = 512M</span><br><span class="line">date.timezone = Asia/Shanghai</span><br><span class="line">cgi.fixpathinfo = 0</span><br></pre></td></tr></table></figure>
<p>配置PHP opcache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/php.d/10-opcache.ini</span><br></pre></td></tr></table></figure>
<p>配置PHP-FPM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure>
<p>确保如下内容，取消注释或者修改，保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen = /run/php-fpm/www.sock</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">user.ower = nginx</span><br><span class="line">group.ower = nginx</span><br><span class="line">listen.mode = 0660</span><br><span class="line">env[HOSTNAME] = $HOSTNAME</span><br><span class="line">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line">env[TMP] = /tmp</span><br><span class="line">env[TMPDIR] = /tmp</span><br><span class="line">env[TEMP] = /tmp</span><br><span class="line">php_value[opcache.file_cache] = /var/lib/php/opcache</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建如下文件夹并授予权限，如提示已存在，直接授予权限即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/lib/php/&#123;session,opcache&#125;</span><br><span class="line">chown -R nginx:nginx /var/lib/php/&#123;session,opcache&#125;</span><br></pre></td></tr></table></figure>
<p>设置开机自启和重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable php-fpm</span><br><span class="line">systemctl start php-fpm</span><br></pre></td></tr></table></figure>
<p>查看服务状态，正常如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -pl | grep php</span><br><span class="line">systemctl status php-fpm</span><br></pre></td></tr></table></figure>
<p>正常显示如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     18586    673/php-fpm: master  /run/php-fpm/www.sock</span><br><span class="line"></span><br><span class="line"> Active: active (running) since Fri 2021-03-12 03:16:42 HKT; 10h ago</span><br><span class="line"> Main PID: 673 (php-fpm)</span><br><span class="line">   Status: &quot;Processes active: 0, idle: 13, Requests: 335, slow: 0, Traffic: 0req/sec&quot;</span><br><span class="line">    Tasks: 24 (limit: 11493)</span><br><span class="line">   Memory: 670.3M</span><br><span class="line">   CGroup: /system.slice/php-fpm.service</span><br><span class="line">           ├─ 673 php-fpm: master process (/etc/php-fpm.conf)</span><br><span class="line">           ├─ 709 php-fpm: pool www</span><br><span class="line">           ├─ 710 php-fpm: pool www</span><br><span class="line">           ├─ 711 php-fpm: pool www</span><br><span class="line">           ├─ 712 php-fpm: pool www</span><br><span class="line">           ├─ 713 php-fpm: pool www</span><br><span class="line">           ├─1168 php-fpm: pool www</span><br><span class="line">           ├─1174 php-fpm: pool www</span><br><span class="line">           ├─1179 php-fpm: pool www</span><br><span class="line">           ├─1183 php-fpm: pool www</span><br><span class="line">           ├─1199 bash -c ( /var/www/nextcloud/apps/richdocumentscode/collabora/Collabora_Online.AppImage || /var/www/nextcloud&gt;</span><br><span class="line">           ├─1214 /var/www/nextcloud/apps/richdocumentscode/collabora/Collabora_Online.AppImage --appimage-extract-and-run</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="3-安装数据库"><a href="#3-安装数据库" class="headerlink" title="3.安装数据库"></a>3.安装数据库</h1><p>如果本来已经安装Mysql也可，建议安装8.0，新版已经不支持8.0以下的MySQL<br><code>sudo dnf install mariadb mariadb-server </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb</span><br><span class="line">systemctl enable mariadb</span><br></pre></td></tr></table></figure>
<p>按照提示设置密码等选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>登录<br><code>mysql -u root -p yourpassword</code><br>执行如下命令创建数据库并新建专属用户授予其权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database nextcloud_db;</span><br><span class="line">create user nextclouduser@localhost identified by &#x27;nextcloudpassdb&#x27;;</span><br><span class="line">grant all privileges on nextcloud_db.* to nextclouduser@localhost identified by &#x27;nextcloudpassdb&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h1 id="4-生成SSL证书"><a href="#4-生成SSL证书" class="headerlink" title="4.生成SSL证书"></a>4.生成SSL证书</h1><p>这一步，推荐直接去腾讯云等申请SSL证书<br>当然也可以如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dnf install certbot</span><br></pre></td></tr></table></figure>
<p>下面确保换成你的域名和邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certbot certonly --webroot --webroot-path /usr/share/nginx/html --agree-tos -m myemail@gmail.com -d cloud.hakase-labs.io</span><br></pre></td></tr></table></figure>
<p>保存在了<code>/etc/letsencrypt/live/cloud.hakase-labs.io/</code><br>用下面命令检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lah /etc/letsencrypt/live/cloud.hakase-labs.io/</span><br></pre></td></tr></table></figure>
<h1 id="5-安装Nextcloud"><a href="#5-安装Nextcloud" class="headerlink" title="5.安装Nextcloud"></a>5.安装Nextcloud</h1><p>安装解压工具<code>sudo dnf install unzip</code><br>切换目录并下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/www/</span><br><span class="line"># 最新版下载链接https://nextcloud.com/install/  -&gt;server</span><br><span class="line">wget https://download.nextcloud.com/server/releases/nextcloud-21.0.0.zip</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uzip nextcloud-21.0.0.zip</span><br></pre></td></tr></table></figure>
<p>创建数据目录并更改权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/www/nextcloud/data/</span><br><span class="line">sudo chown -R nginx:nginx /var/www/nextcloud</span><br></pre></td></tr></table></figure>
<h1 id="6-配置Nginx"><a href="#6-配置Nginx" class="headerlink" title="6.配置Nginx"></a>6.配置Nginx</h1><p>在nginx.conf添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">upstream php-handler &#123;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">    server unix:/run/php-fpm/www.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    # 替换成你的</span><br><span class="line">    server_name cloud.example.com;</span><br><span class="line"></span><br><span class="line">    # Enforce HTTPS</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443      ssl http2;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    # 替换成你的</span><br><span class="line">    server_name cloud.example.com;</span><br><span class="line"></span><br><span class="line">    # Use Mozilla&#x27;s guidelines for SSL/TLS settings</span><br><span class="line">    # https://mozilla.github.io/server-side-tls/ssl-config-generator/</span><br><span class="line">    # 下面给两个证书地址替换成你的</span><br><span class="line">    ssl_certificate      /ssl/;</span><br><span class="line">    ssl_certificate_key  /ssl/;</span><br><span class="line"></span><br><span class="line">    # HSTS settings</span><br><span class="line">    # WARNING: Only add the preload option once you read about</span><br><span class="line">    # the consequences in https://hstspreload.org/. This option</span><br><span class="line">    # will add the domain to a hardcoded list that is shipped</span><br><span class="line">    # in all major browsers and getting removed from this list</span><br><span class="line">    # could take several months.</span><br><span class="line">    #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot; always;</span><br><span class="line"></span><br><span class="line">    # set max upload size</span><br><span class="line">    client_max_body_size 512M;</span><br><span class="line">    fastcgi_buffers 64 4K;</span><br><span class="line"></span><br><span class="line">    # Enable gzip but do not remove ETag headers</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_comp_level 4;</span><br><span class="line">    gzip_min_length 256;</span><br><span class="line">    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;</span><br><span class="line">    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"></span><br><span class="line">    # Pagespeed is not supported by Nextcloud, so if your server is built</span><br><span class="line">    # with the `ngx_pagespeed` module, uncomment this line to disable it.</span><br><span class="line">    #pagespeed off;</span><br><span class="line"></span><br><span class="line">    # HTTP response headers borrowed from Nextcloud `.htaccess`</span><br><span class="line">    add_header Referrer-Policy                      &quot;no-referrer&quot;   always;</span><br><span class="line">    add_header X-Content-Type-Options               &quot;nosniff&quot;       always;</span><br><span class="line">    add_header X-Download-Options                   &quot;noopen&quot;        always;</span><br><span class="line">    add_header X-Frame-Options                      &quot;SAMEORIGIN&quot;    always;</span><br><span class="line">    add_header X-Permitted-Cross-Domain-Policies    &quot;none&quot;          always;</span><br><span class="line">    add_header X-Robots-Tag                         &quot;none&quot;          always;</span><br><span class="line">    add_header X-XSS-Protection                     &quot;1; mode=block&quot; always;</span><br><span class="line"></span><br><span class="line">    # Remove X-Powered-By, which is an information leak</span><br><span class="line">    fastcgi_hide_header X-Powered-By;</span><br><span class="line"></span><br><span class="line">    # Path to the root of your installation</span><br><span class="line">    root /var/www/nextcloud;</span><br><span class="line"></span><br><span class="line">    # Specify how to handle directories -- specifying `/index.php$request_uri`</span><br><span class="line">    # here as the fallback means that Nginx always exhibits the desired behaviour</span><br><span class="line">    # when a client requests a path that corresponds to a directory that exists</span><br><span class="line">    # on the server. In particular, if that directory contains an index.php file,</span><br><span class="line">    # that file is correctly served; if it doesn&#x27;t, then the request is passed to</span><br><span class="line">    # the front-end controller. This consistent behaviour means that we don&#x27;t need</span><br><span class="line">    # to specify custom rules for certain paths (e.g. images and other assets,</span><br><span class="line">    # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus</span><br><span class="line">    # `try_files $uri $uri/ /index.php$request_uri`</span><br><span class="line">    # always provides the desired behaviour.</span><br><span class="line">    index index.php index.html /index.php$request_uri;</span><br><span class="line"></span><br><span class="line">    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients</span><br><span class="line">    location = / &#123;</span><br><span class="line">        if ( $http_user_agent ~ ^DavClnt ) &#123;</span><br><span class="line">            return 302 /remote.php/webdav/$is_args$args;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Make a regex exception for `/.well-known` so that clients can still</span><br><span class="line">    # access it despite the existence of the regex rule</span><br><span class="line">    # `location ~ /(\.|autotest|...)` which would otherwise handle requests</span><br><span class="line">    # for `/.well-known`.</span><br><span class="line">    location ^~ /.well-known &#123;</span><br><span class="line">        # The following 6 rules are borrowed from `.htaccess`</span><br><span class="line"></span><br><span class="line">        location = /.well-known/carddav     &#123; return 301 /remote.php/dav/; &#125;</span><br><span class="line">        location = /.well-known/caldav      &#123; return 301 /remote.php/dav/; &#125;</span><br><span class="line">        # Anything else is dynamically handled by Nextcloud</span><br><span class="line">        location ^~ /.well-known            &#123; return 301 /index.php$uri; &#125;</span><br><span class="line"></span><br><span class="line">        try_files $uri $uri/ =404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Rules borrowed from `.htaccess` to hide certain paths from clients</span><br><span class="line">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  &#123; return 404; &#125;</span><br><span class="line">    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)              &#123; return 404; &#125;</span><br><span class="line"></span><br><span class="line">    # Ensure this block, which passes PHP files to the PHP process, is above the blocks</span><br><span class="line">    # which handle static assets (as seen below). If this block is not declared first,</span><br><span class="line">    # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`</span><br><span class="line">    # to the URI, resulting in a HTTP 500 error response.</span><br><span class="line">    location ~ \.php(?:$|/) &#123;</span><br><span class="line">        fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">        set $path_info $fastcgi_path_info;</span><br><span class="line"></span><br><span class="line">        try_files $fastcgi_script_name =404;</span><br><span class="line"></span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param PATH_INFO $path_info;</span><br><span class="line">        fastcgi_param HTTPS on;</span><br><span class="line"></span><br><span class="line">        fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice</span><br><span class="line">        fastcgi_param front_controller_active true;     # Enable pretty urls</span><br><span class="line">        fastcgi_pass php-handler;</span><br><span class="line"></span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_request_buffering off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.(?:css|js|svg|gif)$ &#123;</span><br><span class="line">        try_files $uri /index.php$request_uri;</span><br><span class="line">        expires 6M;         # Cache-Control policy borrowed from `.htaccess`</span><br><span class="line">        access_log off;     # Optional: Don&#x27;t log access to assets</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.woff2?$ &#123;</span><br><span class="line">        try_files $uri /index.php$request_uri;</span><br><span class="line">        expires 7d;         # Cache-Control policy borrowed from `.htaccess`</span><br><span class="line">        access_log off;     # Optional: Don&#x27;t log access to assets</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试配置文件并保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<h1 id="7-配置SELinx"><a href="#7-配置SELinx" class="headerlink" title="7.配置SELinx"></a>7.配置SELinx</h1><p>仅仅在启动的情况下，否则忽略这一步<br>安装管理工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dnf install policycoreutils-python-utils</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/var/www/nextcloud/data(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/var/www/nextcloud/config(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/var/www/nextcloud/apps(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/var/www/nextcloud/assets(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/var/www/nextcloud/.htaccess&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/var/www/nextcloud/.user.ini&#x27;</span><br><span class="line"> </span><br><span class="line">restorecon -Rv &#x27;/var/www/nextcloud/&#x27;</span><br></pre></td></tr></table></figure>
<h1 id="8-进入Nextcloud网页端安装"><a href="#8-进入Nextcloud网页端安装" class="headerlink" title="8.进入Nextcloud网页端安装"></a>8.进入Nextcloud网页端安装</h1><p>此处按界面提示操作即可</p>
<h1 id="9-故障排除"><a href="#9-故障排除" class="headerlink" title="9.故障排除"></a>9.故障排除</h1><p>一般出现最多的是由于权限问题导致禁止访问，首先保证上面步骤中的授予某些目录权限是否执行。其次查看 nginx的<code>error.log</code>确定原因。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一个Linux命令008之chmod、chown</title>
    <url>/2020/02/19/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4008%E4%B9%8Bchmod%E3%80%81chown-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%E4%B9%8Bchmodchown/</url>
    <content><![CDATA[<h2 id="2-9-chmod"><a href="#2-9-chmod" class="headerlink" title="2.9 chmod"></a>2.9 chmod</h2><p>访问权限：只读、只写和可执行。</p>
<ul>
<li>可读：就是只让你读，其他的不能做。</li>
<li>可执行：就是将该文件作为一种程序可读。</li>
<li>可写：就是能往里面写东西。</li>
</ul>
<p>三种类型的用户：文件所有者、同组用户和其他用户。</p>
<ul>
<li>文件所有者就是最初创建的时候的用户，可以赋予同组用户和或其他用户权限。</li>
</ul>
<p>文件或目录所拥有的的权限有三组</p>
<ul>
<li>文件的读、写和执行权限。</li>
<li>同组用户的三个权限。</li>
<li>其他用户的三个权限。</li>
</ul>
<p>一个文件的权限查看，用<code>ls l</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">是什么类型rwxrwxrwx  </span><br></pre></td></tr></table></figure>

<ul>
<li>首位什么类型，比如-代表目录，d代表文件。</li>
<li>后面就是三种用户的权限，没有就是-。</li>
</ul>
<p>chmod</p>
<ul>
<li><p>用途：就是更改目录或者文件的权限。</p>
</li>
<li><p>用法：一种就是用数字法，一种是用字母法。前者比较快，用一堆数字指定，但是好记忆。后者稍微好点。</p>
<ul>
<li><p>字母法</p>
<ul>
<li><p><code>chmod  u/g/o/a+/-/=x/w/x</code> 表示给用户或同组或其他或全部用户增加或减少或赋予某个权限（增加或减减少的思考就是你本来有这个权限当然还可以增加，因为增加后还是保持不变），赋予权限j就是指给予某个权限，但是其它权限取消的意思，上面/是或的意思，不计入命令。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">chmod u+x,g+y filename</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>数字阀</p>
<ul>
<li><p>首先0表示无权限，1表示可执行权限，2表示可写权限，4表示可读权限。</p>
</li>
<li><p>有三种类型用户，用户u、同组g、其他用户o，每一类都有三种权限，所以他们直接相加就构成了每一种用户的权限数字，也就是三种用户对应三个8进制数字。关于数字法其实等于子母法的赋予号=，因为他是同时指定每一种用户的三种权限，而有的书却直接写等同+,个人认为不对。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">chmod 777 file//就代表设置全部权限，每个7的意思就是1+2+4，其中每一位代表一种类型用户。</span><br><span class="line">chmod 764 file//就代表赋予创建者具有全部权限，同组的没有执行权，其他用户只有可读权限。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-10-chown"><a href="#2-10-chown" class="headerlink" title="2.10 chown"></a>2.10 chown</h2><ul>
<li>用途：改变目录或者文件的所有人。所以一般用户没有这种权限，一般都是root用户才有。但是同组用户互相变更是允许的。</li>
<li>用法：<code>chown option owner filename</code></li>
<li>选项<ul>
<li>-c 更改后如果更改成功才显示。</li>
<li>-h 用于更改符号链接文件，就是说你改符号链接文件的所有者，不会改变所指向目标文件所有者。</li>
<li>-f  更改后如果无法更改，不会显示错误信息。</li>
<li>-v 显示所有者变更详情。</li>
<li>-R 递归变更目录下所有文件和子目录的所有者。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令001之useradd命令</title>
    <url>/2020/02/11/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4001%E4%B9%8Buseradd%E5%91%BD%E4%BB%A4-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%E4%B9%8Buseradd%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Linux用户管理</p>
<p>Linux用户分为三种</p>
<ul>
<li><p>root用户</p>
<p>系统唯一，具有最高权限，可以执行任何命令的用户。</p>
</li>
<li><p>虚拟用户</p>
<p>不能登录，自身拥有，后期可以自行添加。</p>
</li>
<li><p>普通用户</p>
<p>权限受限，都是用户自行添加的。</p>
</li>
</ul>
<h1 id="添加用户命令"><a href="#添加用户命令" class="headerlink" title="添加用户命令"></a>添加用户命令</h1><ul>
<li>命令：useradd = adduser</li>
<li>格式：<code>adduser [option] [username]</code><ul>
<li>在/etc/passwd文件增加一条记录。</li>
<li>/home/下增加一个用户目录。</li>
<li>/etc/skel/目录中的文件复制到用户目录中。这个目录是用来存放用户配置文件。</li>
</ul>
</li>
</ul>
<p>用户创建完后不能登陆必须使用password命令设置用户密码才能使用。</p>
<ul>
<li><p>[option]含义</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-g [inital_grp]</td>
<td>指定用户所属的组，不指定自动创建同名的组。☆</td>
</tr>
<tr>
<td>-G [grp]</td>
<td>用户添加附属组。</td>
</tr>
<tr>
<td>-D</td>
<td>用于现实或设置useradd命令使用的默认值。</td>
</tr>
<tr>
<td>-d [directory]</td>
<td>指定用户主目录，若目录不存在，则用-m选项来创建主目录。☆</td>
</tr>
<tr>
<td>-m</td>
<td>使用的目录如果不存在，自动建立☆</td>
</tr>
<tr>
<td>-u UID</td>
<td>指定用户用户号。</td>
</tr>
</tbody></table>
</li>
<li><p>使用<code>tail-l</code>查看用户/etc/passwd和/etc/shadow文件，前者用于查看新建目录用户信息，后者用于查看用户密码信息。</p>
<p><img src="https://raw.githubusercontent.com/QuinnTian/imgchr/master/imgs/20200211225302.png"></p>
<p><img src="https://raw.githubusercontent.com/QuinnTian/imgchr/master/imgs/20200211225659.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令002之usermod命令</title>
    <url>/2020/02/12/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4002%E4%B9%8Busermod%E5%91%BD%E4%BB%A4-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4002%E4%B9%8Busermod%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="usermod命令"><a href="#usermod命令" class="headerlink" title="usermod命令"></a>usermod命令</h1><ul>
<li><p>功能：修改用户账号各种属性</p>
</li>
<li><p>格式：usermod [option] [username]</p>
</li>
<li><p>选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>-d [directory]</td>
<td>修改用户登入时目录</td>
</tr>
<tr>
<td>-e [days]</td>
<td>修改账号有限期</td>
</tr>
<tr>
<td>-g [group]</td>
<td>修改用户所属组☆</td>
</tr>
<tr>
<td>-l [login name]</td>
<td>修改用户登录时的名称</td>
</tr>
<tr>
<td>-p [password]</td>
<td>修改用户密码☆</td>
</tr>
<tr>
<td>-s [shell]</td>
<td>修改用户登录的shell</td>
</tr>
</tbody></table>
<ul>
<li>注意点<ul>
<li><code>usermod -p</code> 修改用户密码是明码，在/etc/shadow显示明码，用<code>tail -l /etc/shadow</code>可查。</li>
<li>使用<code>usermod</code>命令修改用户名，不能修改当前登录用户，且必须有root权限。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令003之userdel和passwd</title>
    <url>/2020/02/13/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4003%E4%B9%8Buserdel%E5%92%8Cpasswd-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux%E5%91%BD%E4%BB%A4003%E4%B9%8Buserdel%E5%92%8Cpasswd/</url>
    <content><![CDATA[<h1 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h1><ul>
<li><p>含义：删除用户</p>
</li>
<li><p>格式 <code>userdel [option]</code></p>
</li>
<li><p>可选项 -r</p>
<ul>
<li>含义：同时删除用户以及home下的所有关于该用户的文件</li>
</ul>
</li>
</ul>
<h1 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h1><ul>
<li><p>含义：使用新建用户命令<code>useradd</code>时并没有指定密码，所以默认无法使用，必须指定密码。</p>
</li>
<li><p>格式：<code>passwd [option] [username]</code></p>
</li>
<li><p>可选项</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-l</td>
<td align="center">锁定用户口令，无法使用。</td>
</tr>
<tr>
<td align="center">-u</td>
<td align="center">口令解锁</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">关闭用户登录时输入密码的功能，即无需密码登录，权限ROOT下可以操作。</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">用户下次登录必须修改密码</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">指定用户密码的种类</td>
</tr>
</tbody></table>
</li>
<li><p>示例</p>
<p>新建用户后，这时用户并不能使用，必须设置密码</p>
<p><code>passwd wang</code></p>
<p><img src="https://raw.githubusercontent.com/QuinnTian/imgchr/master/imgs/20200213232036.png" alt="图片"></p>
<p>使用<code>tail -l /etc/shadow</code>查看wang用户的！！！已经取消。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令004之用户组命令groupadd、groupmod、groupdel</title>
    <url>/2020/02/14/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4004%E4%B9%8B%E7%94%A8%E6%88%B7%E7%BB%84%E5%91%BD%E4%BB%A4groupadd%E3%80%81groupmod%E3%80%81groupdel-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux%E5%91%BD%E4%BB%A4004%E4%B9%8B%E7%94%A8%E6%88%B7%E7%BB%84%E5%91%BD%E4%BB%A4groupaddgroupmodgroupdel/</url>
    <content><![CDATA[<p>用户组：用户组与用户多对多。在创建文件或目录时都会制定一个用户组。</p>
<h1 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h1><ul>
<li><p>用途：创建用户组</p>
</li>
<li><p><code>groupadd [option] [groupname]</code></p>
</li>
<li><p>选项</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-g GID</td>
<td align="center">指定GID</td>
</tr>
<tr>
<td align="center">-o GID</td>
<td align="center">指定不唯一的GID</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h1><ul>
<li><p>用途：修改用户组名或用户组号</p>
</li>
<li><p><code>groupmod [option] [groupname]</code></p>
</li>
<li><p>选项</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-g GID</td>
<td align="center">指定新的GID</td>
</tr>
<tr>
<td align="center">-o GID</td>
<td align="center">重复使用GID</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">用户组改名</td>
</tr>
</tbody></table>
</li>
</ul>
<p>groupdel</p>
<ul>
<li><p>用途：删除用户组</p>
<ul>
<li>注意点：用户组内必须无用户，否则先执行删除用户操作。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令005之ls</title>
    <url>/2020/02/15/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4005%E4%B9%8Bls-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux%E5%91%BD%E4%BB%A4005%E4%B9%8Bls/</url>
    <content><![CDATA[<blockquote>
<p>相对路径：用户工作目录开始算。<br>绝对路径：根目录开始算。<br>.. 父目录 .当前目录</p>
</blockquote>
<ul>
<li><p>用途：列出目录或文件</p>
</li>
<li><p>格式：list [option] file or directory</p>
</li>
<li><p>option</p>
<table>
<thead>
<tr>
<th align="center">option</th>
<th align="center">mean</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>-a</strong></td>
<td align="center">显示指定目录下的子目录、文件、隐藏文件。</td>
<td><img src="https://quinntian.com/upload/2020/2/image-ff90a923f28d4d05b585fb29b804067e.png" alt="image.png"></td>
</tr>
<tr>
<td align="center"><strong>-A</strong></td>
<td align="center">显示指定目录下的子目录、文件、隐藏文件，不含. 和 ..</td>
<td><img src="https://quinntian.com/upload/2020/2/image-efc82be6a7e242a4afe4b9c8cd2d28b8.png" alt="image.png"></td>
</tr>
<tr>
<td align="center">-b</td>
<td align="center">对文件名中不可以显示的字符用八进制字符显示。</td>
<td></td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">按文件修改时间排序。</td>
<td><img src="https://quinntian.com/upload/2020/2/image-527a8a16ae314daea01b0c74d06b44af.png" alt="image.png"></td>
</tr>
<tr>
<td align="center">-C</td>
<td align="center">分成多列显示。</td>
<td><img src="https://quinntian.com/upload/2020/2/image-17aeee23e08344c4a309447ca0d9e7b5.png" alt="image.png"></td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">参数是目录，直接显示目录名，与-l 同用，用于显示该目录详细信息。</td>
<td><img src="https://quinntian.com/upload/2020/2/image-50a52af3bedc495d9c2f061f954f9ac1.png" alt="image.png"></td>
</tr>
<tr>
<td align="center"><strong>-l</strong></td>
<td align="center">长格式显示文件信息。<br />文件类型与权限、文件链接数、文件所属用户、文件所属组、文件大小、文件最近修改时间。</td>
<td><img src="https://quinntian.com/upload/2020/2/image-d394edee30f74df9b92f9fca3cb5b87c.png" alt="image.png"></td>
</tr>
<tr>
<td align="center">-L</td>
<td align="center">指定文件若为链接文件，则查出实际文件。</td>
<td></td>
</tr>
<tr>
<td align="center">-m</td>
<td align="center">跨页显示，中间用逗号隔开。</td>
<td><img src="https://quinntian.com/upload/2020/2/image-5ca3b1099ebc4787b45f45db8764ac84.png" alt="image.png"></td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">同-l，所属用户和组用ID来显示</td>
<td><img src="https://quinntian.com/upload/2020/2/image-171d42129ba642bc8883106834249af2.png" alt="image.png">-</td>
</tr>
<tr>
<td align="center">-o</td>
<td align="center">同-l，不显示所属用户</td>
<td></td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">在目录后面/</td>
<td></td>
</tr>
<tr>
<td align="center">-q</td>
<td align="center">把文件名中补课现实部分用？代替</td>
<td></td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">按字母排序或最早优先顺序显示</td>
<td></td>
</tr>
<tr>
<td align="center">-R</td>
<td align="center">递归显示指定目录下各个子目录的文件</td>
<td></td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">给出每个目录项，所占块数</td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">-u</td>
<td align="center">按照文件上次读取时间排序</td>
<td></td>
</tr>
<tr>
<td align="center">-x</td>
<td align="center">按行显示出各排序项信息</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令006之cp与mv</title>
    <url>/2020/02/16/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4006%E4%B9%8Bcp%E4%B8%8Emv-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux%E5%91%BD%E4%BB%A4006%E4%B9%8Bcp%E4%B8%8Emv/</url>
    <content><![CDATA[<h2 id="2-2-cp"><a href="#2-2-cp" class="headerlink" title="2.2 cp"></a>2.2 cp</h2><ul>
<li>用途：复制文件或目录</li>
<li>格式：<code>cp [option] [source] [destination]</code></li>
<li>option<ul>
<li>-a 复制目录时使用，保留链接、文件属性，递归复制。（默认是改变文件属性，比如修改时间、权限等）</li>
<li>-d 复制时保留链接。</li>
<li>-f  删除已经存在的文件不提示。</li>
<li>-i  覆盖目标文件的时候给出提示。☆</li>
<li>-p 复制源文件的时候，把修改时间和访问权限一块复制。</li>
<li>-r  若目标源文件是目录，则会将其子目录和文件全部复制。（如果直接复制目录会报错）☆</li>
<li>-l 不进行复制，只是链接文件。☆</li>
</ul>
</li>
</ul>
<h2 id="2-3-mv"><a href="#2-3-mv" class="headerlink" title="2.3 mv"></a>2.3 mv</h2><ul>
<li>用途：文件或目录移动。☆文件/目录重命名。</li>
<li>格式：<code>mv [opt] [source] [destination]</code><ul>
<li>跨文件系统复制时，会删除原有文件删除，所以要注意。</li>
</ul>
</li>
<li>opt<ul>
<li>-i 交互式操作</li>
<li>-p移动时保持权限</li>
<li>-f禁止交互式操作</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令007之rm、mkdir、rmdir、cd</title>
    <url>/2020/02/17/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4007%E4%B9%8Brm%E3%80%81mkdir%E3%80%81rmdir%E3%80%81cd-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux007%E4%B9%8Brmmkdirrmdircd/</url>
    <content><![CDATA[<h2 id="2-5-rm"><a href="#2-5-rm" class="headerlink" title="2.5 rm"></a>2.5 rm</h2><ul>
<li>用途：删除</li>
<li>格式：rm 选项 单个文件或者目录</li>
<li>选项<ul>
<li>rm -f 忽略不存在文件，也不给你提示</li>
<li>rm -r 就是递归删除</li>
<li>rm -i 交互删除</li>
<li>rm -rf 目录名 用于删除目录</li>
</ul>
</li>
</ul>
<h2 id="2-6-mkdir"><a href="#2-6-mkdir" class="headerlink" title="2.6 mkdir"></a>2.6 mkdir</h2><ul>
<li>用途：创建目录</li>
<li>格式：mkdir 选项 目录名</li>
<li>选项<ul>
<li>mkdir -m 对新建目录设置权限，不常用。<ul>
<li>比如创建一个具有读写执行权限的目录 mkdir -m 777 目录名</li>
</ul>
</li>
<li>mkdir -p 就是一次创建多个目录，比如你创建多级目录，上级目录实际上没有，加上此参数就会给你自动创建。</li>
<li>mkdir -v 每次创建目录都显示信息，不常用。</li>
</ul>
</li>
</ul>
<h2 id="2-7-rmdir-amp-rm-rf"><a href="#2-7-rmdir-amp-rm-rf" class="headerlink" title="2.7 rmdir&amp;rm -rf"></a>2.7 rmdir&amp;rm -rf</h2><ul>
<li>用途：删除空目录，就是说目录中没有文件采用此命令。否则用rm -rf</li>
<li>格式：rmdir 选项 目录名</li>
<li>选项<ul>
<li>rmdir -p 就是递归删除目录下面的所有文件，有一种情况如果你删除子目录，导致父目录为空，那么父目录也会删除。</li>
</ul>
</li>
</ul>
<h2 id="2-8-cd"><a href="#2-8-cd" class="headerlink" title="2.8 cd"></a>2.8 cd</h2><ul>
<li>用途：切换目录</li>
<li>格式：cd 目录</li>
<li>选项<ul>
<li>cd 不加任何参数就是切换成登录目录，一般是用户目录。</li>
<li>cd ~ 同上。</li>
<li>cd /返回根目录</li>
<li>cd /root 返回root目录</li>
<li>cd .. 返回上一级目录</li>
<li>cd - 返回你上次访问的目录</li>
<li>.. 在当前目录基础上的上一级目录。</li>
<li>. 当前目录</li>
<li>~ 配合返回用户目录，就是/home/你的用户名的那个目录。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令009之SUID、SGID</title>
    <url>/2020/02/20/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4009%E4%B9%8BSUID%E3%80%81SGID-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux%E5%91%BD%E4%BB%A4%E4%B9%8Bsuidsgid/</url>
    <content><![CDATA[<ul>
<li>SUID<ul>
<li>原理：在用户位的rwx的x位设置成s（rw<u>x</u> rwx rwx），目的就是让文件以其原有所属者进行运行。</li>
<li>格式：<code>chmod u+s</code>,比较典型的就是<code>passwd</code>命令。</li>
<li>场景：首先passwd文件是只有root用户才能读写，但是其他用户如果想要修改密码呢？切换到root在修改这就显得很麻烦了。但是如果设置s位，那么普通用户修改自己密码也就可以了。</li>
</ul>
</li>
<li>SGID<ul>
<li>原理：就是把所属组位的rwx的x设置为s(rwx rw<u>x</u> rwx)。</li>
<li>作用<ul>
<li>1.针对文件设置SGID：首先只有二进制可执行文件才能够设置SGID，作用就是该文件具有所属组的特权（见场景）。</li>
<li>2.针对目录设置SGID，则复制到该目录下的所有文件，文件的都会设置成所属组的权限，除非你在复制文件命令时用cp -p选项。</li>
</ul>
</li>
<li>格式：<code>chmod g+s</code></li>
<li>场景：<code>/dev/kmenm权限为cr-- r-- ---root system</code>使用ps命令读取该文件，ps的权限（ps命令也是一个文件，可执行文件）为<code>-r-xr-sr-x 1 bin system</code>，所以一般用户要是读取kmenm文件的话会自动获取system组的权限。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令010之find</title>
    <url>/2020/02/20/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4010%E4%B9%8Bfind-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux%E5%91%BD%E4%BB%A4010%E4%B9%8Bfind/</url>
    <content><![CDATA[<ul>
<li><p>用途：查找文件。</p>
</li>
<li><p>格式：<code>find 路径 选项 操作</code></p>
</li>
<li><p>选项</p>
<ul>
<li><p>-name 根据文件名查找</p>
</li>
<li><p>-perm 根据权限查找</p>
</li>
<li><p>-prune 不在当前目录查找</p>
</li>
<li><p>-user 根据文件所属者查找</p>
</li>
<li><p>-group 根据文件所属用户组查找</p>
</li>
<li><p>-mtime -n+n 第一个n根据文件距离n天内，第二个n根据文件在第n天前</p>
</li>
<li><p>-nogroup 查找没有用户组的文件，在/etc/groups不存在</p>
</li>
<li><p>-nouser 查找没有所属主的文件，在/etc/passwd</p>
</li>
<li><p>-newer file1!file2 查找比1新比2旧的文件</p>
</li>
<li><p>-type 根据文件类型查找</p>
<ul>
<li>b 块设备</li>
<li>d 目录</li>
<li>c 字符设备文件</li>
<li>p 管道文件</li>
<li>l  符号链接文件</li>
<li>f  普通文件</li>
</ul>
</li>
<li><p>-size n:[c] 查找长度为n块的文件,带有c表示文件长度按照字节统计</p>
</li>
<li><p>-depth 查找文件现在本目录查找，然后在子目录查找</p>
</li>
</ul>
</li>
<li><p>操作</p>
<ul>
<li>-print 将匹配的文件标准输出</li>
<li>-exec 对匹配的文件执行该操作后的命令，格式为<code>-exec command &#123;&#125; \</code></li>
<li>-ok 安全模式执行，就是在执行指令前给出提示</li>
</ul>
</li>
<li><p>场景</p>
<ul>
<li><code>find . -name &quot;t*&quot;-perm 744 -print</code></li>
<li>`find /etc -type f -name “rc” exec ls -l {} \</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>每天复习一点Linux命令011之vim</title>
    <url>/2020/02/20/Linux/%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9Linux%E5%91%BD%E4%BB%A4011%E4%B9%8Bvim-%E6%AF%8F%E5%A4%A9%E5%A4%8D%E4%B9%A0%E4%B8%80%E7%82%B9linux%E5%91%BD%E4%BB%A4011%E4%B9%8Bvim/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">格式：vim 选项 文件名 </span><br><span class="line">默认：默认不加任何是创建一个空文件</span><br><span class="line">选项</span><br><span class="line">	-c command 在对文件进行编辑前，要先执行command命令</span><br><span class="line">	-r filename 恢复文件</span><br><span class="line">	-R 以只读方式编辑文件</span><br><span class="line">	+n file 编辑file文件，并把光标放到第n行</span><br><span class="line">	+ file 编辑file文件并将光标放到最后一行</span><br><span class="line">	+ /string file 编辑file文件，并将光标置于第一个 string所表示字符串行</span><br><span class="line">vim工作模式</span><br><span class="line">	一般模式：vim命令进入就是默认一般模式，在该模式下用户输入的就是命令，这个模式允许光标移动，允许搜索文本。</span><br><span class="line">	   文件的保存、修改是在一般模式下进行的。</span><br><span class="line">		:W 存储 :Q 退出 q! 强制退出不保存</span><br><span class="line">		:Wq 存储并退出</span><br><span class="line">	插入模式：在一般模式下输入i、o、a进入，进入此模式下，用户的输入都保存在缓冲区，退出插入模式用Esc.</span><br><span class="line">	  移动光标常用命令</span><br><span class="line">		移动光标：h\j + Enter\k-\l 左右上下</span><br><span class="line">		移动当前段前或段尾：&#123; &#125;</span><br><span class="line">		移动当前句子前或尾：( )</span><br><span class="line">		移动当前行的第一个非空字符：^</span><br><span class="line">		移动到当前行末尾：$</span><br><span class="line">		移动到行n: :n</span><br><span class="line">	  编辑文件常用命令</span><br><span class="line">		删除光标当前位置字符 x</span><br><span class="line">		删除光标所在整行文件 dd</span><br><span class="line">		删除当前光标位置到该行结束所有文本 d$</span><br><span class="line">		从当前光标位置向前删除单词 dw</span><br><span class="line">		将下一行文本合并到本行行尾 J</span><br><span class="line">		在当前光标位置后附加内容 a</span><br><span class="line">		在当前光标所在行后附加内容 A</span><br><span class="line"> 底行工作模式</span><br><span class="line">	用户输入的任何文字当做命令。</span><br><span class="line">	切换：一般模式到底行模式/</span><br><span class="line">	搜索字符命令：/字符 自动搜索光标往下的内容</span><br><span class="line">			    ?字符 自动搜索光标往上的内容</span><br><span class="line">				:n1,n2s/word1/word2/g 搜索n1到n2行名字为字符1的字符串，并把他们全部换成word2</span><br><span class="line">				:1,$ss/word1/word2/g,搜索第一行到最后一行名字为word1的字符串并全部替换</span><br><span class="line">	替换命令： :s/old/new 把old替换成new 默认替换第一次，若全部替换需要加g :s/old/new/g</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://quinntian.com/upload/2020/2/image-e179e295e6eb467a818a44e347b82f2a.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Maven配置记录</title>
    <url>/2019/10/26/Maven/Maven%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95-maven%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h1><h1 id="2-创建环境变量"><a href="#2-创建环境变量" class="headerlink" title="2.创建环境变量"></a>2.创建环境变量</h1><ol>
<li>M2_HOME<br>E:\GreenSoftware\apache-maven-3.6.2</li>
<li>PATH添加%M2_HOME%\bin</li>
<li>mvn -v<h1 id="3-配置文件修改"><a href="#3-配置文件修改" class="headerlink" title="3.配置文件修改"></a>3.配置文件修改</h1>替换阿里仓库及本地仓库地址<br>阿里仓库<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 中央仓库1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 中央仓库2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>本地仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;E:\WorkSpace\MVNRES&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
  </entry>
  <entry>
    <title>MySql8.0登录Navcat因验证方式而报错caching_sha2_password</title>
    <url>/2021/03/14/MySQL/MySql8.0%E7%99%BB%E5%BD%95Navcat%E5%9B%A0%E9%AA%8C%E8%AF%81%E6%96%B9%E5%BC%8F%E8%80%8C%E6%8A%A5%E9%94%99caching_sha2_password-mysql80-deng-lu-navcat-yin-yan-zheng-fang-shi-er-bao-cuo-cachingsha2password/</url>
    <content><![CDATA[<p>报错内容：caching_sha2_password</p>
<p>适用：新安装且为启动服务之前</p>
<h1 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h1><ol>
<li>更改mysql配置文件<code>my.ini</code>或<code>my.cnf</code></li>
</ol>
<p>增加这一句设置默认插件为旧版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default_authentication_plugin = mysql_native_password</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h1><p>直接在表中修改<br>适用于：已经启动<br>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">Database changed</span><br><span class="line">SELECT Host, User, plugin from user;</span><br></pre></td></tr></table></figure>
<p>修改root的验证方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>MySql回顾（一）数据定义（数据库定义、表定义、索引和视图定义）.md</title>
    <url>/2018/07/31/MySQL/MySql%E5%9B%9E%E9%A1%BE%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E4%B9%89%E3%80%81%E8%A1%A8%E5%AE%9A%E4%B9%89%E3%80%81%E7%B4%A2%E5%BC%95%E5%92%8C%E8%A7%86%E5%9B%BE%E5%AE%9A%E4%B9%89%EF%BC%89.md-2019102314153544213/</url>
    <content><![CDATA[<p>title: MySql回顾（一）数据定义（数据库定义、表定义、索引和视图定义）<br>date: ‘2018-07-31 22:54:13’<br>updated: ‘2018-08-27 11:33:27’<br>tags: [Mysql, Mysql回顾]<br>permalink: /articles/2018/07/31/1533047632551.html</p>
<hr>
<p><img src="https://res.quinntian.xyz//file/2018/08/5362f5d2727a4e09ab2e10f38285330c_image.png" alt="imagepng"> </p>
<h2 id="第一部分-模式定义"><a href="#第一部分-模式定义" class="headerlink" title="第一部分 模式定义"></a>第一部分 模式定义</h2><h3 id="1-登录数据库"><a href="#1-登录数据库" class="headerlink" title="1. 登录数据库"></a>1. 登录数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2. 创建数据库"></a>2. 创建数据库</h3><h4 id="2-1-标准语法"><a href="#2-1-标准语法" class="headerlink" title="2.1 标准语法"></a>2.1 标准语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create &#123;database||schema&#125; [if not exists] 数据库名 </span><br><span class="line">[default] character set[=]字符集 </span><br><span class="line">[default] collate[=]字符集校验规则</span><br></pre></td></tr></table></figure>
<h4 id="2-2-简易写法"><a href="#2-2-简易写法" class="headerlink" title="2.2 简易写法"></a>2.2 简易写法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database||schema [if not exist] 数据库名</span><br></pre></td></tr></table></figure>
<h3 id="3-删除数据库"><a href="#3-删除数据库" class="headerlink" title="3. 删除数据库"></a>3. 删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database ||schema  [if not exist] 数据库名</span><br></pre></td></tr></table></figure>
<h3 id="4-选择数据库"><a href="#4-选择数据库" class="headerlink" title="4. 选择数据库"></a>4. 选择数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名 </span><br></pre></td></tr></table></figure>
<h3 id="5-修改数据库"><a href="#5-修改数据库" class="headerlink" title="5. 修改数据库"></a>5. 修改数据库</h3><p>参照<strong>修改表</strong>时和修改数据库同时使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database 数据库名 </span><br></pre></td></tr></table></figure>
<h3 id="6-查看数据库"><a href="#6-查看数据库" class="headerlink" title="6. 查看数据库"></a>6. 查看数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases||schemas [like ‘’|where expression]</span><br></pre></td></tr></table></figure>

<h2 id="第二部分-表定义"><a href="#第二部分-表定义" class="headerlink" title="第二部分 表定义"></a>第二部分 表定义</h2><h3 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h3><h4 id="1-1-完整语法"><a href="#1-1-完整语法" class="headerlink" title="1.1 完整语法"></a>1.1 完整语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create [temporary] 表名(</span><br><span class="line">字段名 数据类型[完整性约束],</span><br><span class="line">字段名2 数据类型[完整性约束],</span><br><span class="line">......)[engine=引擎类型];</span><br></pre></td></tr></table></figure>
<h4 id="1-2-参数及注意事项"><a href="#1-2-参数及注意事项" class="headerlink" title="1.2 参数及注意事项"></a>1.2 参数及注意事项</h4><ul>
<li>[temporary] 创建临时表。</li>
<li>[engine=引擎类型]可选引擎类型</li>
<li>创建数据库前要进行选择数据库，否则会报错，选择数据库语法<code> use 数据库名</code>。</li>
</ul>
<h4 id="1-3-完整性约束"><a href="#1-3-完整性约束" class="headerlink" title="1.3 完整性约束"></a>1.3 完整性约束</h4><ul>
<li><code> primary key</code>  标识主键</li>
<li><code> foreign key</code> 标识外键</li>
<li><code> not null key</code>  标识不能为空</li>
<li><code> unique</code>  标识该属性是唯一</li>
<li><code> auto_increase</code>  标识该属性值是自动增长</li>
<li><code> default</code>  为该属性设置默认值</li>
</ul>
<h5 id="1-3-1-主键"><a href="#1-3-1-主键" class="headerlink" title="1.3.1 主键"></a>1.3.1 主键</h5><ol>
<li><p>单一字段主键 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性名 数据类型 primary key </span><br></pre></td></tr></table></figure></li>
<li><p>多字段主键</p>
<ul>
<li><code>primary key(属性1,2,3,4....)</code></li>
<li>结合创建表语句的例子(联合主键)   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table example2(</span><br><span class="line">	stu_id int,</span><br><span class="line">	course_id int,</span><br><span class="line">	grade float,</span><br><span class="line">	primary key(stu_id,course_id)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>
<h5 id="1-3-2-外键"><a href="#1-3-2-外键" class="headerlink" title="1.3.2 外键"></a>1.3.2 外键</h5></li>
</ul>
</li>
<li><p>区分父表和主表</p>
<blockquote>
<p>A表-&gt; sno-&gt;外键<br>B表-&gt; id<br>若sno-&gt;依赖-&gt;id, B为父表，A为子表<br>sno-&gt;A表外键</p>
</blockquote>
</li>
</ol>
<p><strong>外键在的表为子表，被引用的键所在的表是主表</strong></p>
<ol start="2">
<li><p>语法格式</p>
<ul>
<li><code> constraint 外键别名 foreign key(属性1,属性...) references 表名(属性2,属性...)</code></li>
<li>结合创建语句的示例  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table example3(</span><br><span class="line">  id int(primary key),</span><br><span class="line">  stu_id int,</span><br><span class="line">  constraint c_fk foregin key(stu_id,course_id) references example2(stu_id,course_id);</span><br><span class="line">);</span><br><span class="line">联合外键参考example2中的两个属性</span><br></pre></td></tr></table></figure>
<h5 id="1-3-3-非空约束"><a href="#1-3-3-非空约束" class="headerlink" title="1.3.3 非空约束"></a>1.3.3 非空约束</h5></li>
</ul>
</li>
<li><p>基本语法<br><code>属性名 数据类型 not null</code></p>
</li>
<li><p>结合创建语句示例</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table example4(id int not null primary key,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">stu_id int,constraint c_fk foregin key(stu_id) references example(stu_id))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="1-3-4-唯一约束"><a href="#1-3-4-唯一约束" class="headerlink" title="1.3.4 唯一约束"></a>1.3.4 唯一约束</h5></li>
<li><p>基本语法<br><code> 属性名 数据类型 unique</code></p>
</li>
<li><p>结合创建语句示例</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table example5(id int primary key,</span><br><span class="line">stu_id int unique,</span><br><span class="line">name varchar not null);</span><br></pre></td></tr></table></figure>
<h5 id="1-3-5-属性自动增长"><a href="#1-3-5-属性自动增长" class="headerlink" title="1.3.5 属性自动增长"></a>1.3.5 属性自动增长</h5></li>
<li><p>基本语法<br><code>属性名 数据类型 auto_increment</code></p>
</li>
<li><p>结合创建语句示例</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table example6(</span><br><span class="line"> id int primary key auto_increment,</span><br><span class="line"> stu_id int unique,</span><br><span class="line"> name varchar(20) not null</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<h5 id="1-3-6-属性的默认值"><a href="#1-3-6-属性的默认值" class="headerlink" title="1.3.6 属性的默认值"></a>1.3.6 属性的默认值</h5></li>
<li><p>基本语法<br><code> 属性名 数据类型 defaut 默认值</code></p>
</li>
<li><p>结合创建语句示例</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table example7(id int primary key auto_increment,</span><br><span class="line">stu_id int unique,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">english varchar(20) default &#x27;zero&#x27;),</span><br><span class="line">math float default 0,</span><br><span class="line">computer float default 0);</span><br></pre></td></tr></table></figure>
<h5 id="1-3-7-注释"><a href="#1-3-7-注释" class="headerlink" title="1.3.7 注释"></a>1.3.7 注释</h5><h3 id="2-更新表（表的列）"><a href="#2-更新表（表的列）" class="headerlink" title="2. 更新表（表的列）"></a>2. 更新表（表的列）</h3><h4 id="2-1-表增加列"><a href="#2-1-表增加列" class="headerlink" title="2.1 表增加列"></a>2.1 表增加列</h4><p>add[column]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 add[column] 属性1 数据类型 [完整性约束条件] [first || after 属性名2];</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-2-修改列名称或数据类型"><a href="#2-2-修改列名称或数据类型" class="headerlink" title="2.2 修改列名称或数据类型"></a>2.2 修改列名称或数据类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 change 旧属性 新属性 新的数据类型 </span><br></pre></td></tr></table></figure>
<h4 id="2-3-修改或删除列的默认值"><a href="#2-3-修改或删除列的默认值" class="headerlink" title="2.3 修改或删除列的默认值"></a>2.3 修改或删除列的默认值</h4><h4 id="2-4-修改列数据类型"><a href="#2-4-修改列数据类型" class="headerlink" title="2.4 修改列数据类型"></a>2.4 修改列数据类型</h4><p>modify[column]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify[column] 属性名 数据类型</span><br></pre></td></tr></table></figure>

<h4 id="2-5-删除列"><a href="#2-5-删除列" class="headerlink" title="2.5 删除列"></a>2.5 删除列</h4><p>drop[column]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop[column] 属性名 </span><br></pre></td></tr></table></figure>
<h4 id="2-6-重命名"><a href="#2-6-重命名" class="headerlink" title="2.6 重命名"></a>2.6 重命名</h4><p>rename[to]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 旧表名 rename to 新表名</span><br></pre></td></tr></table></figure>
<h4 id="2-7-修改列的排列位置"><a href="#2-7-修改列的排列位置" class="headerlink" title="2.7 修改列的排列位置"></a>2.7 修改列的排列位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify 属性名 数据类型  first || after 属性名2;</span><br></pre></td></tr></table></figure>
<h4 id="2-8-更改表的存储引擎"><a href="#2-8-更改表的存储引擎" class="headerlink" title="2.8 更改表的存储引擎"></a>2.8 更改表的存储引擎</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table engine=存储引擎</span><br></pre></td></tr></table></figure>
<h4 id="2-9-删除表的外键约束"><a href="#2-9-删除表的外键约束" class="headerlink" title="2.9 删除表的外键约束"></a>2.9 删除表的外键约束</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop foregin key 外键别名 </span><br></pre></td></tr></table></figure>
<h3 id="3-重命名表"><a href="#3-重命名表" class="headerlink" title="3. 重命名表"></a>3. 重命名表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename table 表名 to 新表名,.......</span><br></pre></td></tr></table></figure>
<p>可命名多个</p>
<h3 id="4-删除表"><a href="#4-删除表" class="headerlink" title="4. 删除表"></a>4. 删除表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table[if exist] 表名1,... </span><br></pre></td></tr></table></figure>
<h3 id="5-查看表"><a href="#5-查看表" class="headerlink" title="5. 查看表"></a>5. 查看表</h3><h4 id="5-1-查看所有表名"><a href="#5-1-查看所有表名" class="headerlink" title="5.1 查看所有表名"></a>5.1 查看所有表名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show [full] tables [from|in] 数据库</span><br></pre></td></tr></table></figure>
<h4 id="5-2-查看表结构"><a href="#5-2-查看表结构" class="headerlink" title="5.2 查看表结构"></a>5.2 查看表结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show [full] columns from|in 表名 [from|in 数据库名]</span><br><span class="line">[like &#x27;&#x27; | where expr]</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">describe(或简写desc) 表名 </span><br></pre></td></tr></table></figure>
<h4 id="5-3-查看表详细结构"><a href="#5-3-查看表详细结构" class="headerlink" title="5.3 查看表详细结构"></a>5.3 查看表详细结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名 \g(以较优雅的方式显示)</span><br></pre></td></tr></table></figure>
<h2 id="第三部分-索引定义"><a href="#第三部分-索引定义" class="headerlink" title="第三部分 索引定义"></a>第三部分 索引定义</h2>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>绿色版MySQL安装记录</title>
    <url>/2019/10/26/MySQL/%E7%BB%BF%E8%89%B2%E7%89%88MySQL%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95-%E7%BB%BF%E8%89%B2%E7%89%88mysql%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="1-下载MYSQL绿色版"><a href="#1-下载MYSQL绿色版" class="headerlink" title="1.下载MYSQL绿色版"></a>1.下载MYSQL绿色版</h1><p>官网下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p>
<h1 id="2-解压到本地"><a href="#2-解压到本地" class="headerlink" title="2.解压到本地"></a>2.解压到本地</h1><p>解压到本地并创建data文件，创建my.ini文件，配置信息如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><span class="line"># *** DO NOT EDIT THIS FILE. It&#x27;s a template which will be copied to the</span><br><span class="line"># *** default location during install, and will be replaced if you</span><br><span class="line"># *** upgrade to a newer version of MySQL.</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line">#skip-grant-tables </span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line"> </span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line"> </span><br><span class="line"># These are commonly set, remove the # and set as required.</span><br><span class="line"># basedir = .....</span><br><span class="line"># datadir = .....</span><br><span class="line"># port = .....</span><br><span class="line"># server_id = .....</span><br><span class="line">basedir =&quot;D:\Mysql\mysql-8.0.12-winx64&quot;   # 设置mysql的安装目录 </span><br><span class="line">datadir =&quot;D:\Mysql\mysql-8.0.12-winx64\data&quot;   # 设置mysql数据库的数据的存放目录，必须是data，或者是//xxx/data  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M </span><br><span class="line"> </span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES </span><br><span class="line"> </span><br><span class="line">#服务端的编码方式</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">[client]</span><br><span class="line">#客户端编码方式，最好和服务端保存一致</span><br><span class="line">loose-default-character-set=utf8mb4</span><br><span class="line"> </span><br><span class="line">[WinMySQLadmin]  </span><br><span class="line">Server = &quot;D:\Mysql\mysql-8.0.12-winx64\bin\mysqld.exe&quot;</span><br></pre></td></tr></table></figure>
<h1 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h1><p>在系统环境变量配置界面，添加PATH变量为bin文件夹目录。</p>
<h1 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4.初始化"></a>4.初始化</h1><p>以管理员运行CMD命令，输入<code>mysqld --initialize-insecure</code></p>
<h1 id="5-安装服务"><a href="#5-安装服务" class="headerlink" title="5.安装服务"></a>5.安装服务</h1><p><code>mysqld -install</code></p>
<h1 id="6-启动服务"><a href="#6-启动服务" class="headerlink" title="6.启动服务"></a>6.启动服务</h1><p><code>net start mysql</code></p>
<h1 id="7-登录并更改密码"><a href="#7-登录并更改密码" class="headerlink" title="7.登录并更改密码"></a>7.登录并更改密码</h1><p><code>mysql -uroot -p</code><br><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;; </code><br><code>flush privileges;</code></p>
<h1 id="8-卸载"><a href="#8-卸载" class="headerlink" title="8.卸载"></a>8.卸载</h1><ol>
<li>net stop mysql</li>
<li>regedit 删除下面目录中EventMessageFile 和 TypesSupported <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Application/MySQL</span><br><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Application/MySQL</span><br><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Application/MySQL</span><br></pre></td></tr></table></figure></li>
<li>移除服务<br>在bin目录下运行CMD,<code>mysqld -remove</code></li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis一对多嵌套查询结果映射</title>
    <url>/2020/12/10/Mybatis/MyBatis%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E6%98%A0%E5%B0%84-m-y-b-a-t-i-s-yi-dui-duo-qian-tao-cha-xun-jie-guo-ying-she/</url>
    <content><![CDATA[<p><strong>简单理解就是：此种方法指直接书写连表SQL，然后将结果一次性映射到几个实体上，而不是先查主表映射到实体后,再查从表再映射到实体</strong><br><strong>比较官方的说法叫做一对多collection集合嵌套结果映射</strong><br>步骤</p>
<ol>
<li>主表对应实体类添加从表实体类的集合</li>
<li>书写主表的xml文件</li>
<li>书写主表Mapper方法<h1 id="1-书写主表对应实体类添加从表实体类集合"><a href="#1-书写主表对应实体类添加从表实体类集合" class="headerlink" title="1.书写主表对应实体类添加从表实体类集合"></a>1.书写主表对应实体类添加从表实体类集合</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.quinntian.admin.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户表</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(excludeProperty = &#123;&quot;tkGroups&quot;,&quot;tkRoles&quot;,&quot;tkPermits&quot;,&quot;tkOrg&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TkUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部门外键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long oId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime creatime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime loginTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上次登录时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime lastLoginTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long loginCount;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TkGroup&gt;  tkGroups;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2-书写主表的xml文件"><a href="#2-书写主表的xml文件" class="headerlink" title="2.书写主表的xml文件"></a>2.书写主表的xml文件</h1></li>
</ol>
<p><strong>其中xml中要新增一个resultMap，用于与从表实体绑定</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.quinntian.admin.mapper.TkUserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用查询映射结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.quinntian.admin.model.TkUser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;o_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;oId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mobile&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;creatime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;creatime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;login_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;loginTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_login_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastLoginTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;login_count&quot;</span> <span class="attr">property</span>=<span class="string">&quot;loginCount&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用查询结果列 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id, o_id, name, password, mobile, email, creatime, login_time, last_login_time, login_count</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ID：ID唯一</span></span><br><span class="line"><span class="comment">        type:指明映射实体类</span></span><br><span class="line"><span class="comment">        extend：指明集成的resultMap，用于简化写法</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserAndGroup&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.quinntian.admin.model.TkUser&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        property:指明实体类中集合名</span></span><br><span class="line"><span class="comment">        columPrefix；指明别名</span></span><br><span class="line"><span class="comment">        resultMap:指明从表xml文件的resultMap，用于简化写法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;tkGroups&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;role_&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.quinntian.admin.mapper.TkGroupMapper.BaseResultMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1对多查询:一次性映射到</span></span><br><span class="line"><span class="comment">            此处的SQL是三表连接--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserAndGroup&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserAndGroup&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        u.id, u.o_id, u.name, u.password, u.mobile, u.email, u.creatime, u.login_time, u.last_login_time, u.login_count,</span><br><span class="line">        g.id, g.group_name, g.f_id, g.creatime, g.description</span><br><span class="line">        from tk_user u</span><br><span class="line">        left join tk_user_group ug on ug.user_id = u.id</span><br><span class="line">        left join tk_group g on g.id = ug.group_id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="3-编写mapper接口"><a href="#3-编写mapper接口" class="headerlink" title="3.编写mapper接口"></a>3.编写mapper接口</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">package com.quinntian.admin.mapper;</span><br><span class="line"></span><br><span class="line">import com.quinntian.admin.model.TkUser;</span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"> * 用户表 Mapper 接口</span><br><span class="line"> * <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> *</span><br><span class="line"> * @author QuinnTian</span><br><span class="line"> */</span><br><span class="line">public interface TkUserMapper extends BaseMapper<span class="tag">&lt;<span class="name">TkUser</span>&gt;</span> &#123;</span><br><span class="line">    public List<span class="tag">&lt;<span class="name">TkUser</span>&gt;</span> selectUserAndGroup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="4-编写测试类"><a href="#4-编写测试类" class="headerlink" title="4.编写测试类"></a>4.编写测试类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.quinntian.admin.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.quinntian.admin.mapper.TkUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.quinntian.admin.model.TkUser;</span><br><span class="line"><span class="keyword">import</span> com.quinntian.admin.service.ITkUserService;</span><br><span class="line"><span class="keyword">import</span> com.quinntian.admin.service.impl.TkUserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TkUserMapper tkUserMapper;</span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        System.out.println(tkUserMapper.selectUserAndGroup());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6e489bb8] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@595755231 wrapping com.mysql.cj.jdbc.ConnectionImpl@182fd26b] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: select u.id, u.o_id, u.name, u.password, u.mobile, u.email, u.creatime, u.login_time, u.last_login_time, u.login_count, g.id, g.group_name, g.f_id, g.creatime, g.description from tk_user u left join tk_user_group ug on ug.user_id = u.id left join tk_group g on g.id = ug.group_id</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, o_id, name, password, mobile, email, creatime, login_time, last_login_time, login_count, id, group_name, f_id, creatime, description</span><br><span class="line">&lt;==        Row: 1, 1, admin, admin, 15166623676, admin@admin.com, 2020-12-08 16:18:59, 2020-12-08 16:19:03, 2020-12-07 16:19:07, 0, 1, 用户组1, 0, 2020-12-08 16:34:00, 用户组1描述</span><br><span class="line">&lt;==        Row: 1, 1, admin, admin, 15166623676, admin@admin.com, 2020-12-08 16:18:59, 2020-12-08 16:19:03, 2020-12-07 16:19:07, 0, 3, 用户组3, 0, 2020-12-08 16:34:47, 用户组3描述</span><br><span class="line">&lt;==        Row: 2, null, test1, null, null, null, null, null, null, 0, null, null, null, null, null</span><br><span class="line">&lt;==      Total: 3</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6e489bb8]</span><br><span class="line">[TkUser(id=1, oId=1, name=admin, password=admin, mobile=15166623676, email=admin@admin.com, creatime=2020-12-08T16:18:59, loginTime=2020-12-08T16:19:03, lastLoginTime=2020-12-07T16:19:07, loginCount=0, tkGroups=[TkGroup(id=1, groupName=用户组1, fId=0, creatime=2020-12-08T16:18:59, description=用户组1描述)], tkRoles=null, tkPermits=null, tkOrg=null), TkUser(id=2, oId=null, name=test1, password=null, mobile=null, email=null, creatime=null, loginTime=null, lastLoginTime=null, loginCount=0, tkGroups=[TkGroup(id=2, groupName=null, fId=null, creatime=null, description=null)], tkRoles=null, tkPermits=null, tkOrg=null)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="4-关于自动合并问题"><a href="#4-关于自动合并问题" class="headerlink" title="4.关于自动合并问题"></a>4.关于自动合并问题</h1><p><strong>重点说明：关于SQL查询结果一共是有三条结果，其中两条是重复的，这里框架自动合并了，其原理就是设置了<id column="id" property="id" />标签，框架会自动判断查询结果的ID进行自动合并。另外如果没有ID标签框架会自动比对每条字段下的结果，相同合并</strong></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis generator targetRuntime=&quot;MyBatis3DynamicSql&quot; 报错</title>
    <url>/2020/12/08/Mybatis/Mybatis%20generator%20targetRuntime=_MyBatis3DynamicSql_%20%E6%8A%A5%E9%94%99-mybatisgeneratortargetruntimemybatis3dynamicsql%E6%8A%A5%E9%94%99targetruntimeincontextmysqltablesisinvalid/</url>
    <content><![CDATA[<p>Mybatis generator targetRuntime=”MyBatis3DynamicSql” 报错targetRuntime in context MysqlTables is invalid<br><img src="https://quinntian.com/upload/2020/12/image-05b9917a705d4a69890d41ee5a40dae1.png" alt="image.png"><br><strong>如果你的配置文件中写了，xml的配置要删掉，或者直接换成mybtis3,因为设置位第一个不会生成xml文件。下表</strong><br>这里补充一下targetRuntime的几个值的意义，因为官方英文文档。<br><img src="https://quinntian.com/upload/2020/12/image-e21d2d8d4fce4180b3dc44d521798060.png" alt="image.png"><br><img src="https://quinntian.com/upload/2020/12/image-1c1d409971d3408e8e31532661b7cb52.png" alt="image.png"><br>参考 <a href="https://blog.csdn.net/seek_of/article/details/105911997">https://blog.csdn.net/seek_of/article/details/105911997</a></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis generator xml文件中报错对实体 &quot;useUnicode&quot; 的引用必须以 &#39;;&#39; 分隔符结尾</title>
    <url>/2020/12/08/Mybatis/Mybatis%20generator%20xml%E6%96%87%E4%BB%B6%E4%B8%AD%E6%8A%A5%E9%94%99%E5%AF%B9%E5%AE%9E%E4%BD%93%20_useUnicode_%20%E7%9A%84%E5%BC%95%E7%94%A8%E5%BF%85%E9%A1%BB%E4%BB%A5%20&#39;;&#39;%20%E5%88%86%E9%9A%94%E7%AC%A6%E7%BB%93%E5%B0%BE-mybatisgeneratorxml%E6%96%87%E4%BB%B6%E4%B8%AD%E6%8A%A5%E9%94%99%E5%AF%B9%E5%AE%9E%E4%BD%93useunicode%E7%9A%84%E5%BC%95%E7%94%A8%E5%BF%85%E9%A1%BB%E4%BB%A5%E5%88%86%E9%9A%94%E7%AC%A6%E7%BB%93%E5%B0%BE/</url>
    <content><![CDATA[<p>把</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">localhost:3306/tk-admin?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/tk-admin?serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8</span><br></pre></td></tr></table></figure>
<p>&amp;改为&amp;</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis generator配置文件通用模板</title>
    <url>/2020/12/08/Mybatis/Mybatis%20generator%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%80%9A%E7%94%A8%E6%A8%A1%E6%9D%BF-mybatisgenerator%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%80%9A%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="配置文件模板"><a href="#配置文件模板" class="headerlink" title="配置文件模板"></a>配置文件模板</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置生成器</span></span><br><span class="line"><span class="comment">参考官方文档：http://mybatis.org/generator/configreference/</span></span><br><span class="line"><span class="comment">以下为基础模板，不全参照官方文档添加或者注释掉</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以下到targetruntime忽略--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--执行generator插件生成文件的命令： call mvn mybatis-generator:generate -e --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;properties resource=&quot;mybatis-generator/mybatisGeneratorinit.properties&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--classPathEntry:数据库的JDBC驱动,换成你自己的驱动位置 可选 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;classPathEntry location=&quot;D:\generator_mybatis\mysql-connector-java-5.1.46-bin.jar&quot; /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 一个数据库一个context --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime可以设置成MyBatis3Simple,就不会生成example的代码和方法</span></span><br><span class="line"><span class="comment">    defaultModelType=&quot;flat&quot; 目的是每个表只是生成一个实体，没有复杂继承类比较方便 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;MysqlTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></span><br><span class="line"><span class="comment">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：</span></span><br><span class="line"><span class="comment">        指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xmlFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span><span class="comment">&lt;!-- 是否取消注释 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 是否生成注释代时间戳--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jdbc连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/tk-admin?serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 类型转换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成实体类地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.quinntian.admin.model&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成map.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成mapxml对应client，也就是接口dao --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.quinntian.admin.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- table可以有多个,每个数据库中的表都可以写一个table，tableName表示要匹配的数据库表,</span></span><br><span class="line"><span class="comment">        也可以在tableName属性中通过使用%通配符来匹配所有数据库表,只有匹配的表才会自动生成文件</span></span><br><span class="line"><span class="comment">        以下方法参考官方文档，适当添加,添加的话改为true,http://mybatis.org/generator/configreference/table.html</span></span><br><span class="line"><span class="comment">        enableInsert=&quot;false&quot;</span></span><br><span class="line"><span class="comment">        enableUpdateByExample=&quot;true&quot;</span></span><br><span class="line"><span class="comment">        enableDeleteByExample=&quot;true&quot;</span></span><br><span class="line"><span class="comment">        enableSelectByExample=&quot;true&quot;</span></span><br><span class="line"><span class="comment">        selectByExampleQueryId=&quot;true&quot;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;test&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Test&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableInsert</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useActualColumnNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库表主键 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;Mysql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;table tableName=&quot;aurora_user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;true&quot; enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot; enableSelectByExample=&quot;true&quot; selectByExampleQueryId=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot; /&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&amp;lt;!&amp;ndash; 数据库表主键 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&amp;lt;!&amp;ndash;&lt;generatedKey column=&quot;user_id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/table&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;table tableName=&quot;aurora_blog&quot; domainObjectName=&quot;Blog&quot; enableCountByExample=&quot;true&quot; enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot; enableSelectByExample=&quot;true&quot; selectByExampleQueryId=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot; /&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&amp;lt;!&amp;ndash; 数据库表主键 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&amp;lt;!&amp;ndash;&lt;generatedKey column=&quot;user_id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/table&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="java类"><a href="#java类" class="headerlink" title="java类"></a>java类</h1><p>本文是采用java类运行生成，当然还有其他方法比如maven插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.quinntian.admin.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.exception.InvalidConfigurationException;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.exception.XMLParserException;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;mybatis generator生成器&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//MBG执行过程中的警告信息</span></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//当生成的代码重复时，覆盖原代码</span></span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//读取 MBG 配直文件</span></span><br><span class="line">        InputStream is = MGenerator.class.getResourceAsStream(<span class="string">&quot;/generator/generatorConfig.xml&quot;</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(is);</span><br><span class="line">        is.close();</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        <span class="comment">//创建 MBG</span></span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        <span class="comment">//执行生成代码</span></span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//输出警告信息</span></span><br><span class="line">        <span class="keyword">for</span> (String warning : warnings) &#123;</span><br><span class="line">            System.out.println(warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="需要导入的依赖"><a href="#需要导入的依赖" class="headerlink" title="需要导入的依赖"></a>需要导入的依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入mybatis generator生成器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis plus代码生成器生成.xml通用配置</title>
    <url>/2020/12/08/Mybatis/Mybatis%20plus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E7%94%9F%E6%88%90.xml%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE-mybatisplus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E7%94%9F%E6%88%90xml%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Maven导入依赖"><a href="#Maven导入依赖" class="headerlink" title="Maven导入依赖"></a>Maven导入依赖</h1><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入mybatis plus 不需要再导入原生mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--导入mybatis plus插件生成器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="spring-boot配置"><a href="#spring-boot配置" class="headerlink" title="spring boot配置"></a>spring boot配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...其他省略</span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">  mapper-locations:</span><br><span class="line">    classpath: mapper/*.xml</span><br></pre></td></tr></table></figure>
<h1 id="新建java类"><a href="#新建java类" class="headerlink" title="新建java类"></a>新建java类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.quinntian.admin.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;QuinnTian&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//生成xml基础结果映射</span></span><br><span class="line">        gc.setBaseResultMap(<span class="keyword">true</span>);</span><br><span class="line">        gc.setBaseColumnList(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/tk-admin?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        <span class="comment">//pc.setModuleName(scanner(&quot;模块名&quot;));</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com.quinntian.admin&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;model&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        <span class="comment">// 关闭生成控制器\服务层\MAPER，只生成mapper。xml（此处官方文档没写）https://github.com/baomidou/mybatis-plus/issues/2384</span></span><br><span class="line">        templateConfig.disable(TemplateType.CONTROLLER);</span><br><span class="line">        templateConfig.disable(TemplateType.SERVICE);</span><br><span class="line">        templateConfig.disable(TemplateType.ENTITY);</span><br><span class="line">        templateConfig.disable(TemplateType.MAPPER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span></span><br><span class="line">        <span class="comment">//strategy.setEntityLombokModel(true);</span></span><br><span class="line">        <span class="comment">//strategy.setRestControllerStyle(true);</span></span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        <span class="comment">//strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);</span></span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="运行结果参考"><a href="#运行结果参考" class="headerlink" title="运行结果参考"></a>运行结果参考</h1><p><img src="https://quinntian.com/upload/2020/12/image-53edf04baefe4057a11036349b049606.png" alt="image.png"></p>
<h1 id="配置信息文档"><a href="#配置信息文档" class="headerlink" title="配置信息文档"></a>配置信息文档</h1><p><a href="https://mybatis.plus/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">https://mybatis.plus/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</a></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis学习-第一个mybatis项目.md</title>
    <url>/2018/07/17/Mybatis/Mybatis%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E4%B8%AAmybatis%E9%A1%B9%E7%9B%AE.md-2019102314153541277/</url>
    <content><![CDATA[<p>title: Mybatis学习-第一个mybatis项目<br>date: ‘2018-07-17 08:27:15’<br>updated: ‘2018-07-17 08:29:06’<br>tags: [mybatis]<br>permalink: /articles/2018/07/17/1531786963221.html</p>
<hr>
<p><img src="https://img.hacpai.com/bing/20171203.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"> </p>
<h1 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h1><p>1.创建mybatis数据库<br>create database mybatis default character set utf8 collate utf8_general_ci;<br>2.创建一个名字为country的表并插入一些简单的数据<br>``` <code>sql</code><br>DROP TABLE IF EXISTS <code>country</code>;<br>CREATE TABLE <code>country</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>countryname</code> varchar(255) DEFAULT NULL,<br>  <code>countrycode</code> varchar(255) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;</p>
<p>INSERT INTO <code>country</code> VALUES (‘1’, ‘中国’, ‘CN’);<br>INSERT INTO <code>country</code> VALUES (‘2’, ‘英国’, ‘GB’);<br>INSERT INTO <code>country</code> VALUES (‘3’, ‘美国’, ‘US’);<br>INSERT INTO <code>country</code> VALUES (‘4’, ‘俄罗斯’, ‘RU’);</p>
<h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.mybatis.simple.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String countryname;</span><br><span class="line">	<span class="keyword">private</span> String countrycode;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCountryname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> countryname;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountryname</span><span class="params">(String countryname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.countryname = countryname;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCountrycode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> countrycode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountrycode</span><span class="params">(String countrycode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.countrycode = countrycode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建映射文件"><a href="#创建映射文件" class="headerlink" title="创建映射文件"></a>创建映射文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;tk.mybatis.simple.mapper.CountryMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Country&quot;</span>&gt;</span></span><br><span class="line">		select id,countryname,countrycode from country</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="创建mybatis配置文件"><a href="#创建mybatis配置文件" class="headerlink" title="创建mybatis配置文件"></a>创建mybatis配置文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/simple/src/main/resources/mybatis-config.xml</span><br><span class="line"></span><br><span class="line">``` xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;settings&gt;</span><br><span class="line">		&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</span><br><span class="line">	&lt;/settings&gt;</span><br><span class="line">	&lt;typeAliases&gt;</span><br><span class="line">		&lt;package name=&quot;tk.mybatis.simple.model&quot;/&gt;</span><br><span class="line">	&lt;/typeAliases&gt;</span><br><span class="line">	&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">		&lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">			&lt;transactionManager type=&quot;JDBC&quot;&gt;</span><br><span class="line">				&lt;property name=&quot;&quot; value=&quot;&quot;/&gt;</span><br><span class="line">			&lt;/transactionManager&gt;</span><br><span class="line">			&lt;dataSource type=&quot;UNPOOLED&quot;&gt;</span><br><span class="line">				&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">				&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///mybatis&quot;/&gt;</span><br><span class="line">				&lt;property name=&quot;username&quot; value=&quot;t&quot;/&gt;</span><br><span class="line">				&lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class="line">			&lt;/dataSource&gt;</span><br><span class="line">		&lt;/environment&gt;</span><br><span class="line">	&lt;/environments&gt;</span><br><span class="line">	&lt;mappers&gt;</span><br><span class="line">		&lt;mapper resource=&quot;tk/mybatis/simple/mapper/CountryMapper.xml&quot;/&gt;</span><br><span class="line">	&lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<h1 id="创建测试文件"><a href="#创建测试文件" class="headerlink" title="创建测试文件"></a>创建测试文件</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package tk.mybatis.simple.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.List;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.lf5.util.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.simple.model.Country;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountryMapperTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> sqlSessionFactory;</span><br><span class="line">  <span class="meta">@BeforeClass</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> void <span class="function"><span class="keyword">init</span>()</span>&#123;</span><br><span class="line">	  <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Reader</span> reader <span class="operator">=</span> <span class="type">Resources</span>.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">		sqlSessionFactory <span class="operator">=</span> new <span class="type">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line">		reader.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> void testSelectAll()&#123;</span><br><span class="line">	  <span class="type">SqlSession</span> sqlSession <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">	  <span class="keyword">try</span>&#123;</span><br><span class="line">		  </span><br><span class="line">		  java.util.<span class="type">List</span>&lt;<span class="type">Country</span>&gt; countryList <span class="operator">=</span> sqlSession.selectList(<span class="string">&quot;selectAll&quot;</span>);</span><br><span class="line">		  printCountryList(countryList);</span><br><span class="line">	  &#125;finally &#123;</span><br><span class="line">		 sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> void printCountryList(java.util.<span class="type">List</span>&lt;<span class="type">Country</span>&gt; countryList)&#123;</span><br><span class="line">	  <span class="keyword">for</span> (<span class="type">Country</span> country : countryList) &#123;</span><br><span class="line">		  <span class="type">System</span>.out.printf(<span class="string">&quot;%-4d%4s%4s<span class="subst">\n</span>&quot;</span>,</span><br><span class="line">				  country.getId(),country.getCountryname(),country.getCountrycode());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="log4j文件"><a href="#log4j文件" class="headerlink" title="log4j文件"></a>log4j文件</h1><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#all config</span></span><br><span class="line">log4j.rootLogger=ERROR,<span class="keyword">stdout</span></span><br><span class="line"><span class="meta">#MYbatis log config</span></span><br><span class="line">log4j.logger.tk.mybatis.simple.mapper=TRACE</span><br><span class="line"><span class="meta">#control input content</span></span><br><span class="line">log4j.appender.<span class="keyword">stdout</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.<span class="keyword">stdout</span>.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.<span class="keyword">stdout</span>.layout.ConversionPattern=%<span class="number">5</span>p [%t] - %m%n</span><br></pre></td></tr></table></figure>

<h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 设置源代码编码模式为UTF-8 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”.<br>SLF4J: Defaulting to no-operation (NOP) logger implementation<br>SLF4J: See <a href="http://www.slf4j.org/codes.html#StaticLoggerBinder">http://www.slf4j.org/codes.html#StaticLoggerBinder</a> for further details.<br>Mon Jul 16 22:57:56 CST 2018 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.<br>DEBUG [main] - ==&gt;  Preparing: select id,countryname,countrycode from country<br>DEBUG [main] - ==&gt; Parameters:<br>TRACE [main] - &lt;==    Columns: id, countryname, countrycode<br>TRACE [main] - &lt;==        Row: 1, 中国, CN<br>TRACE [main] - &lt;==        Row: 2, 英国, GB<br>TRACE [main] - &lt;==        Row: 3, 美国, US<br>TRACE [main] - &lt;==        Row: 4, 俄罗斯, RU<br>DEBUG [main] - &lt;==      Total: 4<br>1     中国  CN<br>2     英国  GB<br>3     美国  US<br>4    俄罗斯  RU</p>
<hr>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis批量更新时遇到大坑.md</title>
    <url>/2018/07/20/Mybatis/Mybatis%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%97%B6%E9%81%87%E5%88%B0%E5%A4%A7%E5%9D%91.md-2019102314153507439/</url>
    <content><![CDATA[<p>title: Mybatis批量更新时遇到大坑<br>date: ‘2018-07-20 18:40:30’<br>updated: ‘2018-07-20 18:41:35’<br>tags: [Mybatis, 后端]<br>permalink: /articles/2018/07/20/1532083230130.html</p>
<hr>
<p>批量更新代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">id=&quot;insertMessageReply&quot; parameterType=&quot;list&quot;&gt;</span><br><span class="line">  collection=&quot;list&quot; close=&quot;&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;;&quot;&gt;</span><br><span class="line">  insert into message_reply(create_time,from_username)</span><br><span class="line">    values</span><br><span class="line">        (</span><br><span class="line">    #&#123;item.CreateTime,jdbcType=BIGINT&#125;,</span><br><span class="line">    #&#123;item.FromUserName,jdbcType=VARCHAR&#125;,</span><br><span class="line">    </span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>执行时总是报语法错误<br>1.<strong>Mybatis批量插入时必须在连接地址后面加?allowMultiQueries=true</strong></p>
<p>2.另外还需注意分隔符必须是<strong>分号; separator=”;”</strong></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis高级查询之一对一查询</title>
    <url>/2019/07/23/Mybatis/Mybatis%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2%E4%B9%8B%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2-Mybatis%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2%E4%B9%8B%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="1-一对一查询"><a href="#1-一对一查询" class="headerlink" title="1. 一对一查询"></a>1. 一对一查询</h2><blockquote>
<p>1.1-1.3 我们假设场景为用户和角色一对一，根据数据库基本原理，我们把外键设置在用户一边，即在实体类中添加角色这个属性。1.1-1.3是一种映射查询而1.4是一种嵌套查询。</p>
</blockquote>
<h3 id="1-1-一对一自动映射处理查询"><a href="#1-1-一对一自动映射处理查询" class="headerlink" title="1.1 一对一自动映射处理查询"></a>1.1 一对一自动映射处理查询</h3><h4 id="1-1-1嵌套结果查询的核心思想"><a href="#1-1-1嵌套结果查询的核心思想" class="headerlink" title="1.1.1嵌套结果查询的核心思想"></a>1.1.1嵌套结果查询的核心思想</h4><ul>
<li>核心思想：直接用<strong>select</strong>标签通过数据库字段和实体类字段的自动映射。<ul>
<li>首先在select语句中指明映射关系。</li>
<li>然后我们看<strong>resultType</strong>的值是一个实体类。</li>
<li>自动映射到实体类。</li>
</ul>
</li>
<li>应用在场景中：我们假设用户和角色之间是一对一，在用户类中一个属性是角色 sysrole类型的，查询用户的时候把所归属的角色查询出来，那么其就可以写成如图所示。<ul>
<li>user_name userName代表数据库字段和实体类中字段</li>
<li>r.id “role.id”此处是通过别名映射的，role是什么？是声明在user类中属性。<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556028482729.png" alt="enter description here"><h4 id="1-1-2-嵌套结果查询优缺点"><a href="#1-1-2-嵌套结果查询优缺点" class="headerlink" title="1.1.2 嵌套结果查询优缺点"></a>1.1.2 嵌套结果查询优缺点</h4></li>
</ul>
</li>
</ul>
<ol>
<li>什么是？通过了一次查询把结果映射到了不同对象里。</li>
<li>好处是什么？减少了数据库查询次数，减少了数据库的压力。</li>
<li>坏处是什么？要写复杂的SQL，不容易写对，由于要映射到不同的对象中，一定程度上增加了服务器的压力。</li>
</ol>
<h3 id="1-2-使用resultMap配置一对一映射查询"><a href="#1-2-使用resultMap配置一对一映射查询" class="headerlink" title="1.2 使用resultMap配置一对一映射查询"></a>1.2 使用resultMap配置一对一映射查询</h3><h4 id="1-2-1-具体应用过程"><a href="#1-2-1-具体应用过程" class="headerlink" title="1.2.1 具体应用过程"></a>1.2.1 具体应用过程</h4><p> 我们在1.1中使用的方法是直接在<strong>select标签中</strong>直接写后<strong>自动映射</strong>到实体类，<strong>resultType</strong>返回类型是一个实体类。还有一种方法是在xml文件中的<code>resultMap</code>标签配置关系，然后再在select的<strong>resultType</strong>指定返回resultMap。详细如图所示：<br> <img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556029543657.png" alt="enter description here"><br> <strong>property</strong>是实体类字段名，<strong>colum</strong>是数据库字段名。此处<strong>resultMap</strong>这个标签是定义了一种<strong>映射关系集合</strong>,这个集合的类型对应实体类User,所以<code>resultMap</code><strong>type</strong>指定了一个实体类。同样我们在property中仍可以使用<strong>别名</strong>.字段的方法，同1.1。<br> 那么我们来看，<strong>select语句</strong>是怎么写的。<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556034087529.png" alt="enter description here"></p>
<h4 id="1-2-2-注意事项"><a href="#1-2-2-注意事项" class="headerlink" title="1.2.2 注意事项"></a>1.2.2 注意事项</h4><p> <strong>注意</strong>的是：去掉了数据库字段，直接用实体类属性查询。至于那个<strong>别名问题</strong>，暂时还没有想到会出现的场景，只需记住若是<strong>使用别名****别名和resultMap的column一致</strong>。</p>
<h4 id="1-2-3-简化写法"><a href="#1-2-3-简化写法" class="headerlink" title="1.2.3 简化写法"></a>1.2.3 简化写法</h4><p> 首先我们看这张图<br> <img src="./images/1556032048245.png" alt="enter description here"><br> 在实际的场景中我们一般会单独为user写一个映射文件（这个映射文件通常是自动生成工具生成的）里面，resultMap会写成如图所示。这时候，我们要加一个嵌套查询的方法，那么resultMap需要添加一个？这时候我们要在写一个，如1.2.1图，我们会发现有好多重复的内容。如下图所示。<br> <img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556032298389.png" alt="enter description here"><br> 这个时候，我们引入一种<strong>继承（增加extend属性）</strong>机制。改成如下图所示。<br> <img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556032428397.png" alt="enter description here"></p>
<h3 id="1-3-使用resultMap的association标签配置一对一映射"><a href="#1-3-使用resultMap的association标签配置一对一映射" class="headerlink" title="1.3 使用resultMap的association标签配置一对一映射"></a>1.3 使用resultMap的association标签配置一对一映射</h3><p> <img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556032883601.png" alt="enter description here"></p>
<ul>
<li>在这里我们使用了association那么<strong>property</strong>中就直接写<strong>属性名</strong>就可以。</li>
<li>这里我们配置了<strong>列的前缀</strong>，则在<strong>Column</strong>就可以省略，但是<strong>select</strong>就要更改如下。<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556034409791.png" alt="enter description here"></li>
<li>关于<strong>association标签</strong>的<strong>resultMap</strong>属性应用场景<br>我们可以把角色的关联单独拿出来。<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556034559072.png" alt="enter description here"><br>把这部分单独放到一个resultMap标签中，然后直接代用即可。<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556034734781.png" alt="enter description here"><ul>
<li>注意事项</li>
<li>同xml可以使用ID，不在同一xml用全类名+ID如上图。</li>
</ul>
</li>
</ul>
<h3 id="1-4-association标签嵌套查询（懒加载）"><a href="#1-4-association标签嵌套查询（懒加载）" class="headerlink" title="1.4 association标签嵌套查询（懒加载）"></a>1.4 association标签嵌套查询（懒加载）</h3><blockquote>
<p>此处我们假设场景是新的，用户和博客存在一对一关系，按照数据库设计的基本原理，我们再user中设置外键指向blog表，对应实体类就是user类中增加Blog类型的blog属性。</p>
</blockquote>
<h4 id="1-4-1-与前1-1-1-3三种方式的区别"><a href="#1-4-1-与前1-1-1-3三种方式的区别" class="headerlink" title="1.4.1 与前1.1-1.3三种方式的区别"></a>1.4.1 与前1.1-1.3三种方式的区别</h4><ul>
<li>前三种方式都是复杂查询</li>
<li>前三种方式都是一次性复杂查询，映射到不同的对象中。</li>
<li>此种方法可以理解为简单查询，后再根据业务逻辑手动查询关联对象，所以出现了急速加载和懒加载的概念。</li>
</ul>
<h4 id="1-4-2-具体实例"><a href="#1-4-2-具体实例" class="headerlink" title="1.4.2 具体实例"></a>1.4.2 具体实例</h4><p><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556036487697.png" alt="enter description here"><br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556036569145.png" alt="enter description here"><br>association中的属性介绍</p>
<ul>
<li>select：从查询ID</li>
<li>column:从查询入参=主查询字段名，见图。可以包含多个用{查询入参=主查询字段名，….}</li>
<li>fetchType:数据加载方式</li>
</ul>
<p>查询语句执行顺序</p>
<ul>
<li>执行主查询-&gt;执行从查询</li>
<li>先查出用户，然后根据用户中的blogId去执行从查询，依次轮流有多少用户查多少次主查询-&gt;从查询，主查询-&gt;从查询，主查询-&gt;从查询，主查询-&gt;从查询……</li>
</ul>
<p>存在问题</p>
<ul>
<li>如果我们查出来从查询的数据，即博客，这个数据并没有用呢？</li>
<li>如果我们用户查询主查询用户有N个，则需要执行N次查询，每次主查询会再查询依次从查询，则会出现N+1的问题。（其实就是eager加载问题对比JPA）</li>
</ul>
<p>解决方法</p>
<ul>
<li>增加fetchtype属性设定为eager,这样只有我们在getBlog()方法才会执行从查询。<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556037434889.png" alt="enter description here"><br>我们观察运行结果，会出现从查询依旧会被执行，而不是再调用getBlog方法才执行。</li>
</ul>
<p><strong>原因及解决方法</strong> ：在mybatis<strong>全局配置</strong>中有一个属性aggressive-lazy-loading: false，这个参数默认为true,即如果为true,不管你是否设置lazy都会全部加载。<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556037950485.png" alt="enter description here"></p>
<ul>
<li>懒加载注意事项<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556038114144.png" alt="enter description here"></li>
<li>当我们设置好aggressive-lazy-loading: false，我们如果想进行从查询呢？<br><img src="https://github.com/QuinnTian/ProNote/raw/master/Mybatis/images/1556038197090.png" alt="enter description here"></li>
</ul>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx启动、停止和重启方法.md</title>
    <url>/2018/07/21/Nginx/Nginx%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E5%92%8C%E9%87%8D%E5%90%AF%E6%96%B9%E6%B3%95.md-2019102314153884055/</url>
    <content><![CDATA[<p>title: Nginx启动、停止和重启方法<br>date: ‘2018-07-21 12:31:39’<br>updated: ‘2018-07-22 11:09:41’<br>tags: [Nginx]<br>permalink: /articles/2018/07/21/1532147499209.html</p>
<hr>
<h1 id="Nginx启动命令"><a href="#Nginx启动命令" class="headerlink" title="Nginx启动命令"></a>Nginx启动命令</h1><ul>
<li><code>Nginx安装目录 -c nginx</code><h1 id="Nginx停止命令"><a href="#Nginx停止命令" class="headerlink" title="Nginx停止命令"></a>Nginx停止命令</h1></li>
</ul>
<ol>
<li>查看进程号 <code>ps -ef|grep nginx</code>  含有master的为该进程</li>
<li>杀死进程 <code>kill -quit</code> 进程号(或<code>kill -term</code>或<code>kill -int</code>或<code>pkill-9</code>)<h1 id="Nginx重启命令"><a href="#Nginx重启命令" class="headerlink" title="Nginx重启命令"></a>Nginx重启命令</h1></li>
<li>进入Nginx安装目录下sbin/下</li>
<li>验证配置文件是否正确 <code>./nginx -t</code> 或<code>nginx -t -c</code></li>
<li><code>./nginx -s reload</code>或查看进程号 <code>kill -hup</code> 进程号</li>
</ol>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx转发请求到新域名同时不改变URL</title>
    <url>/2021/02/22/Nginx/Nginx%E8%BD%AC%E5%8F%91%E8%AF%B7%E6%B1%82%E5%88%B0%E6%96%B0%E5%9F%9F%E5%90%8D%E5%90%8C%E6%97%B6%E4%B8%8D%E6%94%B9%E5%8F%98URL-nginx-zhuan-fa-qing-qiu-dao-xin-yu-ming-tong-shi-bu-gai-bian-url/</url>
    <content><![CDATA[<p>将请求路径<a href="https://kevin.com/data/test%E8%B7%B3%E8%BD%AC%E5%88%B0https://rubao.com/data/test/test.html%E9%A1%B5%E9%9D%A2%E3%80%82">https://kevin.com/data/test跳转到https://rubao.com/data/test/test.html页面。</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  kevin.com;</span><br><span class="line">    access_log  /data/nginx/logs/kevin.com-access.log main;</span><br><span class="line">    error_log  /data/nginx/logs/kevin.com-error.log;</span><br><span class="line">  </span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /data/nginx/ssl/kevin.com.crt;</span><br><span class="line">    ssl_certificate_key /data/nginx/ssl/kevin.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">  </span><br><span class="line">    location = /data/test &#123;</span><br><span class="line">        rewrite /data/test /data/test/test.html break;</span><br><span class="line">        proxy_pass https://rubao.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">将访问172.16.60.16:8082/m2/order/secretRecording的请求跳转到172.16.60.28:8089/order/secretRecording</span><br><span class="line">```xml</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  kevin.com;</span><br><span class="line">    access_log  /data/nginx/logs/kevin.com-access.log main;</span><br><span class="line">    error_log  /data/nginx/logs/kevin.com-error.log;</span><br><span class="line">  </span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /data/nginx/ssl/kevin.com.crt;</span><br><span class="line">    ssl_certificate_key /data/nginx/ssl/kevin.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">  </span><br><span class="line">    location = /data/test &#123;</span><br><span class="line">        rewrite /data/test /data/test/test.html break;</span><br><span class="line">        proxy_pass https://rubao.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;　</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx配置反向代理、配置SSL证书、配置http跳转到https、www跳转到主域名参考配置</title>
    <url>/2021/02/24/Nginx/Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E3%80%81%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6%E3%80%81%E9%85%8D%E7%BD%AEhttp%E8%B7%B3%E8%BD%AC%E5%88%B0https%E3%80%81www%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%BB%E5%9F%9F%E5%90%8D%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-nginx-pei-zhi-fan-xiang-dai-li--pei-zhi-ssl-zheng-shu--pei-zhi-http-tiao-zhuan-dao-httpswww-tiao-zhuan-dao-zhu-yu-ming-can-kao-pei-zhi/</url>
    <content><![CDATA[<p>以下配置文件如下功能</p>
<ol>
<li>配置反向代理</li>
<li>配置http跳转从https</li>
<li>配置ssl证书</li>
<li>监听80和443端口</li>
<li>配置www跳转至主域名<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">	server_tokens  off;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">	</span><br><span class="line">	#反向代理1</span><br><span class="line">	upstream server1&#123;</span><br><span class="line">						</span><br><span class="line">                server 127.0.0.1:1001;# 本地服务端口1，可以设置多个</span><br><span class="line">	&#125;</span><br><span class="line">	#监听域名和 80端口并强制跳转ssl</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;# 端口号</span><br><span class="line">        server_name  a.com;# 你的域名</span><br><span class="line">		rewrite ^(.*)$ https://$host$1  permanent; # 重写成https</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">	server &#123;</span><br><span class="line">        listen       80; </span><br><span class="line">        server_name  b.com;# 你的域名</span><br><span class="line">		rewrite ^(.*)$ https://$host$1  permanent; # 重写成https</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    # 监听443端口</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  a.com;a.com</span><br><span class="line"></span><br><span class="line">        ssl_certificate      a.crt;# crt文件存放的地址</span><br><span class="line">        ssl_certificate_key  a.key;# key文件存放的地址</span><br><span class="line"></span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">             proxy_pass http://server1;#配置反向代理，与前面的upstream server1对应</span><br><span class="line">        	 proxy_set_header Host $host; # 转发host值</span><br><span class="line">        	 proxy_set_header X-Real-IP $remote_addr; # 转发真实IP</span><br><span class="line">             proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">        	 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  www.a.com;</span><br><span class="line">		   # 配置crt和key文件路径</span><br><span class="line">        ssl_certificate      .crt;</span><br><span class="line">        ssl_certificate_key  .key;</span><br><span class="line"></span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line">		</span><br><span class="line">		# 配置www跳转到主域名，如果你配置了www</span><br><span class="line">		location / &#123;</span><br><span class="line">			rewrite  ^/(.*)$  https://quinntian.com/$1 permanent;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx配置域名以及映射内网不同端口.md</title>
    <url>/2018/07/21/Nginx/Nginx%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A%E6%98%A0%E5%B0%84%E5%86%85%E7%BD%91%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3.md-2019102314153869473/</url>
    <content><![CDATA[<p>title: Nginx配置域名以及映射内网不同端口<br>date: ‘2018-07-21 12:14:32’<br>updated: ‘2018-07-21 12:15:48’<br>tags: [Nginx]<br>permalink: /articles/2018/07/21/1532146471914.html</p>
<hr>
<p><strong>Nginx.conf</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tomcat1&#123;</span><br><span class="line">	<span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> tomcat2&#123;</span><br><span class="line">               <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span>     <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span>  abc.com;</span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">	</span><br><span class="line">	 <span class="attribute">proxy_pass</span> http://tomcat2;</span><br><span class="line">       	 <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">       	 <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">       	 <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span> abcd.com abcdef.com;</span><br><span class="line">	<span class="comment">#	root /rest_html/;</span></span><br><span class="line">	<span class="comment">#	index index.html;</span></span><br><span class="line">       <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> / &#123;</span><br><span class="line">          <span class="comment"># root   html;</span></span><br><span class="line">          <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">	   <span class="comment">#域名www.test1.com的请求全部转发到tomcat_server1即tomcat1服务上  </span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://tomcat1; </span><br><span class="line">   	 <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx配置过滤websockt类型请求同时转发请求保持URL不变</title>
    <url>/2021/02/20/Nginx/Nginx%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4websockt%E7%B1%BB%E5%9E%8B%E8%AF%B7%E6%B1%82%E5%90%8C%E6%97%B6%E8%BD%AC%E5%8F%91%E8%AF%B7%E6%B1%82%E4%BF%9D%E6%8C%81URL%E4%B8%8D%E5%8F%98-nginx-pei-zhi-guo-lv-websockt-lei-xing-qing-qiu-tong-shi-zhuan-fa-qing-qiu-bao-chi-url-bu-bian/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>指定url并过滤websocket请求，把不符合的请求转发到其他服务器处理，<br>同时保持域名不变，符合的交给本地10802处理。</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>访问<a href="https://a.b.com/url%E8%87%AA%E5%8A%A8%E5%B0%86%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E7%BB%99https://c.com%EF%BC%8C">https://a.b.com/url自动将请求转发给https://c.com，</a><br>此时域名保持不变。<br>如果有websocket类型的流量自动走本地端口1080。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...父节点及其他非必要内容省略</span><br><span class="line">	 location /url &#123; </span><br><span class="line">			set $cnt keep-live;#配置连接类型</span><br><span class="line">			if ($http_upgrade != &quot;websocket&quot;) &#123; # WebSocket协商失败时返回404</span><br><span class="line">				</span><br><span class="line">				rewrite /url / break;#重写url为/，因为最后地址是根域名</span><br><span class="line">				proxy_pass https://c.com;</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			if ($http_upgrade = &quot;websocket&quot;) &#123; # 符合交给10802处理</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				proxy_pass http://127.0.0.1:1802;</span><br><span class="line">				set $cnt upgrade;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			proxy_http_version 1.1;#设置http版本</span><br><span class="line">			proxy_set_header Upgrade $http_upgrade; #设置upgrad类型</span><br><span class="line">			proxy_set_header Connection cnt;#设置header类型</span><br><span class="line">			proxy_set_header Host quinntian.com;#此处不要用$host否则无法跳转，因为$host获取的是当前域名会导致无法跳转</span><br><span class="line">			# Show real IP </span><br><span class="line">			proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>变量cnt用于指定upgrade，下面是实际走websockt的值<br>proxy_set_header Upgrade websocket;<br>proxy_set_header Connection upgrade;<br>为什么websocket在header中使用这两个字段参考<br><a href=":/6c78328e815845fa9f648b8feb1baf09">为什么HTTP Upgrade的时候，需要Connection: upgrade - Robert的博客</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>如何解决Nginx反向代理Cloudflare报502和503错误</title>
    <url>/2021/02/22/Nginx/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86Cloudflare%E6%8A%A5502%E5%92%8C503%E9%94%99%E8%AF%AF-ru-he-jie-jue-nginx-fan-xiang-dai-li-cloudflare-bao-502-he-503-cuo-wu/</url>
    <content><![CDATA[<p>HTTPS<br>刚开始反向代理Cloudflare的HTTPS站点时不是502就是403把我头的搞大了，网络上各种复制粘贴的文章都看吐了 Nginx反向代理Cloudflare出现502,403解决办法插图<br>首先源站配置好SSL证书，然后去Cloudflare开启SSL（默认开启）<br>Cloudflare<br>Cloudflare<br>如果源站没有开启强制跳转HTTPS可以在Cloudlfare开启跳转<br>CloudflareCloudflare<br>接下来就是反向代理配置了（有坑）<br>删库塔配置删库塔配置<br>如果你直接将HTTP改成HTTPS，恭喜你，喜提502<br>502502<br>然后网上的给的解决办法五花八门，真真假假假假真真，实践才能辩真假。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">proxy_ssl_name $host;</span><br><span class="line">proxy_ssl_server_name on;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>网上说是将以上配置放进反向代理配置内即可。<br>删库塔配置</p>
<p>删库塔配置<br>结果还是502<br>将这段代码放进location所有区块内。<br>删库塔配置删库塔配置<br>结果还是502<br>其实代码本身没问题，只是有小瑕疵</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_ssl_name 你反向代理的域名;</span><br><span class="line">proxy_ssl_server_name on;</span><br></pre></td></tr></table></figure>
<p>改成这样即可反代成功。<br>反代成功</p>
<p>反代成功<br>切记：如果反代机没有IPv6而你又解析了Cloudflare的CNAME，会导致无法连接上游的问题。建议自选IPv4接入，或者关闭反代机的IPv6。还有一个办法就是使用hosts强指IPv4。</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>python中if用法</title>
    <url>/2021/03/01/Python/python%E4%B8%ADif%E7%94%A8%E6%B3%95-python-zhong-if-yong-fa/</url>
    <content><![CDATA[<p>case1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if判断</span></span><br><span class="line">cars = [<span class="string">&#x27;car1&#x27;</span>, <span class="string">&#x27;car2&#x27;</span>, <span class="string">&#x27;car3&#x27;</span>, <span class="string">&#x27;car4&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;car1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(c.upper())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(c.title())</span><br></pre></td></tr></table></figure>

<h1 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1.基本格式"></a>1.基本格式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">	执行代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	执行代码</span><br></pre></td></tr></table></figure>
<h1 id="2-条件测试"><a href="#2-条件测试" class="headerlink" title="2.条件测试"></a>2.条件测试</h1><h2 id="2-1-检查两个值是否相等输出"><a href="#2-1-检查两个值是否相等输出" class="headerlink" title="2.1.检查两个值是否相等输出"></a>2.1.检查两个值是否相等输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查值</span></span><br><span class="line">car1 = <span class="string">&#x27;audi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(car1 == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(car1 == <span class="string">&#x27;audi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-区分大小写，如何忽略大小写"><a href="#2-2-区分大小写，如何忽略大小写" class="headerlink" title="2.2.==区分大小写，如何忽略大小写"></a>2.2.==区分大小写，如何忽略大小写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不区分大小写的方法，用转换函数</span></span><br><span class="line">car2 = <span class="string">&#x27;audi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(car2 == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(car2.lower() == <span class="string">&#x27;auDI&#x27;</span>.lower())</span><br><span class="line"><span class="built_in">print</span>(car2)</span><br><span class="line"><span class="comment"># 转换函数不会改变原来变量的大小写</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-and、or"><a href="#2-3-and、or" class="headerlink" title="2.3.and、or"></a>2.3.and、or</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age1 = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age2 = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age1 &lt; <span class="number">0</span> <span class="keyword">and</span> age2 ==<span class="number">1</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age1 == <span class="number">0</span> <span class="keyword">or</span> age2 == <span class="number">0</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-检查特定值在列表中in和not-in"><a href="#2-4-检查特定值在列表中in和not-in" class="headerlink" title="2.4.检查特定值在列表中in和not in"></a>2.4.检查特定值在列表中in和not in</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;b&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h1 id="3-if的多种格式"><a href="#3-if的多种格式" class="headerlink" title="3.if的多种格式"></a>3.if的多种格式</h1><p>1.单个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">	代码</span><br></pre></td></tr></table></figure>
<p>2.<code>if else</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conditon:</span><br><span class="line">	代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	代码</span><br></pre></td></tr></table></figure>
<p>3.<code>if elif else</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conditon:</span><br><span class="line">	代码</span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">	代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	代码</span><br></pre></td></tr></table></figure>
<p>4.<code>if elif elif</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conditon:</span><br><span class="line">	代码</span><br><span class="line"><span class="keyword">elif</span> condition:</span><br><span class="line">	代码</span><br><span class="line"><span class="keyword">elif</span> condition:</span><br><span class="line">	代码</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python中输入函数和while循环</title>
    <url>/2021/03/01/Python/python%E4%B8%AD%E8%BE%93%E5%85%A5%E5%87%BD%E6%95%B0%E5%92%8Cwhile%E5%BE%AA%E7%8E%AF-python-zhong-shu-ru-han-shu-he-while-xun-huan/</url>
    <content><![CDATA[<h1 id="1-输入"><a href="#1-输入" class="headerlink" title="1.输入"></a>1.输入</h1><ol>
<li>输入函数<code>input(&#39;需要提示的东西&#39;)</code></li>
</ol>
<ul>
<li>该函数读取后是以字符串读取<br>case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户输入</span></span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;please input more sth:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">please <span class="built_in">input</span> more sth：你好</span><br><span class="line">你好</span><br></pre></td></tr></table></figure>
case2<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示输入</span></span><br><span class="line">tip1 = <span class="string">&#x27;如果你能看见&#x27;</span></span><br><span class="line">tip2 = <span class="string">&#x27;\n请告诉我名字：&#x27;</span></span><br><span class="line">message1 = <span class="built_in">input</span>(tip1 + <span class="string">&#x27;,&#x27;</span> + tip2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你的名字：&#x27;</span> + message1)</span><br><span class="line"></span><br><span class="line">如果你能看见,</span><br><span class="line">请告诉我名字：tom</span><br><span class="line">你的名字：tom</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>读取数值</li>
</ol>
<ul>
<li>input函数读取后存储形式是字符串</li>
<li>可以使用int函数转换成数值<br>case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取数值</span></span><br><span class="line">message3 = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个数：&#x27;</span>)</span><br><span class="line">message3 = <span class="built_in">int</span>(message3)</span><br><span class="line"><span class="built_in">print</span>(message3)</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>求模运算符<br><code>%表示求余数</code></li>
<li>python2中的输入<br><code>使用raw_input而不是input</code><br>因为在2中input的表示输入的会解读成python代码<h1 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2.while循环"></a>2.while循环</h1>基本格式<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">	执行代码</span><br></pre></td></tr></table></figure>
case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
case2<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让用户选择什么时候推出</span></span><br><span class="line"></span><br><span class="line">tip = <span class="string">&#x27;请输入一个数：&#x27;</span></span><br><span class="line">message = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">    message = <span class="built_in">input</span>(tip)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">&#x27;exit&#x27;</span>:<span class="comment"># 隐藏exit输出</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">	</span><br><span class="line">请输入一个数：<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">请输入一个数：<span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">请输入一个数：exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<h1 id="3-break"><a href="#3-break" class="headerlink" title="3.break"></a>3.break</h1>立刻退出循环，不再执行while后面的循环<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># break</span></span><br><span class="line">tip1 = <span class="string">&#x27;请输入你去过的城市：&#x27;</span></span><br><span class="line">message = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        message = <span class="built_in">input</span>(tip1)</span><br><span class="line">		</span><br><span class="line">请输入一个数：exit</span><br><span class="line">请输入你去过的城市：厦门</span><br><span class="line">请输入你去过的城市：exit</span><br></pre></td></tr></table></figure>
<h1 id="4-continue"><a href="#4-continue" class="headerlink" title="4.continue"></a>4.continue</h1>跳出这一次的循环进入下一个循环<br>case1 输出奇数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>:</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> current_number % <span class="number">2</span> ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="5-while在列表中的用法"><a href="#5-while在列表中的用法" class="headerlink" title="5.while在列表中的用法"></a>5.while在列表中的用法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 已有列表名:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
表示只有列表中有0个元素才会终止循环</li>
</ol>
<p>移除列表中所有含特定值的元素，因为remove只会删除第一个出现的元素<a href=":/b133d04ac4bc461fbd6111e587965296">006-列表</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移除列表中所有含特定值的元素</span></span><br><span class="line">list1 = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;one&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;one&#x27;</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>
<h1 id="5-while在字典中用法"><a href="#5-while在字典中用法" class="headerlink" title="5.while在字典中用法"></a>5.while在字典中用法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while填充字典</span></span><br><span class="line"></span><br><span class="line">dist = &#123;&#125;</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&#x27;请输入名字：&#x27;</span>)</span><br><span class="line">    val = <span class="built_in">input</span>(<span class="string">&#x27;请输出籍贯：&#x27;</span>)</span><br><span class="line">    repeat = <span class="built_in">input</span>(<span class="string">&#x27;是否还有要调查的人呢？yse or no&#x27;</span>)</span><br><span class="line">    dist[key] = val</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dist)</span><br><span class="line"></span><br><span class="line">请输入名字：xiaoming</span><br><span class="line">请输出籍贯：sd</span><br><span class="line">是否还有要调查的人呢？yse <span class="keyword">or</span> noyes</span><br><span class="line">请输入名字：xiaohong</span><br><span class="line">请输出籍贯：qingdao</span><br><span class="line">是否还有要调查的人呢？yse <span class="keyword">or</span> nono</span><br><span class="line">&#123;<span class="string">&#x27;xiaoming&#x27;</span>: <span class="string">&#x27;sd&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>: <span class="string">&#x27;qingdao&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python元组用法</title>
    <url>/2021/02/27/Python/python%E5%85%83%E7%BB%84%E7%94%A8%E6%B3%95-python-yuan-zu-zong-jie/</url>
    <content><![CDATA[<h1 id="1-元组与列表"><a href="#1-元组与列表" class="headerlink" title="1.元组与列表"></a>1.元组与列表</h1><ol>
<li>列表可以修改，<strong>元组不可以修改</strong></li>
<li>列表用[],元组用()</li>
<li>都是有序的</li>
<li>元组的关键字couple</li>
<li>访问元组与访问列表的方式一样<h1 id="2-定义元组"><a href="#2-定义元组" class="headerlink" title="2.定义元组"></a>2.定义元组</h1>定义<code>元组名=（....,....）</code>访问<code>元组名[index]</code><br>case1:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一组元组表示长方形的长和宽，其值应该是不变的</span></span><br><span class="line">demensions = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(demensions)</span><br><span class="line"><span class="comment"># 索引访问</span></span><br><span class="line"><span class="built_in">print</span>(demensions[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
试图修改元组值<br>case2<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">demensions[<span class="number">0</span>] = <span class="number">40</span></span><br><span class="line"><span class="built_in">print</span>(demensions)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Traceback (most recent call last):<br>File “C:\Users\Quinn\PycharmProjects\pythonProject\couple1.py”, line 8, in <module><br> demensions[0] = 40<br>TypeError: ‘tuple’ object does not support item assignment</p>
</blockquote>
</li>
</ol>
<h1 id="3-遍历元组中的值"><a href="#3-遍历元组中的值" class="headerlink" title="3.遍历元组中的值"></a>3.遍历元组中的值</h1><p>case1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">couple2 = (<span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> couple2:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<h1 id="4-元组重新赋值"><a href="#4-元组重新赋值" class="headerlink" title="4.元组重新赋值"></a>4.元组重新赋值</h1><p>对于整个元组重新赋值是合法的，但是修改元组中的某个值不合法<br>case</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元组重新赋值</span></span><br><span class="line">couple3 = (<span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(couple3)</span><br><span class="line">couple3 =(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(couple3)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(2, 7, 3, 4, 19)<br>(2, 1)</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python函数用法</title>
    <url>/2021/03/02/Python/python%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95-python-han-shu-yong-fa/</url>
    <content><![CDATA[<h1 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1.基本格式"></a>1.基本格式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单问候语&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">greet_user()<span class="comment"># 函数调用</span></span><br></pre></td></tr></table></figure>
<ol>
<li>关键字def</li>
<li>不要忘记括号</li>
<li>不要忘记冒号</li>
<li>不要忘记缩进</li>
</ol>
<h1 id="2-传递参数"><a href="#2-传递参数" class="headerlink" title="2.传递参数"></a>2.传递参数</h1><p>case1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user2</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello:&#x27;</span>+username.title())</span><br><span class="line"></span><br><span class="line">greet_user2(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hello:Xiaoming</span><br></pre></td></tr></table></figure>
<h1 id="3-形参和实参"><a href="#3-形参和实参" class="headerlink" title="3.形参和实参"></a>3.形参和实参</h1><ol>
<li>函数中定义的参数形参</li>
<li>调用的时候穿的参数实参数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user3</span>(<span class="params">username, age</span>):</span> <span class="comment"># 形参</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;your name is :&#x27;</span>+ username+<span class="string">&#x27;and age is:&#x27;</span>+<span class="built_in">str</span>(age))</span><br><span class="line"></span><br><span class="line">greet_user3(<span class="string">&#x27;xiaohong&#x27;</span>, <span class="number">18</span>) <span class="comment"># 实参</span></span><br></pre></td></tr></table></figure>
<h1 id="4-位置实参"><a href="#4-位置实参" class="headerlink" title="4.位置实参"></a>4.位置实参</h1>实参与形参根据位置排列传递<br>case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc_pet</span>(<span class="params">animal_type, petName</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;animal type is :&#x27;</span>+ animal_type + <span class="string">&quot;, name is :&quot;</span>+ petName)</span><br><span class="line"></span><br><span class="line">desc_pet(<span class="string">&quot;dog&quot;</span>,<span class="string">&#x27;小柴&#x27;</span>)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">animal <span class="built_in">type</span> <span class="keyword">is</span> :dog, name <span class="keyword">is</span> :小柴</span><br></pre></td></tr></table></figure>
<h1 id="5-关键字实参"><a href="#5-关键字实参" class="headerlink" title="5.关键字实参"></a>5.关键字实参</h1></li>
</ol>
<ul>
<li>调用时直接使用形参名称传值<br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc_pet2</span>(<span class="params">animal_type, pet_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;animal type is :&#x27;</span> + animal_type + <span class="string">&quot;, name is :&quot;</span> + pet_name)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">desc_pet2(animal_type=<span class="string">&#x27;cat&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="6-默认值"><a href="#6-默认值" class="headerlink" title="6.默认值"></a>6.默认值</h1></li>
<li>是指形参中的默认值</li>
<li>指定后可以在调用时不必传值</li>
<li><strong>无默认值的形参要放在前面，带默认值要放在后面，否则报错not default value，原因是实参仍然会把第一个当做位置实参</strong><br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 形参默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc_pet3</span>(<span class="params">pet_name, animal_type= <span class="string">&#x27;dog&#x27;</span> </span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;animal type is :&#x27;</span> + animal_type + <span class="string">&quot;, name is :&quot;</span> + pet_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">desc_pet3(pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">animal <span class="built_in">type</span> <span class="keyword">is</span> :dog, name <span class="keyword">is</span> :harry</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="7-等效调用"><a href="#7-等效调用" class="headerlink" title="7.等效调用"></a>7.等效调用</h1></li>
<li>由于位置实参和关键字实参，因此可以混合使用，只要得到想要结果就可</li>
</ul>
<p>case</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc_pet4</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span> </span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;animal type is :&#x27;</span> + animal_type + <span class="string">&quot;, name is :&quot;</span> + pet_name)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.</span></span><br><span class="line">desc_pet4(pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"><span class="comment"># 2.</span></span><br><span class="line">desc_pet4(<span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"><span class="comment"># 二者调用方式都可</span></span><br><span class="line">desc_pet4(<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line">desc_pet4(pet_name=<span class="string">&#x27;tom&#x27;</span>, animal_type=<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">animal <span class="built_in">type</span> <span class="keyword">is</span> :dog, name <span class="keyword">is</span> :harry</span><br><span class="line">animal <span class="built_in">type</span> <span class="keyword">is</span> :dog, name <span class="keyword">is</span> :harry</span><br><span class="line">animal <span class="built_in">type</span> <span class="keyword">is</span> :cat, name <span class="keyword">is</span> :tom</span><br><span class="line">animal <span class="built_in">type</span> <span class="keyword">is</span> :cat, name <span class="keyword">is</span> :tom</span><br></pre></td></tr></table></figure>
<h1 id="8-实参错误"><a href="#8-实参错误" class="headerlink" title="8.实参错误"></a>8.实参错误</h1><ol>
<li>形参无默认值，实参无值会报错<br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实参错误</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc_pet5</span>(<span class="params">animal_type, pet_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;animal type is :&#x27;</span> + animal_type + <span class="string">&quot;, name is :&quot;</span> + pet_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">desc_pet5()</span><br><span class="line"></span><br><span class="line">报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\Users\Quinn\PycharmProjects\pythonProject\function1.py&quot;</span>, line <span class="number">62</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    desc_pet5()</span><br><span class="line">TypeError: desc_pet5() missing <span class="number">2</span> required positional arguments: <span class="string">&#x27;animal_type&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;pet_name&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="9-返回值"><a href="#9-返回值" class="headerlink" title="9.返回值"></a>9.返回值</h1>函数具有返回值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回值函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc_pet6</span>(<span class="params">animal_type, pet_name</span>):</span></span><br><span class="line">    message = <span class="string">&#x27;animal type is :&#x27;</span> + animal_type + <span class="string">&quot;, name is :&quot;</span> + pet_name</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = desc_pet6(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line">desc_pet6(message)</span><br><span class="line">输出</span><br><span class="line">animal <span class="built_in">type</span> <span class="keyword">is</span> :cat, name <span class="keyword">is</span> :tom</span><br></pre></td></tr></table></figure>
<h1 id="10-实参可选"><a href="#10-实参可选" class="headerlink" title="10.实参可选"></a>10.实参可选</h1></li>
</ol>
<ul>
<li>实参指定默认值尾空字符，``</li>
<li><strong>原因是python会识别成true，也就不会报错了</strong><br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_format_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        format_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        format_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> format_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">format_name1 = get_format_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendic&#x27;</span>)</span><br><span class="line">format_name2 = get_format_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(format_name1)</span><br><span class="line"><span class="built_in">print</span>(format_name2)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">jimi hendic</span><br><span class="line">john lee hooker</span><br></pre></td></tr></table></figure></li>
<li>如果不指定中间名有默认值，那么如果某个人没有中间名，那只传入两个参数一定会报错</li>
<li>上述指定中间值为空字符””，则if条件不执行走else，若中间名有值，那就不是空字符if通过</li>
</ul>
<h1 id="11-返回字典"><a href="#11-返回字典" class="headerlink" title="11.返回字典"></a>11.返回字典</h1><ul>
<li>可返回任何复杂数据结构，如字典、列表、元组<br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 返回字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span>(<span class="params">first_name, last_name, middle_name = <span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first_name:&#x27;</span>: first_name, <span class="string">&#x27;last_name&#x27;</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        person[<span class="string">&#x27;middle_name:&#x27;</span>] = middle_name</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person1 = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendic&#x27;</span>)</span><br><span class="line">person2 = build_person(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(person1)</span><br><span class="line"><span class="built_in">print</span>(person2)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&#123;<span class="string">&#x27;first_name:&#x27;</span>: <span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;hendic&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;first_name:&#x27;</span>: <span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;middle_name:&#x27;</span>: <span class="string">&#x27;lee&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="12-传递列表"><a href="#12-传递列表" class="headerlink" title="12.传递列表"></a>12.传递列表</h1><p>case</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 传递列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user7</span>(<span class="params">usernames</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中的每一个人问候&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> username <span class="keyword">in</span> usernames:</span><br><span class="line">        msg = <span class="string">&#x27;hello:&#x27;</span> + username</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">greet_user7([<span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>])</span><br><span class="line">运行结果</span><br><span class="line">hello:jerry</span><br><span class="line">hello:tom</span><br></pre></td></tr></table></figure>
<h1 id="13-在函数中修改列表"><a href="#13-在函数中修改列表" class="headerlink" title="13.在函数中修改列表"></a>13.在函数中修改列表</h1><ul>
<li>函数外一个列表，然后以参数传入函数内，在函数内对列表修改，也会修改外部列表，说明函数内修改列表与函数外列表是一个列表<br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在函数中传递列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_models</span>(<span class="params">unprinted_designs, completed_models</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟打印每个设计，知道没有打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移动到打印完的列表中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design1 = unprinted_designs.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D答应你模型的过成</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;printing model:&#x27;</span> + current_design1)</span><br><span class="line">        completed_models.append(current_design1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span>(<span class="params">completed_models</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示所有打印好的模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n打印好的模型有：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model1 <span class="keyword">in</span> completed_models:</span><br><span class="line">        <span class="built_in">print</span>(completed_model1)</span><br><span class="line"></span><br><span class="line">unprinted_designs1 = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;rebot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models1 =[]</span><br><span class="line">print_models(unprinted_designs1, completed_models1)</span><br><span class="line">show_completed_models(completed_models1)</span><br><span class="line"><span class="built_in">print</span>(unprinted_designs1)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">printing model:dodecahedron</span><br><span class="line">printing model:rebot pendant</span><br><span class="line">printing model:iphone case</span><br><span class="line"></span><br><span class="line">打印好的模型有：</span><br><span class="line">dodecahedron</span><br><span class="line">rebot pendant</span><br><span class="line">iphone case</span><br><span class="line">[]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="14-禁止函数修改列表"><a href="#14-禁止函数修改列表" class="headerlink" title="14.禁止函数修改列表"></a>14.禁止函数修改列表</h1><ul>
<li>外部定义的列表，作为参数传入函数内部，函数内部修改列表，也会修改外部列表，如何禁止修改？</li>
<li>将列表的副本传递进去<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表名 = [<span class="string">&#x27;case1&#x27;</span>]</span><br><span class="line">调用函数名(列表名[:])<span class="comment">#切片表示把列表副本传入</span></span><br></pre></td></tr></table></figure>
case1 使用列表副本<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表副本</span></span><br><span class="line">list1 = [<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>, <span class="string">&#x27;xiaopang&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispose_name</span>(<span class="params">names</span>):</span></span><br><span class="line">    <span class="comment"># 把所有名字全部移除</span></span><br><span class="line">    <span class="keyword">while</span> names:</span><br><span class="line">        names.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispose_name(list1[:])</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">结果</span><br><span class="line">[<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>, <span class="string">&#x27;xiaopang&#x27;</span>]</span><br></pre></td></tr></table></figure>
case2 直接传入列表<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispose_name</span>(<span class="params">names</span>):</span></span><br><span class="line">    <span class="comment"># 把所有名字全部移除</span></span><br><span class="line">    <span class="keyword">while</span> names:</span><br><span class="line">        names.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispose_name(list1)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="15-传递任何数量实参"><a href="#15-传递任何数量实参" class="headerlink" title="15.传递任何数量实参"></a>15.传递任何数量实参</h1><p><code>def 函数名(*形参名)</code></p>
<ul>
<li><code>*形参名</code>表示创建了一个<strong>空元组</strong>，把所有的实参都放进里面了</li>
<li>case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 传递任何数量的实参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">*toppings</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印顾客点的所有配两&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(toppings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">&#x27;配料1&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;配料2&#x27;</span>, <span class="string">&#x27;配料2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">(<span class="string">&#x27;配料1&#x27;</span>,)</span><br><span class="line">(<span class="string">&#x27;配料2&#x27;</span>, <span class="string">&#x27;配料2&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="16-位置实参-任意数量实参"><a href="#16-位置实参-任意数量实参" class="headerlink" title="16.位置实参+任意数量实参"></a>16.位置实参+任意数量实参</h1><p>要混合使用注意</p>
<ol>
<li>任意数量实参永远放在最后</li>
<li>python会首先匹配位置实参和关键字实参，最后才是任意数量实参<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 任意位置实参+位置实参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza2</span>(<span class="params">size, *toppings</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印顾客点的所有配两&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nMaking a &#x27;</span> + <span class="built_in">str</span>(size) + <span class="string">&#x27;-寸 pizza ,有以下配料：&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;- &#x27;</span> + topping)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make_pizza2(<span class="number">16</span>, <span class="string">&#x27;配料1&#x27;</span>)</span><br><span class="line">make_pizza2(<span class="number">15</span>, <span class="string">&#x27;配料2&#x27;</span>, <span class="string">&#x27;配料2&#x27;</span>)</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">Making a <span class="number">16</span>-寸 pizza ,有以下配料：</span><br><span class="line">- 配料<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Making a <span class="number">15</span>-寸 pizza ,有以下配料：</span><br><span class="line">- 配料<span class="number">2</span></span><br><span class="line">- 配料<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h1 id="17-函数存储在存储块中"><a href="#17-函数存储在存储块中" class="headerlink" title="17.函数存储在存储块中"></a>17.函数存储在存储块中</h1>把函数分离单独存储在<code>模块中</code>，用的时候在<code>导入</code></li>
<li>创建模块<br>把要存储函数直接放到一个<code>.py</code>文件中<br>case 存储在model.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza2</span>(<span class="params">size, *toppings</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印顾客点的所有配两&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nMaking a &#x27;</span> + <span class="built_in">str</span>(size) + <span class="string">&#x27;-寸 pizza ,有以下配料：&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;- &#x27;</span> + topping)</span><br></pre></td></tr></table></figure></li>
<li>导入模块<br>创建一个import.py<br>语法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"></span><br><span class="line">模块名.方法名()</span><br></pre></td></tr></table></figure>
case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> model</span><br><span class="line"></span><br><span class="line">model.make_pizza2(<span class="number">16</span>, <span class="string">&#x27;配料1&#x27;</span>)</span><br><span class="line">model.make_pizza2(<span class="number">15</span>, <span class="string">&#x27;配料2&#x27;</span>, <span class="string">&#x27;配料2&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="18-导入特定函数"><a href="#18-导入特定函数" class="headerlink" title="18.导入特定函数"></a>18.导入特定函数</h1><p><code>from 模块名(文件名) import 函数名[,函数2,函数3]</code></p>
<ul>
<li>[]不算</li>
<li>多个函数用逗号分隔</li>
<li><strong>用的时候直接写函数名，不需要模块名.函数名（）</strong><br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> make_pizza2</span><br><span class="line"></span><br><span class="line">make_pizza2(<span class="number">16</span>, <span class="string">&#x27;配料1&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><strong>指定函数别名</strong>使用<code>from 模块名 import 函数名 as 别名</code><br>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> make_pizza2 <span class="keyword">as</span> pz</span><br><span class="line"></span><br><span class="line">pz(<span class="number">16</span>, <span class="string">&#x27;配料1&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><ul>
<li><strong>指定模块别名</strong><code>import 模块名 as 模块别名</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> model <span class="keyword">as</span> m</span><br><span class="line"></span><br><span class="line">m.make_pizza2(<span class="number">16</span>, <span class="string">&#x27;配料1&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>导入模块中所有函数</strong><code>from 模块名 import *</code><strong>此时使用模块中的函数不在需要使用模块名.函数名了，直接使用（不推荐用法）</strong></li>
</ul>
<h1 id="19-函数编写指南"><a href="#19-函数编写指南" class="headerlink" title="19.函数编写指南"></a>19.函数编写指南</h1><ol>
<li>函数名只用下划线和小写字母</li>
<li>注释紧跟函数定义后，采用文档注释</li>
<li>形参指定默认值=号两边不要有空格</li>
<li>关键字实参等号两边不要有空格</li>
<li>代码行长度不要超过79字符</li>
<li>若形参参数名过长可以在左括号按回车，并在下一行按两次tab后再输入形参</li>
<li>多个函数之间间隔可以用两个空行分隔</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python列表的用法</title>
    <url>/2021/02/24/Python/python%E5%88%97%E8%A1%A8%E7%9A%84%E7%94%A8%E6%B3%95-python-lie-biao-de-yong-fa/</url>
    <content><![CDATA[<h1 id="1-列表特征"><a href="#1-列表特征" class="headerlink" title="1. 列表特征"></a>1. 列表特征</h1><ol>
<li><p>用方括号声明</p>
</li>
<li><p>中间用逗号分割</p>
</li>
<li><p>有序</p>
</li>
<li><p><strong>列表是可以修改的</strong></p>
</li>
<li><p>关键字list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;canondale&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialize&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure>
<h1 id="2-访问列表中的元素"><a href="#2-访问列表中的元素" class="headerlink" title="2. 访问列表中的元素"></a>2. 访问列表中的元素</h1></li>
<li><p>语法：<code>列表名[序号]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;canondale&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialize&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">1</span>].title())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>序号问题0开始</p>
</li>
<li><p>最后一个元素可以用序号-1访问，意思倒数第一</p>
</li>
<li><p>使用列表中的元素来拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;My first bicycle is a &quot;</span> +bicycles[<span class="number">1</span>].title() + <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>
<h1 id="3-修改列表中的元素"><a href="#3-修改列表中的元素" class="headerlink" title="3. 修改列表中的元素"></a>3. 修改列表中的元素</h1><p><code>列表名[序号]=赋值</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycle = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycle)</span><br><span class="line">motorcycle[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycle)</span><br></pre></td></tr></table></figure>
<h1 id="4-在列表中添加元素"><a href="#4-在列表中添加元素" class="headerlink" title="4. 在列表中添加元素"></a>4. 在列表中添加元素</h1></li>
<li><p><code>列表名.append[&quot;值&quot;]</code>末尾添加元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycle.append(<span class="string">&quot;yadi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycle)</span><br></pre></td></tr></table></figure></li>
<li><p><code>列表名.insert[序号,&quot;值&quot;]</code>插入元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycle.insert(<span class="number">0</span>, <span class="string">&quot;aima&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycle)</span><br></pre></td></tr></table></figure>
<p>表示在0处添加元素，原来元素往后推</p>
</li>
<li><p>先创建列表，再添加元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = []</span><br><span class="line">motorcycles.append(<span class="string">&quot;yadi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="5-在列表中删除元素"><a href="#5-在列表中删除元素" class="headerlink" title="5. 在列表中删除元素"></a>5. 在列表中删除元素</h1></li>
<li><p><code>del 列表名[序号]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> motorcycle[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycle)</span><br></pre></td></tr></table></figure>
<p>删除后，后面的元素顶上来</p>
</li>
<li><p><code>列表名.pop()</code>表示弹出最后一个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycle2 = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycle2)</span><br><span class="line"><span class="comment"># 弹出的值赋值给一个变量</span></span><br><span class="line">motorcycle2_pop = motorcycle2.pop()</span><br><span class="line"><span class="built_in">print</span>(motorcycle2)</span><br><span class="line"><span class="built_in">print</span>(motorcycle2_pop)</span><br></pre></td></tr></table></figure></li>
<li><p>弹出任何一个值<code>列表名.pop(序号)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycle2 = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycle2)</span><br><span class="line">motorcycle2_pop = motorcycle2.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycle2)</span><br><span class="line"><span class="built_in">print</span>(motorcycle2_pop)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>pop和del区别<ul>
<li>都是删除</li>
<li>pop不仅可以删除还可会返回删除的值</li>
<li>如果你在删除的时候需要使用删除的值得时候可以使用pop</li>
</ul>
</li>
</ul>
<ol start="4">
<li><p>按值删除<code>列表名.remove(&quot;值&quot;)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycle3 = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">motorcycle3.remove(<span class="string">&#x27;honda&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycle3)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>删除元素同时打印删除的元素是谁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycle4 = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycle4)</span><br><span class="line">remove_name = <span class="string">&#x27;honda&#x27;</span></span><br><span class="line">motorcycle4.remove(remove_name)</span><br><span class="line"><span class="built_in">print</span>(motorcycle4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除的元素是：&quot;</span>+ remove_name)</span><br></pre></td></tr></table></figure>
<h1 id="6-排序"><a href="#6-排序" class="headerlink" title="6.排序"></a>6.排序</h1></li>
<li><p>正序和倒序<code>列表名.sort(reverse=True or False)</code></p>
</li>
</ol>
<p><strong>永久排序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;ccar1&#x27;</span>, <span class="string">&#x27;acar2&#x27;</span>, <span class="string">&#x27;ecar3&#x27;</span>, <span class="string">&#x27;fcar4&#x27;</span>]</span><br><span class="line"><span class="comment"># 永久排序</span></span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"><span class="comment"># 永久排序倒序</span></span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>临时排序<br><code>sorted(列表名,reverse=True)</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;ccar1&#x27;</span>, <span class="string">&#x27;acar2&#x27;</span>, <span class="string">&#x27;ecar3&#x27;</span>, <span class="string">&#x27;fcar4&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h1 id="7-反转列表"><a href="#7-反转列表" class="headerlink" title="7.反转列表"></a>7.反转列表</h1><code>列表名.reverse</code><br>倒过来</li>
</ol>
<p><strong>永久性</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反转列表</span></span><br><span class="line">cars3 = [<span class="string">&#x27;ccar1&#x27;</span>, <span class="string">&#x27;acar2&#x27;</span>, <span class="string">&#x27;ecar3&#x27;</span>, <span class="string">&#x27;fcar4&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars3)</span><br><span class="line">cars3.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars3)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果<br>[‘ccar1’, ‘acar2’, ‘ecar3’, ‘fcar4’]<br>[‘fcar4’, ‘ecar3’, ‘acar2’, ‘ccar1’]</p>
</blockquote>
<h1 id="8-确定长度"><a href="#8-确定长度" class="headerlink" title="8.确定长度"></a>8.确定长度</h1><p><code>len(列表名)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取列表长度</span></span><br><span class="line">cars4 = [<span class="string">&#x27;ccar1&#x27;</span>, <span class="string">&#x27;acar2&#x27;</span>, <span class="string">&#x27;ecar3&#x27;</span>, <span class="string">&#x27;fcar4&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cars4))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：4</p>
</blockquote>
<h1 id="9-常见错误"><a href="#9-常见错误" class="headerlink" title="9.常见错误"></a>9.常见错误</h1><ol>
<li><p>索引错误<br><code>列表中第三个元素的索引是2</code></p>
</li>
<li><p>如何访问最后一个元素<br><code>使用-1索引</code></p>
</li>
</ol>
<h1 id="10-遍历列表"><a href="#10-遍历列表" class="headerlink" title="10.遍历列表"></a>10.遍历列表</h1><p><code>for 项名 in 列表名:</code><br>case1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars4 = [<span class="string">&#x27;ccar1&#x27;</span>, <span class="string">&#x27;acar2&#x27;</span>, <span class="string">&#x27;ecar3&#x27;</span>, <span class="string">&#x27;fcar4&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars4:</span><br><span class="line">    <span class="built_in">print</span>(car)</span><br></pre></td></tr></table></figure>
<p>case2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用for循环打印1-20</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个列表1-1000然后打印出来</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1001</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<ul>
<li>循环体是指缩进的部分<h1 id="11-创建数值列表"><a href="#11-创建数值列表" class="headerlink" title="11.创建数值列表"></a>11.创建数值列表</h1></li>
</ul>
<ol>
<li>range函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数值列表</span></span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(car)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1<br>2<br>3<br>4</p>
</blockquote>
</li>
</ol>
<p><code>range(首，尾)其中不包含尾部</code><br>2. 利用list+range函数创建数值列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用range函数创建数值列表</span></span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[1, 2, 3, 4, 5, 6]</p>
</blockquote>
<p><code>指定步长range(开始,结束,步长)</code><br><strong>创建奇数列表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers2 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[1, 3, 5, 7, 9]</p>
</blockquote>
<p><strong>创建前10个整数的平方的列表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建前10个整数的平方列表</span></span><br><span class="line">numbers3 = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    number = n**<span class="number">2</span></span><br><span class="line">    numbers3.append(number)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers3)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建1-20的奇数列表</span></span><br><span class="line">numbers5 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers5)</span><br></pre></td></tr></table></figure>
<h1 id="12-统计运算"><a href="#12-统计运算" class="headerlink" title="12.统计运算"></a>12.统计运算</h1><p><code>sum()</code><br>case1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">digit = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">sum</span>(digit)</span><br><span class="line"><span class="built_in">max</span>(digit)</span><br><span class="line"><span class="built_in">min</span>(digit)</span><br></pre></td></tr></table></figure>
<p>case2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  计算1-10000的和</span></span><br><span class="line">number5 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10001</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(number5))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(number5))</span><br></pre></td></tr></table></figure>
<p>case3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个列表0-30 3的倍数并打印</span></span><br><span class="line">numbers6 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> numbers6:</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<h1 id="13-列表解析"><a href="#13-列表解析" class="headerlink" title="13.列表解析"></a>13.列表解析</h1><p><strong>for的简单写法</strong><br><code>列表名=[表达式 for varue in range()]</code><br>case1:生成列表前十个数的平方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表表达式生成列表</span></span><br><span class="line">nums = [number**<span class="number">2</span> <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br></pre></td></tr></table></figure>
<p>case2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建前10个数的立方的列表</span></span><br><span class="line">numbers7 = [number**<span class="number">3</span> <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(numbers7)</span><br></pre></td></tr></table></figure>
<h1 id="14-切片"><a href="#14-切片" class="headerlink" title="14.切片"></a>14.切片</h1><p>case1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">people = [<span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>]</span><br><span class="line"><span class="comment"># 提取前3个</span></span><br><span class="line"><span class="built_in">print</span>(people[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 提取第2-3</span></span><br><span class="line"><span class="built_in">print</span>(people[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 不指定头</span></span><br><span class="line"><span class="built_in">print</span>(people[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 不指定尾：表示到末尾含末尾</span></span><br><span class="line"><span class="built_in">print</span>(people[<span class="number">2</span>:])</span><br><span class="line"><span class="comment"># 负数索引：其中最后一个索引是-1</span></span><br><span class="line"><span class="built_in">print</span>(people[-<span class="number">2</span>:]) <span class="comment"># 表示输出后两个元素</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>列表名[索引1：索引2]</code>其中最后一个不包括</li>
<li><code>列表名[:索引2]</code>不指定开头表示从头开始</li>
<li><code>列表名[索引1:]</code><strong>包含结尾</strong></li>
<li>最后一个数的索引是-1，依次往前推，结合上面规则使用，如<code>列表名[-2:]</code></li>
</ol>
<p>case2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="15-切片和遍历"><a href="#15-切片和遍历" class="headerlink" title="15.切片和遍历"></a>15.切片和遍历</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切片和遍历结合</span></span><br><span class="line">people2 = [<span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> people2[<span class="number">0</span>:<span class="number">2</span>]:</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure>
<h1 id="16-复制列表"><a href="#16-复制列表" class="headerlink" title="16.复制列表"></a>16.复制列表</h1><p>正确方法<code>新列表=旧列表[:]</code><br>case1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切片和遍历结合</span></span><br><span class="line">people2 = [<span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> people2[<span class="number">0</span>:<span class="number">2</span>]:</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure>
<p>错误方法<code>新列表=旧列表×</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切片复制错误写法</span></span><br><span class="line">myfoods2 = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;cake&#x27;</span>]</span><br><span class="line">myfrendsfoods = myfoods2</span><br><span class="line"><span class="comment"># 看似输出一样</span></span><br><span class="line"><span class="built_in">print</span>(myfrendsfoods)</span><br><span class="line"><span class="comment"># 当我们向自己食物增加一个</span></span><br><span class="line">myfoods2.append(<span class="string">&#x27;carrot&#x27;</span>)</span><br><span class="line"><span class="comment"># 发现朋友的食物也增加了</span></span><br><span class="line"><span class="built_in">print</span>(myfrendsfoods)</span><br><span class="line"><span class="comment"># 其实只是类似C语言中的指针</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python字典用法</title>
    <url>/2021/02/28/Python/python%E5%AD%97%E5%85%B8%E7%94%A8%E6%B3%95-python-zi-dian-yong-fa/</url>
    <content><![CDATA[<h1 id="1-字典格式"><a href="#1-字典格式" class="headerlink" title="1.字典格式"></a>1.字典格式</h1><p><code>字典名 = &#123;键名:值名&#125;</code></p>
<ol>
<li>花括号</li>
<li>冒号</li>
<li>逗号分隔不同键值对</li>
</ol>
<p>case1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line">alien0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien0[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2-访问字典值"><a href="#2-访问字典值" class="headerlink" title="2.访问字典值"></a>2.访问字典值</h1><p><code>字典名[&#39;键名&#39;]</code></p>
<h1 id="3-添加键值对"><a href="#3-添加键值对" class="headerlink" title="3.添加键值对"></a>3.添加键值对</h1><ol>
<li><code>字典名[&#39;键名&#39;] = 值</code><br>case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加键值对</span></span><br><span class="line">alien1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">alien1[<span class="string">&#x27;x_pos&#x27;</span>] = <span class="number">12</span></span><br><span class="line">alien1[<span class="string">&#x27;y_pos&#x27;</span>] = <span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(alien1)</span><br></pre></td></tr></table></figure>
case2<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建空键值对</span></span><br><span class="line">alien2 = &#123;&#125;</span><br><span class="line">alien2[<span class="string">&#x27;x_pos&#x27;</span>] = <span class="number">12</span></span><br><span class="line">alien2[<span class="string">&#x27;y_pos&#x27;</span>] = <span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(alien2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="4-修改键值对"><a href="#4-修改键值对" class="headerlink" title="4.修改键值对"></a>4.修改键值对</h1><code>字典名[&#39;键名&#39;] = 值</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改键值对</span></span><br><span class="line">alien3 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">alien3[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(alien3)</span><br></pre></td></tr></table></figure>
<h1 id="5-删除键值对"><a href="#5-删除键值对" class="headerlink" title="5.删除键值对"></a>5.删除键值对</h1><code>del 字典名[&#39;键名&#39;]</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除键值对</span></span><br><span class="line">alien4 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> alien4[<span class="string">&#x27;color&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien4)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python字符串用法</title>
    <url>/2021/03/06/Python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%A8%E6%B3%95-python-zi-fu-chuan-yong-fa/</url>
    <content><![CDATA[<h1 id="1-表现形式"><a href="#1-表现形式" class="headerlink" title="1. 表现形式"></a>1. 表现形式</h1><p>英文的引号和单引号</p>
<h1 id="2-合并拼接字符串"><a href="#2-合并拼接字符串" class="headerlink" title="2. 合并拼接字符串"></a>2. 合并拼接字符串</h1><h2 id="2-1-常见的三个函数"><a href="#2-1-常见的三个函数" class="headerlink" title="2.1 常见的三个函数"></a>2.1 常见的三个函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;aba lovelace&quot;</span></span><br><span class="line"><span class="comment"># 首字母转成大写</span></span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br><span class="line"><span class="comment"># 全部转成大写</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br><span class="line"><span class="comment"># 全部转成小写</span></span><br><span class="line"><span class="built_in">print</span>(name.lower())</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<blockquote>
<p>Aba Lovelace<br>ABA LOVELACE<br>aba lovelace</p>
</blockquote>
<h2 id="2-2-拼接字符串"><a href="#2-2-拼接字符串" class="headerlink" title="2.2 拼接字符串"></a>2.2 拼接字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并字符串1</span></span><br><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"><span class="built_in">print</span>(full_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并字符串2</span></span><br><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并字符串3</span></span><br><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line">message = <span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<blockquote>
<p>ada lovelace<br>hello, Ada Lovelace!<br>Hello, Ada Lovelace!</p>
</blockquote>
<h1 id="3-换行符和制表符"><a href="#3-换行符和制表符" class="headerlink" title="3. 换行符和制表符"></a>3. 换行符和制表符</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;\tpython&quot;</span>)</span><br><span class="line">        python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;\npython&quot;</span>)</span><br><span class="line"></span><br><span class="line">python</span><br></pre></td></tr></table></figure>
<h1 id="4-删除字符串中的空白"><a href="#4-删除字符串中的空白" class="headerlink" title="4. 删除字符串中的空白"></a>4. 删除字符串中的空白</h1><h2 id="4-1-剔除字符串末尾的空白"><a href="#4-1-剔除字符串末尾的空白" class="headerlink" title="4.1 剔除字符串末尾的空白"></a>4.1 剔除字符串末尾的空白</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language =<span class="string">&quot;python &quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language</span><br><span class="line"><span class="string">&#x27;python &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.rstrip()</span><br><span class="line"><span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上面只是暂时删除，永久删除需要存回变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language = favorite_language.rstrip()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language</span><br><span class="line"><span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-剔除字符串两边和开头的空白"><a href="#4-2-剔除字符串两边和开头的空白" class="headerlink" title="4.2 剔除字符串两边和开头的空白"></a>4.2 剔除字符串两边和开头的空白</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_language = <span class="string">&quot; python &quot;</span></span><br><span class="line"><span class="comment"># 去除两端的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.strip()</span><br><span class="line"><span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="comment"># 去除开头的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.lstrip()</span><br><span class="line"><span class="string">&#x27;python &#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="5-常见的语法错误"><a href="#5-常见的语法错误" class="headerlink" title="5.! 常见的语法错误"></a>5.! 常见的语法错误</h1><ol>
<li>字符串中单引号之间不要有双引号<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.rstrip()</span><br><span class="line"><span class="string">&#x27; python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;chinese&quot; english’）</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 1</span></span><br><span class="line"><span class="string">    print(&#x27;</span>chinese<span class="string">&quot; english’）</span></span><br><span class="line"><span class="string">                             ^</span></span><br><span class="line"><span class="string">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure></li>
<li>若要用可以在双引号之间出现单引号<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;chinese&#x27;s son&quot;</span>)</span><br><span class="line">chinese<span class="string">&#x27;s son</span></span><br></pre></td></tr></table></figure></li>
<li>python2 中print没有括号<h1 id="6-练习"><a href="#6-练习" class="headerlink" title="6.练习"></a>6.练习</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出变量</span></span><br><span class="line">name = <span class="string">&quot;Eric&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;,would you like to learn some Python today?&quot;</span>)</span><br><span class="line"><span class="comment"># 分别以首字母大写、大写、小写显示姓名</span></span><br><span class="line">name = <span class="string">&#x27;xiao ming&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;以首字母大写显示：&quot;</span> + name.title())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;以大写显示：&quot;</span> + name.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;以小写显示：&quot;</span> + name.lower())</span><br><span class="line"><span class="comment"># 输出带引号的名言</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Albert Einstein once said,&#x27;A person......&#x27;&quot;</span>)</span><br><span class="line"><span class="comment"># 改写上面名言，名字和句子分别存到一个变量</span></span><br><span class="line">famous_person = <span class="string">&quot;Albert Einstein&quot;</span></span><br><span class="line">message = <span class="string">&quot; once said,&#x27;A person......&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(famous_person + message)</span><br><span class="line"><span class="comment"># 剔除人名中的空白，分别使用\n \t一次</span></span><br><span class="line">name = <span class="string">&quot; tom &quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.strip())</span><br><span class="line"><span class="built_in">print</span>(name.lstrip()+<span class="string">&quot;\t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name.rstrip()+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python文件和异常</title>
    <url>/2021/03/04/Python/python%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8-python-wen-jian-he-yi-chang/</url>
    <content><![CDATA[<p>016-文件和异常</p>
<h1 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;文件名&#x27;</span>) <span class="keyword">as</span> obj:</span><br><span class="line">    contents = obj.read()</span><br></pre></td></tr></table></figure>
<p>case</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file_test.txt&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    contents = file_obj.read()</span><br><span class="line">    <span class="built_in">print</span>(contents.rstrip())<span class="comment"># 本方法会最后一行会增加一个空行，因此要去除</span></span><br><span class="line"> </span><br><span class="line">输出</span><br><span class="line"><span class="number">3.1415978896897087</span></span><br><span class="line"><span class="number">4.86795766796</span></span><br><span class="line"><span class="number">8.09085605860</span></span><br></pre></td></tr></table></figure>
<h1 id="2-文件路径"><a href="#2-文件路径" class="headerlink" title="2.文件路径"></a>2.文件路径</h1><ul>
<li>相对路径可以<ul>
<li>注意的点：win是<code>\</code>，Linux是<code>/</code></li>
</ul>
</li>
<li>绝对路径可以<ul>
<li>一般把绝对路径存入变量</li>
<li>注意的点：win是<code>\</code>，Linux是<code>/</code></li>
</ul>
</li>
</ul>
<h1 id="3-逐行读取"><a href="#3-逐行读取" class="headerlink" title="3.逐行读取"></a>3.逐行读取</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file_test.txt&#x27;</span>) <span class="keyword">as</span> file_obj1:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_obj1:</span><br><span class="line">        <span class="built_in">print</span>(line.rstrip())</span><br><span class="line"> </span><br><span class="line">输出</span><br><span class="line"><span class="number">3.1415978896897087</span></span><br><span class="line"><span class="number">4.86795766796</span></span><br><span class="line"><span class="number">8.09085605860</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h1 id="4-读取每一行并存为列表"><a href="#4-读取每一行并存为列表" class="headerlink" title="4.读取每一行并存为列表"></a>4.读取每一行并存为列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file_test.txt&#x27;</span>) <span class="keyword">as</span> file_obj2:</span><br><span class="line">    list1 = file_obj2.readlines()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(l.rstrip())</span><br><span class="line">结果</span><br><span class="line"><span class="number">3.1415978896897087</span></span><br><span class="line"><span class="number">4.86795766796</span></span><br><span class="line"><span class="number">8.09085605860</span></span><br></pre></td></tr></table></figure>
<h1 id="5-写入文件"><a href="#5-写入文件" class="headerlink" title="5.写入文件"></a>5.写入文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;file_test.txt&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    file_obj.write(<span class="string">&#x27;i love you&#x27;</span>)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><code>open(参数1，参数2)</code></p>
<ul>
<li>参数1文件名</li>
<li>参数2模式<ul>
<li>默认只读模式<code>r</code></li>
<li>写入模式<code>w</code>,文件若不存在自动创建。<strong>若文件存在且有内容会先清空后写入</strong></li>
<li>附加模式<code>a</code></li>
</ul>
</li>
<li>python只支持字符串写入，若写入数值请先转换成str()</li>
<li><code>write</code>表示写入，但是不会在末尾添加换行符</li>
</ul>
<h1 id="6-写入多行"><a href="#6-写入多行" class="headerlink" title="6.写入多行"></a>6.写入多行</h1><p>没什么可说的，你写入的时候自己在里面加上<code>\n</code></p>
<h1 id="7-附加写入"><a href="#7-附加写入" class="headerlink" title="7.附加写入"></a>7.附加写入</h1><p><code>open(文件名，&#39;a&#39;)</code></p>
<ul>
<li>写入文件不会清空原有内容</li>
<li>没有文件会自动创建<h1 id="8-异常"><a href="#8-异常" class="headerlink" title="8.异常"></a>8.异常</h1>基本语法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    监测的代码</span><br><span class="line"><span class="keyword">except</span> 捕获的异常:</span><br><span class="line">    处理异常</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    监测的代码成功执行运行的代码</span><br></pre></td></tr></table></figure>
case1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;除数不能是0&#x27;</span>)</span><br><span class="line">运行结果</span><br><span class="line">除数不能是<span class="number">0</span></span><br></pre></td></tr></table></figure>
case2<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">&#x27;\n输入第一个数：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">&#x27;\n输入第二个数：&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;除数不能是0&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer)</span><br><span class="line">运行</span><br><span class="line">输入第一个数：<span class="number">2</span></span><br><span class="line"> </span><br><span class="line">输入第二个数：<span class="number">0</span></span><br><span class="line">除数不能是<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">输入第一个数：q</span><br><span class="line"> </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="9-异常不上报不终止继续运行"><a href="#9-异常不上报不终止继续运行" class="headerlink" title="9. 异常不上报不终止继续运行"></a>9. 异常不上报不终止继续运行</h1></li>
</ul>
<p><strong>关键<code>pass()函数</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="keyword">pass</span>()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python爬虫requests库的使用</title>
    <url>/2021/03/05/Python/python%E7%88%AC%E8%99%ABrequests%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8-python-pa-chong-requests-ku-de-shi-yong/</url>
    <content><![CDATA[<h1 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h1><p>使用<code>requests</code>库比使用<code>urllib</code>库方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方法与urlopen方法一样，都返回一个response对象</span></span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.text))</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(r.cookies)</span><br></pre></td></tr></table></figure>
<p><code>get</code>方法与<code>urlopen</code>方法执行相同的操作，得到了<code>response对象</code>，最大方便实现其他请求只需一句话，如<code>request.post()</code>等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.post()</span><br><span class="line">request.put()</span><br><span class="line">request.delete()</span><br><span class="line">request.head()</span><br><span class="line">request.option()</span><br></pre></td></tr></table></figure>
<h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><ul>
<li>基本用法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-60423760-7d282bb073f21a9a39dfe543&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul>
<li>构造参数，一般通过<code>requests.get(url,params)</code>第二个参数传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以直接写</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get?name=germey&amp;age=18&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, params=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># url中的参数会自动构造</span></span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6042391b-1bab7f4d70f715a66ca76e31&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get?name=germey&amp;age=18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6042391c-76b823292c0c2d6a5ff07bc0&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get?name=germey&amp;age=22&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="转换字典"><a href="#转换字典" class="headerlink" title="转换字典"></a>转换字典</h2><p>上面返回的结果是一个<code>json</code>字符串，可以调用<code>.json()</code>方法将其转化成字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, params=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># 转化成字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.json()))</span><br><span class="line">运行结果</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="抓取网页"><a href="#抓取网页" class="headerlink" title="抓取网页"></a>抓取网页</h2><ul>
<li>抓取网页</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># 加入头部信息，否则不会让你抓取</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.81 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>, headers=headers)</span><br><span class="line"><span class="comment"># 配置正则表达式</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;explore-feed.*?question_link.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>)</span><br><span class="line">titles = re.findall(pattern, r.text)</span><br><span class="line"><span class="built_in">print</span>(titles)</span><br></pre></td></tr></table></figure>
<h2 id="抓取图片"><a href="#抓取图片" class="headerlink" title="抓取图片"></a>抓取图片</h2><ul>
<li>抓取图片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/favicon.ico&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.content)</span><br><span class="line"><span class="comment"># 将其保存到本地</span></span><br><span class="line"><span class="comment"># 第二个参数以二进制形式打开文件，并向其写入数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;favicon.ico&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br><span class="line">运行结果</span><br><span class="line">前者将其转化为字符串会有乱码</span><br><span class="line">后者以b开头是二进制数据也就是图片</span><br><span class="line">本地目录会出现这个图片</span><br></pre></td></tr></table></figure>
<h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>post请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;18&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-604241e6-103df5b62be432095bba787f&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取响应信息"><a href="#获取响应信息" class="headerlink" title="获取响应信息"></a>获取响应信息</h2><ul>
<li>获取响应信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># 获取状态码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.status_code), r.status_code)</span><br><span class="line"><span class="comment"># 获取头部信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.headers), r.headers)</span><br><span class="line"><span class="comment"># 获取cookies</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.cookies), r.cookies)</span><br><span class="line"><span class="comment"># 获取url</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.url), r.url)</span><br><span class="line"><span class="comment"># 获取请求历史</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.history), r.history)</span><br><span class="line">运行结果</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; 200</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">requests</span>.<span class="title">structures</span>.<span class="title">CaseInsensitiveDict</span>&#x27;&gt; &#123;&#x27;<span class="title">Date</span>&#x27;:</span> <span class="string">&#x27;Fri, 05 Mar 2021 14:42:44 GMT&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;500&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Server&#x27;</span>: <span class="string">&#x27;gunicorn/19.9.0&#x27;</span>, <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">requests</span>.<span class="title">cookies</span>.<span class="title">RequestsCookieJar</span>&#x27;&gt; &lt;<span class="title">RequestsCookieJar</span>[]&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; <span class="title">http</span>:</span>//httpbin.org/post</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt; []</span></span><br></pre></td></tr></table></figure>
<h2 id="状态码比较"><a href="#状态码比较" class="headerlink" title="状态码比较"></a>状态码比较</h2><ul>
<li>比较状态码<br><code>requests.codes</code>是一个内置对象，用来根据返回信息查询状态码，详细直接在开发工具点开看这个对象。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(requests.codes.ok)</span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> r.status_code == requests.codes.ok <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">运行结果</span><br><span class="line"><span class="number">200</span></span><br><span class="line">请求成功</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python爬虫requests库高级用法</title>
    <url>/2021/03/07/Python/python%E7%88%AC%E8%99%ABrequests%E5%BA%93%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95-python-pa-chong-requests-ku-gao-ji-yong-fa/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h1><p>使用<code>requests</code>库比使用<code>urllib</code>库方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方法与urlopen方法一样，都返回一个response对象</span></span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.text))</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(r.cookies)</span><br></pre></td></tr></table></figure>
<p><code>get</code>方法与<code>urlopen</code>方法执行相同的操作，得到了<code>response对象</code>，最大方便实现其他请求只需一句话，如<code>request.post()</code>等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.post()</span><br><span class="line">request.put()</span><br><span class="line">request.delete()</span><br><span class="line">request.head()</span><br><span class="line">request.option()</span><br></pre></td></tr></table></figure>
<h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><ul>
<li>基本用法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-60423760-7d282bb073f21a9a39dfe543&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul>
<li>构造参数，一般通过<code>requests.get(url,params)</code>第二个参数传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以直接写</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get?name=germey&amp;age=18&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, params=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># url中的参数会自动构造</span></span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6042391b-1bab7f4d70f715a66ca76e31&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get?name=germey&amp;age=18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;22&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6042391c-76b823292c0c2d6a5ff07bc0&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get?name=germey&amp;age=22&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="转换字典"><a href="#转换字典" class="headerlink" title="转换字典"></a>转换字典</h2><p>上面返回的结果是一个<code>json</code>字符串，可以调用<code>.json()</code>方法将其转化成字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, params=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># 转化成字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.json()))</span><br><span class="line">运行结果</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="抓取网页"><a href="#抓取网页" class="headerlink" title="抓取网页"></a>抓取网页</h2><ul>
<li>抓取网页</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># 加入头部信息，否则不会让你抓取</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.81 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>, headers=headers)</span><br><span class="line"><span class="comment"># 配置正则表达式</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;explore-feed.*?question_link.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>)</span><br><span class="line">titles = re.findall(pattern, r.text)</span><br><span class="line"><span class="built_in">print</span>(titles)</span><br></pre></td></tr></table></figure>
<h2 id="抓取图片"><a href="#抓取图片" class="headerlink" title="抓取图片"></a>抓取图片</h2><ul>
<li>抓取图片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/favicon.ico&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.content)</span><br><span class="line"><span class="comment"># 将其保存到本地</span></span><br><span class="line"><span class="comment"># 第二个参数以二进制形式打开文件，并向其写入数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;favicon.ico&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br><span class="line">运行结果</span><br><span class="line">前者将其转化为字符串会有乱码</span><br><span class="line">后者以b开头是二进制数据也就是图片</span><br><span class="line">本地目录会出现这个图片</span><br></pre></td></tr></table></figure>
<h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>post请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;18&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-604241e6-103df5b62be432095bba787f&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取响应信息"><a href="#获取响应信息" class="headerlink" title="获取响应信息"></a>获取响应信息</h2><ul>
<li>获取响应信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># 获取状态码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.status_code), r.status_code)</span><br><span class="line"><span class="comment"># 获取头部信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.headers), r.headers)</span><br><span class="line"><span class="comment"># 获取cookies</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.cookies), r.cookies)</span><br><span class="line"><span class="comment"># 获取url</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.url), r.url)</span><br><span class="line"><span class="comment"># 获取请求历史</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.history), r.history)</span><br><span class="line">运行结果</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; 200</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">requests</span>.<span class="title">structures</span>.<span class="title">CaseInsensitiveDict</span>&#x27;&gt; &#123;&#x27;<span class="title">Date</span>&#x27;:</span> <span class="string">&#x27;Fri, 05 Mar 2021 14:42:44 GMT&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;500&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Server&#x27;</span>: <span class="string">&#x27;gunicorn/19.9.0&#x27;</span>, <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">requests</span>.<span class="title">cookies</span>.<span class="title">RequestsCookieJar</span>&#x27;&gt; &lt;<span class="title">RequestsCookieJar</span>[]&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; <span class="title">http</span>:</span>//httpbin.org/post</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt; []</span></span><br></pre></td></tr></table></figure>
<h2 id="状态码比较"><a href="#状态码比较" class="headerlink" title="状态码比较"></a>状态码比较</h2><ul>
<li>比较状态码<br><code>requests.codes</code>是一个内置对象，用来根据返回信息查询状态码，详细直接在开发工具点开看这个对象。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(requests.codes.ok)</span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> r.status_code == requests.codes.ok <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">运行结果</span><br><span class="line"><span class="number">200</span></span><br><span class="line">请求成功</span><br></pre></td></tr></table></figure>
<h1 id="2-高级用法"><a href="#2-高级用法" class="headerlink" title="2.高级用法"></a>2.高级用法</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件字典</span></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="comment"># 读取图片存入</span></span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;favicon.ico&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># post提交文件</span></span><br><span class="line">r = requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: <span class="string">&quot;data:application/octet-stream;base64,quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;6665&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=b958686141c39aa435cd20e95c5f9c5d&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.25.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6044410f-1d2ffc615fadf1052312b9be&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;27.200.129.225&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.cookies)</span><br><span class="line"><span class="comment"># 调用items转换成元组组成的列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r.cookies.items()))</span><br><span class="line"><span class="built_in">print</span>(r.cookies.items())</span><br><span class="line"><span class="comment"># 遍历cookie中各个项</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    <span class="built_in">print</span>(key + <span class="string">&#x27;=&#x27;</span> + value)</span><br><span class="line">运行结果</span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie BDORZ=<span class="number">27315</span> <span class="keyword">for</span> .baidu.com/&gt;]&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">[(<span class="params"><span class="string">&#x27;BDORZ&#x27;</span>, <span class="string">&#x27;27315&#x27;</span></span>)]</span></span><br><span class="line"><span class="class"><span class="title">BDORZ</span>=27315</span></span><br></pre></td></tr></table></figure>
<h2 id="cookie维持"><a href="#cookie维持" class="headerlink" title="cookie维持"></a>cookie维持</h2><ol>
<li>进入浏览器开发者模式将已经登陆的网页的cookie复制</li>
<li>编写如下代码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 复制的值</span></span><br><span class="line">cookie = <span class="string">&quot;CURRENT_FNVAL=80; _uuid=3594F525-7466-18AB-B798-F6E85E7E9F1255326infoc; &quot;</span> \</span><br><span class="line">          <span class="string">&quot;blackside_state=1; rpdid=|(k|~kRlmmJ)0J&#x27;uYukluk~mu; fingerprint=3fffb0bd58&quot;</span> \</span><br><span class="line">          <span class="string">&quot;348451e67f6c7f92b1260c; buvid_fp=28ADA7B4-EC23-832A-DCF2-9E22F8B01D6E54330infoc; &quot;</span> \</span><br><span class="line">          <span class="string">&quot;buvid_fp_plain=9384B379-4899-446B-A961-DB969AE72DD8184993infoc; SESSDATA=b4615d24,&quot;</span> \</span><br><span class="line">          <span class="string">&quot;1628228874,2428d*21; bili_jct=3614f0de12e3173e946830c9d1aebafe; DedeUserID=345965046; &quot;</span> \</span><br><span class="line">          **********隐藏<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">headers = &#123;</span></span><br><span class="line"><span class="string">    &#x27;Cookie&#x27;: cookie,</span></span><br><span class="line"><span class="string">    &#x27;Host&#x27;: &#x27;www.bilibili.com&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;User-Agent&#x27;: &quot;</span>Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) <span class="string">&quot;</span></span><br><span class="line"><span class="string">                  &quot;</span>Chrome/<span class="number">88.0</span><span class="number">.4324</span><span class="number">.182</span> Safari/<span class="number">537.36</span> Edg/<span class="number">88.0</span><span class="number">.705</span><span class="number">.81</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">r = requests.get(&#x27;https://www.bilibili.com&#x27;)</span></span><br><span class="line"><span class="string">print(r.text)</span></span><br><span class="line"><span class="string">运行结果</span></span><br><span class="line"><span class="string">会发现返回的网页内容是已经登录过的</span></span><br></pre></td></tr></table></figure>
<h2 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h2><p>维持登录每次都需要cookie，会话维持可以简化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求一个网址并设置cookies 12345值</span></span><br><span class="line">r = requests.get(<span class="string">&quot;http://httpbin.org/cookies/set/number/12345&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># 再次获取无法获取</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># 使用session</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">&quot;http://httpbin.org/cookies/set/number/12345&quot;</span>)</span><br><span class="line">r = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">运行结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;cookies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span>: <span class="string">&quot;12345&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;cookies&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用session后，是可以获取到的</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;cookies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span>: <span class="string">&quot;12345&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssl证书验证</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.设置不验证证书</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>, verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="comment"># 上面会输出警告信息，可以通过两种方法忽略</span></span><br><span class="line"><span class="comment"># 1.1</span></span><br><span class="line"><span class="comment"># 设置忽略证书警告，即控制台不输出警告</span></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"><span class="comment"># 1.2</span></span><br><span class="line"><span class="comment"># 通过捕获日志的方式忽略警告</span></span><br><span class="line">logging.capturWarning(<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># 2.指定本地证书</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>, cert=(<span class="string">&#x27;.crt&#x27;</span>, <span class="string">&#x27;key&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h2><ul>
<li>防止大规模爬取封IP</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代理设置</span></span><br><span class="line"><span class="comment"># 1.代理设置</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://10.10.1.10.3128&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">requests.get(<span class="string">&#x27;https://taobao.com&#x27;</span>,proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用http basic auth</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://user:password@10.10.1.10:3128/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.get(<span class="string">&#x27;https://taobao.com&#x27;</span>,proxies proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.使用socket代理</span></span><br><span class="line"><span class="comment"># pip install requests[socks]</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;sock5://user:password@10.10.1.10:3128/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.get(<span class="string">&#x27;https://taobao.com&#x27;</span>,proxies=proxies)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 超时设置</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 1.设置超时，如果没有反应抛出超时异常，默认是none没有超时时间</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://www.taobao.com&#x27;</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="comment"># 2.请求的两个阶段连接和响应，连接+响应</span></span><br><span class="line"><span class="comment"># 如果像分别设置超时时间可以传入元组（连接，响应，连接+响应）</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://www.taobao.com&#x27;</span>, timeout=(<span class="number">5</span>, <span class="number">11</span>, <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 身份认证</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://localhost:5000&#x27;</span>, auth=HTTPBasicAuth(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>))</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://localhost:5000&#x27;</span>, auth=(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="构造数据对象"><a href="#构造数据对象" class="headerlink" title="构造数据对象"></a>构造数据对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据对象构造</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span>  Request, session</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">s = session()</span><br><span class="line"><span class="comment"># 构造Request数据对象</span></span><br><span class="line">req = Request(<span class="string">&#x27;POST&#x27;</span>, url, data=data, headers=headers)</span><br><span class="line"><span class="comment"># request数据对象转换成prepare_request</span></span><br><span class="line">prepped = s.prepare_request(req)</span><br><span class="line">r = s.send(prepped)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python爬虫利用urllib库发送请求</title>
    <url>/2021/03/03/Python/python%E7%88%AC%E8%99%AB%E5%88%A9%E7%94%A8urllib%E5%BA%93%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82-python-li-yong-urllib-ku-fa-song-qing-qiu/</url>
    <content><![CDATA[<h1 id="1-urllib库"><a href="#1-urllib库" class="headerlink" title="1.urllib库"></a>1.urllib库</h1><p><code>urllib库</code>是python3的内置库，主要用来<code>实现请求的发送</code><br>有4个模块</p>
<ul>
<li><code>request</code>基本http请求模块</li>
<li><code>error</code>异常处理模块</li>
<li><code>parse</code>工具模块</li>
<li><code>rebotparser</code>识别robots.txt文件<h1 id="2-request模块"><a href="#2-request模块" class="headerlink" title="2.request模块"></a>2.request模块</h1><h2 id="2-1urlopen-用法"><a href="#2-1urlopen-用法" class="headerlink" title="2.1urlopen()用法"></a>2.1urlopen()用法</h2>参考文档：<a href="https://docs.python.org/zh-cn/3/library/urllib.request.html#module-urllib.request">https://docs.python.org/zh-cn/3/library/urllib.request.html#module-urllib.request</a><br><code>urlopen(url)</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># request的urlopen方法基本使用</span></span><br><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line"><span class="comment">#打印读取</span></span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 打印类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"><span class="comment"># 调用read可以读取网页的内容</span></span><br><span class="line"><span class="comment"># 调用status属性可以获取状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.status)</span><br><span class="line"><span class="comment"># 调用getheaders方法可以获取header头部信息</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br><span class="line"><span class="built_in">print</span>(response.getheader(<span class="string">&#x27;server&#x27;</span>))</span><br></pre></td></tr></table></figure>
<code>urlopen(url,data,timeout)</code><br>传递<code>data</code>参数和<code>timeout</code>参数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;world&#x27;</span>: <span class="string">&quot;hello&quot;</span>&#125;), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 其中第二个参数是可选</span></span><br><span class="line"><span class="comment"># 若选了其格式必须是byte格式</span></span><br><span class="line"><span class="comment"># 有这个参数就不再是get-&gt;post</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.read())</span><br><span class="line"><span class="comment"># timeout参数:设置超时时间</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用try catch 捕获，若超时则输出错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">0.02</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason, socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Time out&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="2-2Request类用法"><a href="#2-2Request类用法" class="headerlink" title="2.2Request类用法"></a>2.2Request类用法</h2></li>
</ul>
<p>主要用于构建复杂数据结构。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同过Request方法构造数据结构</span></span><br><span class="line">request = urllib.request.Request(<span class="string">&#x27;http://python.org&#x27;</span>)</span><br><span class="line">respose = urllib.request.urlopen(request)</span><br><span class="line"><span class="built_in">print</span>(respose.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>包装作用<br>req = <code>Request(需要包装的数据若干)</code><br><code>urlopen(req)</code><br>不同：传入的参数是经过包装的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据结构</span></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible;MSIE 5.5;Windows NT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;httpbin.org&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dict</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Germey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 包装data</span></span><br><span class="line">data = <span class="built_in">bytes</span>(parse.urlencode(<span class="built_in">dict</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用Request包装数据</span></span><br><span class="line">req = request.Request(url=url, data=data, headers=headers, method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用urlopen方法</span></span><br><span class="line">response = request.urlopen(req)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="3-处理器用法"><a href="#3-处理器用法" class="headerlink" title="3.处理器用法"></a>3.处理器用法</h1><p>利用基本的构造请求只是最简单的，如果进行一些复杂的操作比如cookie处理等，就需要<code>处理器</code>。<br>处理器的父类是<code>BaseHandler</code>类，其子类很多</p>
<ul>
<li><code>HTTPDefaultErrorHandler</code>处理响应异常</li>
<li><code>HTTPRedirectHandler</code>处理重定向</li>
<li><code>HTTPCookieProcessor</code>处理Cookies</li>
<li><code>ProxyHander</code>设置代理</li>
<li><code>HTTPPasswordMgr</code>管理密码</li>
<li><code>HTTPBasicAuthHandler</code>管理认证</li>
</ul>
<p><code>OpenDirector</code>类简称<code>Opener</code>,类似<code>urlopen()</code>方法，主要是用来打开链接的。引入的原因是之前的只是用封装好的<code>urlopen()</code>打开，但是现在需要高度定制。<br><code>Opener</code>可以使用<code>open()</code>方法，与<code>Handler</code>关系：通过<code>Handler</code>构建<code>Opener</code></p>
<h2 id="3-1-验证用户和密码"><a href="#3-1-验证用户和密码" class="headerlink" title="3.1.验证用户和密码"></a>3.1.验证用户和密码</h2><p>case验证用户和密码的例子，有些网页会提示让你输入用户明和密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">username = <span class="string">&#x27;username&#x27;</span></span><br><span class="line"><span class="comment"># 用户密码</span></span><br><span class="line">password = <span class="string">&#x27;password&#x27;</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line">url = <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line"><span class="comment"># 这个类主要是构建用户密码和用户名一些基本信息的</span></span><br><span class="line">p = HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line"><span class="comment"># 把基本参数传入</span></span><br><span class="line">p.add_password(<span class="literal">None</span>, url, username, password)</span><br><span class="line"><span class="comment"># 实例化处理器，其参数尾上面的实例</span></span><br><span class="line">auth_handler = HTTPBasicAuthHandler(p)</span><br><span class="line"><span class="comment"># 通过处理器构建一个opener</span></span><br><span class="line">opener = build_opener(auth_handler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 调用opener的open方法</span></span><br><span class="line">    result = opener.<span class="built_in">open</span>(url)</span><br><span class="line">    html = result.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(html)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-2设置代理"><a href="#3-2设置代理" class="headerlink" title="3.2设置代理"></a>3.2设置代理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;&quot;设置代理&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用代理处理器构建数据</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;htpp://127.0.0.1:9743&#x27;</span></span><br><span class="line">    <span class="string">&#x27;https&#x27;</span> <span class="string">&#x27;https://127.0.0.1:9743&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 调用构造器方法构造opener</span></span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 打开网址</span></span><br><span class="line">    response = opener.<span class="built_in">open</span>((<span class="string">&#x27;https://baidu.com&#x27;</span>))</span><br><span class="line">    <span class="comment"># 读取数据</span></span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br></pre></td></tr></table></figure>
<h2 id="3-3-配置cookies"><a href="#3-3-配置cookies" class="headerlink" title="3.3.配置cookies"></a>3.3.配置cookies</h2><h3 id="3-1保存"><a href="#3-1保存" class="headerlink" title="3.1保存"></a>3.1保存</h3><p>case1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;配置cookies&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># 声明一个cookies</span></span><br><span class="line">cookie = http.cookiejar.CookieJar()</span><br><span class="line"><span class="comment"># 用处理器处理</span></span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 构造opener</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">    <span class="built_in">print</span>(item.name+<span class="string">&quot;=&quot;</span>+item.value)</span><br><span class="line">运行结果</span><br><span class="line"><span class="string">&quot;F:\D-04. Program Space\D-04-007. Python Program\Python1\Scripts\python.exe&quot;</span> C:/Users/Quinn/PycharmProjects/pythonProject/配置cookies.py</span><br><span class="line">BAIDUID=E4EF1513A1D64BEE3D68E25C699FE119:FG=<span class="number">1</span></span><br><span class="line">BIDUPSID=E4EF1513A1D64BEE73CE7E52B0ED8BF7</span><br><span class="line">H_PS_PSSID=<span class="number">33272_31660_33595_33570_33392_33459</span></span><br><span class="line">PSTM=<span class="number">1614754529</span></span><br><span class="line">BDSVRTM=<span class="number">0</span></span><br><span class="line">BD_HOME=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>case2 配置后存储文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;配置cookies&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">filename = <span class="string">&#x27;cookies.txt&#x27;</span></span><br><span class="line"><span class="comment"># 声明一个cookies****要换成下面</span></span><br><span class="line">cookie = http.cookiejar.MozillaCookieJar(filename)</span><br><span class="line"><span class="comment"># 用处理器处理</span></span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 构造opener</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">    <span class="built_in">print</span>(item.name+<span class="string">&quot;=&quot;</span>+item.value)</span><br><span class="line">cookie.save(ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br><span class="line">运行结果</span><br><span class="line">生成了文件</span><br><span class="line"><span class="comment"># Netscape HTTP Cookie File</span></span><br><span class="line"><span class="comment"># http://curl.haxx.se/rfc/cookie_spec.html</span></span><br><span class="line"><span class="comment"># This is a generated file!  Do not edit.</span></span><br><span class="line"></span><br><span class="line">.baidu.com	TRUE	/	FALSE	<span class="number">1646290472</span>	BAIDUID	C0FDF0F7760C5DD0A2754CF35D05EBEB:FG=<span class="number">1</span></span><br><span class="line">.baidu.com	TRUE	/	FALSE	<span class="number">3762238119</span>	BIDUPSID	C0FDF0F7760C5DD058FD4B338DBC9A83</span><br><span class="line">.baidu.com	TRUE	/	FALSE		H_PS_PSSID	<span class="number">33272_31253_33594_26350_22157</span></span><br><span class="line">.baidu.com	TRUE	/	FALSE	<span class="number">3762238119</span>	PSTM	<span class="number">1614754472</span></span><br><span class="line">www.baidu.com	FALSE	/	FALSE		BDSVRTM	<span class="number">6</span></span><br><span class="line">www.baidu.com	FALSE	/	FALSE		BD_HOME	<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>case3生成LWP文件格式cookies文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookie = http.cookiejar.LWPCookieJar(filename)</span><br><span class="line"></span><br><span class="line">运行结果生成文件</span><br><span class="line"><span class="comment">#LWP-Cookies-2.0</span></span><br><span class="line"><span class="type">Set</span>-Cookie3: BAIDUID=<span class="string">&quot;BEAA4A525268492E8B95D972A1ACBD7F:FG=1&quot;</span>; path=<span class="string">&quot;/&quot;</span>; domain=<span class="string">&quot;.baidu.com&quot;</span>; path_spec; domain_dot; expires=<span class="string">&quot;2022-03-03 06:58:05Z&quot;</span>; comment=bd; version=<span class="number">0</span></span><br><span class="line"><span class="type">Set</span>-Cookie3: BIDUPSID=BEAA4A525268492EBA5D955552CA0D71; path=<span class="string">&quot;/&quot;</span>; domain=<span class="string">&quot;.baidu.com&quot;</span>; path_spec; domain_dot; expires=<span class="string">&quot;2089-03-21 10:12:12Z&quot;</span>; version=<span class="number">0</span></span><br><span class="line"><span class="type">Set</span>-Cookie3: H_PS_PSSID=<span class="number">33506_33261_33272_33595_26350</span>; path=<span class="string">&quot;/&quot;</span>; domain=<span class="string">&quot;.baidu.com&quot;</span>; path_spec; domain_dot; discard; version=<span class="number">0</span></span><br><span class="line"><span class="type">Set</span>-Cookie3: PSTM=<span class="number">1614754685</span>; path=<span class="string">&quot;/&quot;</span>; domain=<span class="string">&quot;.baidu.com&quot;</span>; path_spec; domain_dot; expires=<span class="string">&quot;2089-03-21 10:12:12Z&quot;</span>; version=<span class="number">0</span></span><br><span class="line"><span class="type">Set</span>-Cookie3: BDSVRTM=<span class="number">0</span>; path=<span class="string">&quot;/&quot;</span>; domain=<span class="string">&quot;www.baidu.com&quot;</span>; path_spec; discard; version=<span class="number">0</span></span><br><span class="line"><span class="type">Set</span>-Cookie3: BD_HOME=<span class="number">1</span>; path=<span class="string">&quot;/&quot;</span>; domain=<span class="string">&quot;www.baidu.com&quot;</span>; path_spec; discard; version=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2读取访问"><a href="#3-2读取访问" class="headerlink" title="3.2读取访问"></a>3.2读取访问</h3><p>case4读取cookies并访问网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取</span></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar()</span><br><span class="line">cookie.load(<span class="string">&#x27;cookies.txt&#x27;</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python爬虫正则表达式用法</title>
    <url>/2021/03/08/Python/python%E7%88%AC%E8%99%AB%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95-python-pa-chong-zheng-ze-biao-da-shi-yong-fa/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="常用匹配表参考"><a href="#常用匹配表参考" class="headerlink" title="常用匹配表参考"></a>常用匹配表参考</h1><p><code>\w</code>匹配字母、数字、下划线<br><code>\W</code>匹配不是字母、数字、下划线的字符<br><code>\s</code>匹配任意空白字符等价于<code>[\t\n\t\f]</code><br><code>\S</code>匹配任意非空字符<br><code>\d</code>匹配任意数字等价<code>[0-9]</code><br><code>\D</code>匹配任意非数字的字符<br><code>\A</code>匹配字符串开头<br><code>\Z</code>匹配字符串结尾，如果存在换行，只会匹配换行前的结束字符串<br><code>\z</code>匹配字符串结尾，如果存在换行，同时还会匹配换行符<br><code>\G</code>匹配最后匹配完成的位置<br><code>\n</code>匹配换行符<br><code>\t</code>匹配制表符<br><code>^</code>匹配一行字符串的开头<br><code>$</code>匹配一行字符串的结尾<br><code>.</code>匹配任意字符，除了换行符，当re.DOTAKK标记被指定，则可以匹配包含换行符的任意字符，<strong>这里表示匹配1个字符，如果想要匹配任意字符可以写成</strong><code>.*</code><br><code>[...]</code>表示一组字符，单独列出，比如<code>[amk]</code>匹配a或m或k<br><code>[^...]</code>不在[]的字符，比如<code>[^abc]</code>表示匹配a、b、c之外的字符<br><code>&#123;n&#125;</code>精确匹配n个前面的表达式，比如<code>\w&#123;10&#125;</code>表示往后匹配10次只要符合\w规则即可<br><code>&#123;n,m&#125;</code>匹配n到m次有前面正则表达式定义的片段，贪婪方式<br><code>a|b</code>匹配a或b<br><code>&#123;&#125;</code>匹配括号内的表达式<br><code>*</code>匹配0或多个前面的子表达式或字符<br><code>+</code>匹配1个或多个前面的子表达式或字符<br><code>？</code>匹配0个或1个前面正则表达式定义的片段</p>
<h1 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h1><p>引入<code>re</code>库<br><strong>这个方法是从开头匹配</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;hello 123 456 world_this is a regex demo&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(content))</span><br><span class="line">result = re.match(<span class="string">r&quot;^hello\s\d\d\d\s\d&#123;3&#125;\s\w&#123;10&#125;&quot;</span>, content)</span><br><span class="line"><span class="comment"># 输出匹配的内容</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># 输出匹配的范围</span></span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"></span><br><span class="line"><span class="number">40</span></span><br><span class="line">hello <span class="number">123</span> <span class="number">456</span> world_this</span><br><span class="line">(<span class="number">0</span>, <span class="number">24</span>)</span><br></pre></td></tr></table></figure>
<h1 id="提取内容"><a href="#提取内容" class="headerlink" title="提取内容"></a>提取内容</h1><p>首先将要匹配的内容提取的内容括起来<br>然后<code>match(1)</code>从1开始，1表示提取第一个括号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;hello 123 456 world_this is a regex demo&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(content))</span><br><span class="line">result = re.match(<span class="string">r&quot;^hello\s\d\d\d\s\d&#123;3&#125;\s\w&#123;10&#125;&quot;</span>, content)</span><br><span class="line"><span class="comment"># 输出匹配的内容</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># 输出匹配的范围</span></span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="comment"># 2.提取内容</span></span><br><span class="line">result = re.match(<span class="string">r&quot;^hello\s(\d\d\d)\s\d&#123;3&#125;\s\w&#123;10&#125;&quot;</span>, content)</span><br><span class="line"><span class="comment"># 提取第一个123</span></span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br><span class="line">运行结果</span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="通用匹配"><a href="#通用匹配" class="headerlink" title="通用匹配"></a>通用匹配</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;hello 123 456 world_this is a regex demo&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(content))</span><br><span class="line"><span class="comment"># 通用匹配</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;^hello.*demo$&#x27;</span>, content)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># 这里对比只用.不用.*的区别，会发现只用.会报错，因为没匹配到任何东西，因为.的意义是匹配任意1个字符，只有和.*配合才代表匹配任意字符</span></span><br><span class="line">result =re.match(<span class="string">r&#x27;^hello.demo$&#x27;</span>, content)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line">运行结果</span><br><span class="line">hello <span class="number">123</span> <span class="number">456</span> world_this <span class="keyword">is</span> a regex demo</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\Users\Quinn\PycharmProjects\pythonProject\正则表1.py&quot;</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(result.group())</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;group&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h1><h2 id="用法"><a href="#用法" class="headerlink" title=".*用法"></a>.*用法</h2><p>所谓<code>贪婪模式</code>就是在此模式下使用比如<code>.*</code>尽量匹配多个字符，<code>.*</code>原意代表匹配任意字符+匹配0个或N个表达式（也就是匹配前面的这里的.表达式），这时候贪婪模式表示匹配最多的任意字符，而不是0个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 贪婪模式示例</span></span><br><span class="line"><span class="comment"># 我们提取中间数字部分</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;^hello.*(\d+).*demo$&#x27;</span>, content)</span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br><span class="line">输出</span><br><span class="line">(<span class="number">0</span>, <span class="number">40</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="comment"># 原因：开启贪婪模式.*会尽量匹配多个字符，所以一直匹配到了数字7前面，而\d+则只能匹配了一个数字</span></span><br></pre></td></tr></table></figure>
<h1 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h1><h2 id="用法-1"><a href="#用法-1" class="headerlink" title=".*?用法"></a>.*?用法</h2><p>我们愿意是提取数字部分，但是由于贪婪模式导致无法提取，可以使用<code>.*?</code>非贪婪模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;hello 123 456 world_this is a regex demo&#x27;</span></span><br><span class="line"><span class="comment"># 非贪婪模式示例</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;^hello.*?(\d+).*demo$&#x27;</span>, content)</span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br><span class="line">输出</span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>非贪婪模式就是尽可能匹配少的字符，.<em>匹配任意字符直到遇到\d+这时候在贪婪模式下会匹配，但是在非贪婪模式下就直接交给\d+去匹配了<br><strong>尽量使用非贪婪模式而不是贪婪模式</strong><br>下面情况*<em>非贪婪模式会导致无法匹配</em></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content2 = <span class="string">&#x27;http://quinntian.com/category&#x27;</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;^http.*?com/(.*)&#x27;</span>, content2)</span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br><span class="line">result = re.match(<span class="string">r&#x27;^http.*?com/(.*?)&#x27;</span>, content2)</span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br><span class="line">运行结果</span><br><span class="line">category</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里第二个并没有提取出来是因为没有匹配到任何内容</span></span><br></pre></td></tr></table></figure>
<h2 id="用法-2"><a href="#用法-2" class="headerlink" title=".+?用法"></a>.+?用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">非贪婪模式<span class="number">2</span></span><br><span class="line">&lt;img src=``test.jpg` width=`60px` height=`80px`/&gt;</span><br><span class="line">src=<span class="string">&#x27;.*?&#x27;</span>则搜索出来的结果是：src=<span class="string">&#x27;&#x27;</span></span><br><span class="line">非贪婪模式<span class="number">3</span></span><br><span class="line">.+? 表示至少匹配一个字符串</span><br><span class="line">src=<span class="string">&#x27;.+?&#x27;</span>则搜索出来的结果是：src=<span class="string">&#x27;’test.img&#x27;</span></span><br><span class="line">content3 = <span class="string">&quot;&lt;img src=&#x27;&#x27;test.jpg&#x27; width=&#x27;60px&#x27; height=&#x27;80px&#x27;/&gt;&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;.*(src=&#x27;.+?&#x27;)&quot;</span>, content3)</span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line">运行</span><br><span class="line">src=<span class="string">&#x27;&#x27;</span>test.jpg<span class="string">&#x27;</span></span><br><span class="line"><span class="string">(0, 20)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修饰符</span></span><br><span class="line">content4 = <span class="string">&quot;&quot;&quot;hello 123456 world this </span></span><br><span class="line"><span class="string">    is a regex demo&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 正常情况下上面字符串有换行符，因此无法匹配，因为.代表匹配任意除了换行符以外的字符</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;he.*?(\d+).*demo$&#x27;</span>, content4)</span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 传入第三个参数re.S</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;he.*?(\d+).*demo$&#x27;</span>, content4, re.S)</span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>常见修饰符<br><code>re.S</code><strong>使得.可以匹配换行符</strong><br><code>re.I</code><strong>使匹配对大小写不敏感</strong><br><code>re.M</code>多行匹配，影响<code>^和$</code><br><code>re.L</code>做本地化识别<br><code>re.U</code>根据Unicode字符集识别，会影响<code>\w\W\b\B</code><br><code>re.X</code>更灵活的格式</p>
<h1 id="转义匹配"><a href="#转义匹配" class="headerlink" title="转义匹配"></a>转义匹配</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转义匹配</span></span><br><span class="line">content5 = <span class="string">&#x27;(百度)www.baidu.com&#x27;</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;\(百度\)www\.baidu\.com&#x27;</span>, content5)</span><br><span class="line"><span class="built_in">print</span>(content5)</span><br><span class="line">输出</span><br><span class="line">(百度)www.baidu.com</span><br></pre></td></tr></table></figure>
<p>当遇到特殊字符的时候可以使用<code>\</code>转义</p>
<h1 id="search方法"><a href="#search方法" class="headerlink" title="search方法"></a>search方法</h1><ul>
<li>扫描整个字符串，并返回第一个匹配</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># search方法</span></span><br><span class="line">content6 = <span class="string">&#x27;extra stings hello 123456 world this is regex demo&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;hello.*?(d+).*?demo&#x27;</span>, content6)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 换用search</span></span><br><span class="line">result = re.search(<span class="string">&#x27;hello.*?(d+).*?demo&#x27;</span>, content6)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">输出结果</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">13</span>, <span class="number">50</span>), match=<span class="string">&#x27;hello 123456 world this is regex demo&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>case2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content7 = <span class="string">&quot;&quot;&quot;&lt;div id=&quot;songs-list&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;经典歌曲&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class=&quot;introduction&quot;&gt;</span></span><br><span class="line"><span class="string">    经典歌曲列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view=&quot;2&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/2.mp3&quot; singer=&quot;田馥甄&quot;&gt;小幸运&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view=&quot;3&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/3.mp3&quot; singer=&quot;吴青峰&quot;&gt;带我走&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view=&quot;4&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/4.mp3&quot; singer=&quot;苏打绿&quot;&gt;小情歌&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view=&quot;5&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/5.mp3&quot; singer=&quot;飞儿乐团&quot;&gt;月牙湾&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 要开启换行</span></span><br><span class="line">result = re.search(<span class="string">&#x27;singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, content7, re.S)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">运行结果</span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">183</span>, <span class="number">203</span>), match=<span class="string">&#x27;singer=&quot;田馥甄&quot;&gt;小幸运&lt;/a&gt;&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<h1 id="findall方法"><a href="#findall方法" class="headerlink" title="findall方法"></a>findall方法</h1><p>返回所有匹配的结果，以列表方式存储</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.findall(<span class="string">&#x27;singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, content7, re.S)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">运行结果</span><br><span class="line">[(<span class="string">&#x27;田馥甄&#x27;</span>, <span class="string">&#x27;小幸运&#x27;</span>), (<span class="string">&#x27;吴青峰&#x27;</span>, <span class="string">&#x27;带我走&#x27;</span>), (<span class="string">&#x27;苏打绿&#x27;</span>, <span class="string">&#x27;小情歌&#x27;</span>), (<span class="string">&#x27;飞儿乐团&#x27;</span>, <span class="string">&#x27;月牙湾&#x27;</span>)]</span><br><span class="line">(<span class="string">&#x27;田馥甄&#x27;</span>, <span class="string">&#x27;小幸运&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;吴青峰&#x27;</span>, <span class="string">&#x27;带我走&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;苏打绿&#x27;</span>, <span class="string">&#x27;小情歌&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;飞儿乐团&#x27;</span>, <span class="string">&#x27;月牙湾&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="sub方法"><a href="#sub方法" class="headerlink" title="sub方法"></a>sub方法</h1><p>替换或修改文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sub</span></span><br><span class="line">content8 = <span class="string">&#x27;kfhdkfhg43jkh43k434h2h46h45&#x27;</span></span><br><span class="line"><span class="comment"># content8 = re.search(r&#x27;\d&#x27;, content8)</span></span><br><span class="line"><span class="comment"># print(content8)</span></span><br><span class="line">content8 = re.sub(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, content8)</span><br><span class="line"><span class="built_in">print</span>(content8)</span><br><span class="line">运行结果</span><br><span class="line">kfhdkfhgjkhkhhh</span><br></pre></td></tr></table></figure>
<h1 id="compile方法"><a href="#compile方法" class="headerlink" title="compile方法"></a>compile方法</h1><p>编译成字符表达式，没看出来什么用，还不如直接传写好的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compile</span></span><br><span class="line">c1 = <span class="string">&#x27;2021年3月7日20:18:23&#x27;</span></span><br><span class="line">c2 = <span class="string">&#x27;2021年3月7日20:18:32&#x27;</span></span><br><span class="line">c3 = <span class="string">&#x27;2021年3月7日20:18:39&#x27;</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d&#123;2&#125;:\d&#123;2&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pattern)</span><br><span class="line">r1 = re.sub(pattern, <span class="string">&#x27;&#x27;</span>, c1)</span><br><span class="line">r2 = re.sub(pattern, <span class="string">&#x27;&#x27;</span>, c2)</span><br><span class="line">r3 = re.sub(pattern, <span class="string">&#x27;&#x27;</span>, c3)</span><br><span class="line"><span class="built_in">print</span>(r1)</span><br><span class="line"><span class="built_in">print</span>(r2)</span><br><span class="line"><span class="built_in">print</span>(r3)</span><br><span class="line">运行结果</span><br><span class="line"><span class="number">2021</span>年<span class="number">3</span>月<span class="number">7</span>日:<span class="number">23</span></span><br><span class="line"><span class="number">2021</span>年<span class="number">3</span>月<span class="number">7</span>日:<span class="number">32</span></span><br><span class="line"><span class="number">2021</span>年<span class="number">3</span>月<span class="number">7</span>日:<span class="number">39</span></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python简单读取一个网页</title>
    <url>/2021/02/24/Python/python%E7%AE%80%E5%8D%95%E8%AF%BB%E5%8F%96%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5-python-jian-dan-du-qu-yi-ge-wang-ye/</url>
    <content><![CDATA[<h1 id="urlopen基本用法"><a href="#urlopen基本用法" class="headerlink" title="urlopen基本用法"></a>urlopen基本用法</h1><p>参考文档：<a href="https://docs.python.org/zh-cn/3/library/urllib.request.html#module-urllib.request">https://docs.python.org/zh-cn/3/library/urllib.request.html#module-urllib.request</a><br><code>urlopen(url)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># request的urlopen方法基本使用</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"><span class="comment"># 调用read对象可以读取网页的内容</span></span><br><span class="line"><span class="comment"># 调用status属性可以获取状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.status)</span><br><span class="line"><span class="comment"># 调用getheaders方法可以获取header头部信息</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br><span class="line"><span class="built_in">print</span>(response.getheader(<span class="string">&#x27;server&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><code>urlopen(url,data,timeout)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;world&#x27;</span>: <span class="string">&quot;hello&quot;</span>&#125;), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 其中第二个参数是可选</span></span><br><span class="line"><span class="comment"># 若选了其格式必须是byte格式</span></span><br><span class="line"><span class="comment"># 有这个参数就不再是get-&gt;post</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.read())</span><br><span class="line"><span class="comment"># timeout参数:设置超时时间</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用try catch 捕获，若超时则输出错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">0.02</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason, socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Time out&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="url-request-Request-用法"><a href="#url-request-Request-用法" class="headerlink" title="url.request.Request()用法"></a>url.request.Request()用法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同过Request方法构造数据结构</span></span><br><span class="line">request = urllib.request.Request(<span class="string">&#x27;http://python.org&#x27;</span>)</span><br><span class="line">respose = urllib.request.urlopen(request)</span><br><span class="line"><span class="built_in">print</span>(respose.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>包装作用<br>req = <code>Request(需要包装的数据若干)</code><br><code>urlopen(req)</code><br>不同：传入的参数是经过包装的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据结构</span></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible;MSIE 5.5;Windows NT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;httpbin.org&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dict</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Germey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 包装data</span></span><br><span class="line">data = <span class="built_in">bytes</span>(parse.urlencode(<span class="built_in">dict</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用Request包装数据</span></span><br><span class="line">req = request.Request(url=url, data=data, headers=headers, method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用urlopen方法</span></span><br><span class="line">response = request.urlopen(req)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python类的用法</title>
    <url>/2021/03/03/Python/python%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95-python-lei-de-yong-fa/</url>
    <content><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h1><h2 id="1-1基本格式"><a href="#1-1基本格式" class="headerlink" title="1.1基本格式"></a>1.1基本格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名()：</span></span><br><span class="line"><span class="class">	<span class="title">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">		</span><br><span class="line">		...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟小狗&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化属性name和page&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令蹲下&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&#x27;is now setting&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗打滚&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&#x27;rolled over&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="1-2-init-方法"><a href="#1-2-init-方法" class="headerlink" title="1.2_init_方法"></a>1.2_init_方法</h2><ul>
<li>是内置的方法</li>
<li>其第一个参数必须是self</li>
<li>类在创建示例时它是指向实例的引用</li>
<li>self不需要传递任何实参，会自动传递</li>
</ul>
<h2 id="1-3类里面的方法"><a href="#1-3类里面的方法" class="headerlink" title="1.3类里面的方法"></a>1.3类里面的方法</h2><p>类里面的函数叫做方法，用法与函数一致</p>
<h2 id="1-4python2里面创建类"><a href="#1-4python2里面创建类" class="headerlink" title="1.4python2里面创建类"></a>1.4python2里面创建类</h2><ul>
<li>多了一个<code>object</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br></pre></td></tr></table></figure>
<h1 id="2-用类创建实例"><a href="#2-用类创建实例" class="headerlink" title="2.用类创建实例"></a>2.用类创建实例</h1>case<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">&#x27;tom&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my dog name is &#x27;</span> + my_dog.name.title())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my dog is &#x27;</span>+ <span class="built_in">str</span>(my_dog.age) + <span class="string">&#x27;yeas old&#x27;</span>)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">my dog name <span class="keyword">is</span> Tom</span><br><span class="line">my dog <span class="keyword">is</span> 2yeas old</span><br></pre></td></tr></table></figure></li>
<li>语法：<code>实例名 = 类名(传入参数)</code></li>
<li>类一般用大写，实例名一般用实例</li>
</ul>
<h1 id="3-访问实例属性"><a href="#3-访问实例属性" class="headerlink" title="3.访问实例属性"></a>3.访问实例属性</h1><p><code>实例名.属性名</code></p>
<h1 id="4-调用实例方法"><a href="#4-调用实例方法" class="headerlink" title="4.调用实例方法"></a>4.调用实例方法</h1><p><code>实例名.方法名</code></p>
<h1 id="5-指定默认值"><a href="#5-指定默认值" class="headerlink" title="5.指定默认值"></a>5.指定默认值</h1><ul>
<li>可以在<code>_init_</code>方法里指定属性的默认值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span> <span class="comment">#指定默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_desc_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个汽车已经有&quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&#x27;公里&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_desc_name())</span><br><span class="line"><span class="built_in">print</span>(my_new_car.read_odometer())</span><br><span class="line"></span><br><span class="line">运行</span><br><span class="line"><span class="number">2016</span> Audi A4</span><br><span class="line">这个汽车已经有<span class="number">0</span>公里</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="6-修改属性的值"><a href="#6-修改属性的值" class="headerlink" title="6.修改属性的值"></a>6.修改属性的值</h1></li>
</ul>
<ol>
<li><p>直接修改属性的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接修改属性的值</span></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"></span><br><span class="line">运行</span><br><span class="line">这个汽车已经有<span class="number">23</span>公里</span><br></pre></td></tr></table></figure></li>
<li><p>通过类内部定义方法来修改属性值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类定义省略</span><br><span class="line">其他方法省略</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程值设定为指定值&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 调用方法来修改属性值</span></span><br><span class="line">my_new_car.update_odometer(<span class="number">24</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">这个汽车已经有<span class="number">24</span>公里</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>通过类内的方法来递增属性值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span> <span class="comment">#指定默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_desc_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个汽车已经有&quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&#x27;公里&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程值设定为指定值&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读书增加指定量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_desc_name())</span><br><span class="line"><span class="built_in">print</span>(my_new_car.read_odometer())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接修改属性的值</span></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方法来修改属性值</span></span><br><span class="line">my_new_car.update_odometer(<span class="number">24</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过调用方法来递增属性值</span></span><br><span class="line">my_new_car.increment_odometer(<span class="number">100</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line"><span class="number">2016</span> Audi A4</span><br><span class="line">这个汽车已经有<span class="number">0</span>公里</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">这个汽车已经有<span class="number">23</span>公里</span><br><span class="line">这个汽车已经有<span class="number">24</span>公里</span><br><span class="line">这个汽车已经有<span class="number">124</span>公里</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="7-继承"><a href="#7-继承" class="headerlink" title="7.继承"></a>7.继承</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟汽车&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_desc_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这个汽车已经有&#x27;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&#x27;公里了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;你不能更改里程！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义电动汽车&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_desc_name())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>父类与子类在一个文件内</li>
<li>父类必须在子类前面</li>
<li>子类在括号内<code>class ElectricCar(Car):</code>必须有父类作为参数</li>
<li>子类<code>__init__</code>方法指定接受的参数，可以与父类一致，也可以不一致</li>
<li>子类中<code>__init__</code>的<code>super(）</code>用于与父类关联<br>语法简易总结<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span>():</span></span><br><span class="line"> 	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,更多形参</span>):</span></span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span>(<span class="params">father</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,更多形参</span>):</span></span><br><span class="line">		<span class="built_in">super</span>().__init__(实参们)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>python2.7中继承<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span>:</span></span><br><span class="line"> 	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,更多形参</span>):</span></span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span>(<span class="params">father</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,更多形参</span>):</span></span><br><span class="line">	<span class="built_in">super</span>(father,self).__init__(实参们)</span><br></pre></td></tr></table></figure>
区别：supe<code>super(father,self).__init__(形参们)</code>需两个实参，一个类名，一个self</li>
</ul>
<h1 id="8-给子类添加自己的方法和属性"><a href="#8-给子类添加自己的方法和属性" class="headerlink" title="8.给子类添加自己的方法和属性"></a>8.给子类添加自己的方法和属性</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟汽车&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_desc_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这个汽车已经有&#x27;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&#x27;公里了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;你不能更改里程！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义电动汽车&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        <span class="comment"># 定义电动车的电量</span></span><br><span class="line">        self.bettery_size = <span class="number">70</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">desc_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印电平容量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这台电动车的电量是：&quot;</span> + <span class="built_in">str</span>(self.bettery_size))</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_desc_name())</span><br><span class="line">my_tesla.desc_battery()</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line"><span class="number">2016</span> tesla model s</span><br><span class="line">这台电动车的电量是：<span class="number">70</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="9-重写父类方法"><a href="#9-重写父类方法" class="headerlink" title="9.重写父类方法"></a>9.重写父类方法</h1><p>没什么，直接在子类重写就行…..</p>
<h1 id="10-使用实例（类）做属性"><a href="#10-使用实例（类）做属性" class="headerlink" title="10.使用实例（类）做属性"></a>10.使用实例（类）做属性</h1><ul>
<li>主要是注意写法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟汽车&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_desc_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这个汽车已经有&#x27;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&#x27;公里了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;你不能更改里程！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义电池&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, better_size=<span class="number">70</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电池属性&quot;&quot;&quot;</span></span><br><span class="line">        self.battery_size = better_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">desc_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印电池容量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前电池容量：&#x27;</span> + <span class="built_in">str</span>(self.battery_size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义电动汽车&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        <span class="comment"># 定义电动车的电池※</span></span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def desc_battery(self):</span></span><br><span class="line">    <span class="comment">#     &quot;&quot;&quot;打印电平容量&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#     print(&quot;这台电动车的电量是：&quot; + str(self.bettery_size))</span></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_desc_name())</span><br><span class="line">my_tesla.battery.desc_battery()</span><br></pre></td></tr></table></figure></li>
<li>就是类可以作为一个属性，写的时候<code>self.属性 = 类()</code>，不要忘记括号</li>
<li>调用<code>实例名.属性.属性</code></li>
</ul>
<h1 id="11-导入类"><a href="#11-导入类" class="headerlink" title="11.导入类"></a>11.导入类</h1><p>总体来说与导入函数模块差不多</p>
<ul>
<li><p>一个py文件可以有多个类，我们称这个py文件是一个模块</p>
</li>
<li><p>如何导入单个或多个类<br><code>from 文件名 impor 文件中类名,2,3.......</code>导入多个或一个逗号分隔，直接使用类名即可</p>
</li>
<li><p>导入整个模块中所有的类<code>import 文件名</code>，此时使用类必须使用<code>模块名.类名</code></p>
</li>
<li><p>导入整个模块中所有类2<code>from 文件名 import *</code>,此时可以直接使用类，但是不推荐，因为会导致冲突</p>
</li>
</ul>
<h1 id="12-模块导入模块"><a href="#12-模块导入模块" class="headerlink" title="12.模块导入模块"></a>12.模块导入模块</h1><p>electic_car.py模块 是依赖car的，因此需要导入car模块，你不导入实例化会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Electric_car</span>():</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p>事实表述意思就是模块也可以使用导入语句，因为如上不同模块之间也有依赖关系</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python类编码风格</title>
    <url>/2021/03/01/Python/python%E7%B1%BB%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC-python-lei-bian-ma-feng-ge/</url>
    <content><![CDATA[<ol>
<li>类名驼峰命名法</li>
<li>实例名和模块名小写，之间用下划线</li>
<li>每个类定义后跟一个文档注释</li>
<li>每个模块也应该跟一个文档字符串</li>
<li>每个方法名下面也要跟一个文档注释</li>
<li>两个空行分隔类</li>
<li>类中用一个空行分隔方法</li>
<li>先导入标准库，后空行，再导入你自己写模块</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC实现上传Excel文件并读取至数据库.md</title>
    <url>/2018/07/20/Spring/SpringMVC%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0Excel%E6%96%87%E4%BB%B6%E5%B9%B6%E8%AF%BB%E5%8F%96%E8%87%B3%E6%95%B0%E6%8D%AE%E5%BA%93.md-2019102314154190575/</url>
    <content><![CDATA[<p>title: SpringMVC实现上传Excel文件并读取至数据库<br>date: ‘2018-07-20 12:19:30’<br>updated: ‘2018-07-20 13:02:39’<br>tags: [SpringMVC, 文件上传, 后端]<br>permalink: /articles/2018/07/20/1532060369942.html</p>
<hr>
<h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--文件上传--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.xmlbeans&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;xmlbeans&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-添加WDWUtil-java工具类"><a href="#2-添加WDWUtil-java工具类" class="headerlink" title="2.添加WDWUtil.java工具类"></a>2.添加WDWUtil.java工具类</h2><p>用于判断Excel版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package tk.mybatis.web.util.fileutil;</span><br><span class="line"></span><br><span class="line">public class WDWUtil &#123;</span><br><span class="line">    // @描述：是否是2003的excel，返回true是2003</span><br><span class="line">    public static boolean isExcel2003(String filePath)  &#123;</span><br><span class="line">        return filePath.matches(&quot;^.+\\.(?i)(xls)$&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //@描述：是否是2007的excel，返回true是2007</span><br><span class="line">    public static boolean isExcel2007(String filePath)  &#123;</span><br><span class="line">        return filePath.matches(&quot;^.+\\.(?i)(xlsx)$&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-创建Read-java文件"><a href="#3-创建Read-java文件" class="headerlink" title="3.创建Read.java文件"></a>3.创建Read.java文件</h2><p>用于读取Excel,<strong>实体类根据实际情况自己替换</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package tk.mybatis.web.util.fileutil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">import org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line">import tk.mybatis.web.model.Message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ReadExcel &#123;</span><br><span class="line">    //总行数</span><br><span class="line">    private int totalRows = 0;</span><br><span class="line">    //总条数</span><br><span class="line">    private int totalCells = 0;</span><br><span class="line">    //错误信息接收器</span><br><span class="line">    private String errorMsg;</span><br><span class="line">    //构造方法</span><br><span class="line">    public ReadExcel()&#123;&#125;</span><br><span class="line">    //获取总行数</span><br><span class="line">    public int getTotalRows()  &#123; return totalRows;&#125;</span><br><span class="line">    //获取总列数</span><br><span class="line">    public int getTotalCells() &#123;  return totalCells;&#125;</span><br><span class="line">    //获取错误信息</span><br><span class="line">    public String getErrorInfo() &#123; return errorMsg; &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证EXCEL文件</span><br><span class="line">     * @param filePath</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean validateExcel(String filePath)&#123;</span><br><span class="line">        if (filePath == null || !(WDWUtil.isExcel2003(filePath) || WDWUtil.isExcel2007(filePath)))&#123;</span><br><span class="line">            errorMsg = &quot;文件名不是excel格式&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读EXCEL文件，获取客户信息集合</span><br><span class="line">     * @param</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Message&gt; getExcelInfo(String fileName, MultipartFile Mfile)&#123;</span><br><span class="line"></span><br><span class="line">        //把spring文件上传的MultipartFile转换成CommonsMultipartFile类型</span><br><span class="line">        CommonsMultipartFile cf= (CommonsMultipartFile)Mfile; //获取本地存储路径</span><br><span class="line">        File file = new  File(&quot;D:\\fileupload&quot;);</span><br><span class="line">        //创建一个目录 （它的路径名由当前 File 对象指定，包括任一必须的父路径。）</span><br><span class="line">        if (!file.exists()) file.mkdirs();</span><br><span class="line">        //新建一个文件</span><br><span class="line">        File file1 = new File(&quot;D:\\fileupload\\&quot; + new Date().getTime() + &quot;.xlsx&quot;);</span><br><span class="line">        //将上传的文件写入新建的文件中</span><br><span class="line">        try &#123;</span><br><span class="line">            cf.getFileItem().write(file1);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //初始化客户信息的集合</span><br><span class="line">        List&lt;Message&gt; customerList=new ArrayList&lt;Message&gt;();</span><br><span class="line">        //初始化输入流</span><br><span class="line">        InputStream is = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            //验证文件名是否合格</span><br><span class="line">            if(!validateExcel(fileName))&#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            //根据文件名判断文件是2003版本还是2007版本</span><br><span class="line">            boolean isExcel2003 = true;</span><br><span class="line">            if(WDWUtil.isExcel2007(fileName))&#123;</span><br><span class="line">                isExcel2003 = false;</span><br><span class="line">            &#125;</span><br><span class="line">            //根据新建的文件实例化输入流</span><br><span class="line">            is = new FileInputStream(file1);</span><br><span class="line">            //根据excel里面的内容读取客户信息</span><br><span class="line">            customerList = getExcelInfo(is, isExcel2003);</span><br><span class="line">            is.close();</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally&#123;</span><br><span class="line">            if(is !=null)</span><br><span class="line">            &#123;</span><br><span class="line">                try&#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;catch(IOException e)&#123;</span><br><span class="line">                    is = null;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return customerList;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 根据excel里面的内容读取客户信息</span><br><span class="line">     * @param is 输入流</span><br><span class="line">     * @param isExcel2003 excel是2003还是2007版本</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public  List&lt;Message&gt; getExcelInfo(InputStream is,boolean isExcel2003)&#123;</span><br><span class="line">        List&lt;Message&gt; customerList=null;</span><br><span class="line">        try&#123;</span><br><span class="line">            /** 根据版本选择创建Workbook的方式 */</span><br><span class="line">            Workbook wb = null;</span><br><span class="line">            //当excel是2003时</span><br><span class="line">            if(isExcel2003)&#123;</span><br><span class="line">                wb = new HSSFWorkbook(is);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;//当excel是2007时</span><br><span class="line">                wb = new XSSFWorkbook(is);</span><br><span class="line">            &#125;</span><br><span class="line">            //读取Excel里面客户的信息</span><br><span class="line">            customerList=readExcelValue(wb);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException e)  &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return customerList;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel里面客户的信息</span><br><span class="line">     * @param wb</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Message&gt; readExcelValue(Workbook wb)&#123;</span><br><span class="line">        //得到第一个shell</span><br><span class="line">        Sheet sheet=wb.getSheetAt(0);</span><br><span class="line"></span><br><span class="line">        //得到Excel的行数</span><br><span class="line">        this.totalRows=sheet.getPhysicalNumberOfRows();</span><br><span class="line"></span><br><span class="line">        //得到Excel的列数(前提是有行数)</span><br><span class="line">        if(totalRows&gt;=1 &amp;&amp; sheet.getRow(0) != null)&#123;</span><br><span class="line">            this.totalCells=sheet.getRow(0).getPhysicalNumberOfCells();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Message&gt; customerList=new ArrayList&lt;Message&gt;();</span><br><span class="line">        Message customer;</span><br><span class="line">        //循环Excel行数,从第二行开始。标题不入库</span><br><span class="line">        for(int r=1;r&lt;totalRows;r++)&#123;</span><br><span class="line">            Row row = sheet.getRow(r);</span><br><span class="line">            if (row == null) continue;</span><br><span class="line">            customer = new Message();</span><br><span class="line"></span><br><span class="line">            //循环Excel的列</span><br><span class="line">            for(int c = 0; c &lt;=this.totalCells; c++)&#123;</span><br><span class="line">                Cell cell = row.getCell(c);</span><br><span class="line">                if (null != cell)&#123;</span><br><span class="line">                    if(c==0)&#123;//第一列不读</span><br><span class="line">                    &#125;else if(c==1)&#123;</span><br><span class="line">                        System.out.println(cell.getStringCellValue());</span><br><span class="line">                        customer.setMsgType(cell.getStringCellValue());//客户名称</span><br><span class="line">                    &#125;else if (c==2)&#123;</span><br><span class="line">                        System.out.println(cell.getStringCellValue());</span><br><span class="line">                        customer.setContent(cell.getStringCellValue());//客户名称</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //添加客户</span><br><span class="line">            customerList.add(customer);</span><br><span class="line">        &#125;</span><br><span class="line">        return customerList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-创建服务层"><a href="#4-创建服务层" class="headerlink" title="4.创建服务层"></a>4.创建服务层</h2><p><strong>数据库层根据实际情况编写</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package tk.mybatis.web.service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">import tk.mybatis.web.model.Message;</span><br><span class="line">import tk.mybatis.web.util.fileutil.ReadExcel;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UploadService &#123;</span><br><span class="line">    //批量导入客户</span><br><span class="line">    public boolean batchImport(String name,MultipartFile file)&#123;</span><br><span class="line">        boolean b = false;</span><br><span class="line">        //创建处理EXCEL</span><br><span class="line">        ReadExcel readExcel=new ReadExcel();</span><br><span class="line">        //解析excel，获取客户信息集合。</span><br><span class="line">        List&lt;Message&gt; customerList = readExcel.getExcelInfo(name ,file);</span><br><span class="line">        System.out.println(customerList);</span><br><span class="line">        if(customerList != null)&#123;</span><br><span class="line">            b = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //迭代添加客户信息（注：实际上这里也可以直接将customerList集合作为参数，在Mybatis的相应映射文件中使用foreach标签进行批量添加。）</span><br><span class="line">        for(Message customer:customerList)&#123;</span><br><span class="line">            System.out.println(customer.toString());</span><br><span class="line">            //Dao层根据实际情况编写</span><br><span class="line">        &#125;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-创建控制层"><a href="#5-创建控制层" class="headerlink" title="5.创建控制层"></a>5.创建控制层</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package tk.mybatis.web.controller;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.logging.Log;</span><br><span class="line">import org.apache.commons.logging.LogFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">import tk.mybatis.web.service.impl.UploadService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;addController/&quot;)</span><br><span class="line">public class FileUploadController &#123;</span><br><span class="line"></span><br><span class="line">    private static Log log = LogFactory.getLog(FileUploadController.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    private UploadService customerService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;batchimport&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String batchimport(@RequestParam(value=&quot;filename&quot;) MultipartFile file,</span><br><span class="line">                              HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        log.info(&quot;AddController ..batchimport() start&quot;);</span><br><span class="line">        //判断文件是否为空</span><br><span class="line">        if(file==null) return null;</span><br><span class="line">        //获取文件名</span><br><span class="line">        String name=file.getOriginalFilename();</span><br><span class="line">        //进一步判断文件是否为空（即判断其大小是否为0或其名称是否为null）</span><br><span class="line">        long size=file.getSize();</span><br><span class="line">        if(name==null || (&quot;&quot;).equals(name) &amp;&amp; size==0) return null;</span><br><span class="line"></span><br><span class="line">        //批量导入。参数：文件名，文件。</span><br><span class="line">        boolean b = customerService.batchImport(name,file);</span><br><span class="line">        if(b)&#123;</span><br><span class="line">            String Msg =&quot;impot success！&quot;;</span><br><span class="line">            request.getSession().setAttribute(&quot;msg&quot;,Msg);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            String Msg =&quot;import failed！&quot;;</span><br><span class="line">            request.getSession().setAttribute(&quot;msg&quot;,Msg);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;addfile&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-前端页面"><a href="#6-前端页面" class="headerlink" title="6.前端页面"></a>6.前端页面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">         pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    String importMsg=&quot;&quot;;</span><br><span class="line">    if(request.getSession().getAttribute(&quot;msg&quot;)!=null)&#123;</span><br><span class="line">        importMsg=request.getSession().getAttribute(&quot;msg&quot;).toString();</span><br><span class="line">    &#125;</span><br><span class="line">    request.getSession().setAttribute(&quot;msg&quot;, &quot;&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;批量导入&lt;/title&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;&lt;font color=&quot;bule&quot;&gt;批量导入&lt;/font&gt;&lt;/div&gt;</span><br><span class="line">&lt;form action=&quot;addController/batchimport&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; onsubmit=&quot;return check();&quot;&gt;</span><br><span class="line">    &lt;div style=&quot;margin: 30px;&quot;&gt;&lt;input id=&quot;excel_file&quot; type=&quot;file&quot; name=&quot;filename&quot; accept=&quot;xlsx&quot; size=&quot;80&quot;/&gt;</span><br><span class="line">        &lt;input id=&quot;excel_button&quot; type=&quot;submit&quot; value=&quot;导入Excel&quot;/&gt;&lt;/div&gt;</span><br><span class="line">    &lt;font id=&quot;importMsg&quot; color=&quot;red&quot;&gt;&lt;%=importMsg%&gt;&lt;/font&gt;&lt;input type=&quot;hidden&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function check() &#123;</span><br><span class="line">        var excel_file = $(&quot;#excel_file&quot;).val();</span><br><span class="line">        if (excel_file == &quot;&quot; || excel_file.length == 0) &#123;</span><br><span class="line">            alert(&quot;请选择文件路径！&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        var msg=&quot;&quot;;</span><br><span class="line">        if($(&quot;#importMsg&quot;).text()!=null)&#123;</span><br><span class="line">            msg=$(&quot;#importMsg&quot;).text();</span><br><span class="line">        &#125;</span><br><span class="line">        if(msg!=&quot;&quot;)&#123;</span><br><span class="line">            alert(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring_AOP.md</title>
    <url>/2018/05/29/Spring/Spring_AOP.md-2019102314153853174/</url>
    <content><![CDATA[<p>title: Spring AOP<br>date: ‘2018-05-29 15:59:26’<br>updated: ‘2018-05-30 00:49:26’<br>tags: [Spring, AOP]<br>permalink: /articles/2018/05/29/1527580766021.html</p>
<hr>
<h2 id="有关AOP的三个名词"><a href="#有关AOP的三个名词" class="headerlink" title="有关AOP的三个名词"></a>有关AOP的三个名词</h2><p>|  名称   | 中文    |  解释   |<br>| — | — | — | — |<br>|   PointCut  |  切入点   | 程序运行的某个阶段点，如某个方法调用    |<br>|   Joint Point  | 连接点    | 连接点的集合是切入点    |<br>|    Adivice |通知|如输出日志的代码.|<br>|    Advisor |配置器|将通知注入切入点|</p>
<h2 id="Spring-AOP实现输出日志"><a href="#Spring-AOP实现输出日志" class="headerlink" title="Spring AOP实现输出日志"></a>Spring AOP实现输出日志</h2><h3 id="采用Interceptor-Around通知"><a href="#采用Interceptor-Around通知" class="headerlink" title="采用Interceptor Around通知"></a>采用Interceptor Around通知</h3><p>接口<br>TimeBookInerface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.aop.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeBookInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 具体执行业务的代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAuditing</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>FinanceInterface    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.aop.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FinanceInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCheck</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.aop.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xyz.log.aop.impl.TimeBookInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeBook</span> <span class="keyword">implements</span> <span class="title">TimeBookInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAuditing</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//审核数据相关代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.aop.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xyz.log.aop.impl.FinanceInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finance</span> <span class="keyword">implements</span> <span class="title">FinanceInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCheck</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.aop.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * interceptor around通知会在joint point 前后运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAround</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(<span class="keyword">this</span>.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负责输出日志的代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodInvocation 可以获得方法名称、程序传入的参数Object[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            logger.log(Level.INFO, methodInvocation.getArguments()[<span class="number">0</span>] + <span class="string">&quot;开始审核数据&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//.proceed()可以执行被调用的方法</span></span><br><span class="line">            Object result = methodInvocation.proceed();</span><br><span class="line">            <span class="comment">//返回值是被调用方法的返回值</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logger.log(Level.INFO, methodInvocation.getArguments()[<span class="number">0</span>] + <span class="string">&quot;审核数据结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">xml配置  </span><br><span class="line"></span><br><span class="line">``` xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--使用Spring aop 实现日志输出的Bean--&gt;</span><br><span class="line">    &lt;!--注册日志bean组件--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;log&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;xyz.log.aop.log.LogAround&quot;</span>/&gt;</span><br><span class="line">    &lt;!--审核程序--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;timeBook&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;xyz.log.aop.action.TimeBook&quot;</span>/&gt;</span><br><span class="line">    &lt;!--使用Spring ProxyFactoryBean来实现代理--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;logProxy&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;proxyInterfaces&quot;</span> &gt;</span><br><span class="line">            &lt;value&gt;xyz.log.aop.impl.TimeBookInterface&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;target&quot;</span> &gt;</span><br><span class="line">            &lt;ref bean=<span class="string">&quot;timeBook&quot;</span>/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--指定要代理的类--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;interceptorNames&quot;</span> &gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;log&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--财务审核--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;finance&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;xyz.log.aop.action.Finance&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;logProxy1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;proxyInterfaces&quot;</span> &gt;</span><br><span class="line">            &lt;value&gt;xyz.log.aop.impl.FinanceInterface&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;target&quot;</span> &gt;</span><br><span class="line">            &lt;ref bean=<span class="string">&quot;finance&quot;</span>/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--指定要代理的类--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;interceptorNames&quot;</span> &gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;log&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.aop.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> xyz.log.aop.impl.FinanceInterface;</span><br><span class="line"><span class="keyword">import</span> xyz.log.aop.impl.TimeBookInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过application context 获取XML</span></span><br><span class="line">        ApplicationContext actx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath:SpringConfig.xml&quot;</span>);</span><br><span class="line">        TimeBookInterface timeBookProxy = (TimeBookInterface) actx.getBean(<span class="string">&quot;logProxy&quot;</span>);</span><br><span class="line">        FinanceInterface financeProxy = (FinanceInterface) actx.getBean(<span class="string">&quot;logProxy1&quot;</span>);</span><br><span class="line">        timeBookProxy.doAuditing(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        financeProxy.doCheck(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring简介、模块和体系.md</title>
    <url>/2018/05/27/Spring/Spring%E7%AE%80%E4%BB%8B%E3%80%81%E6%A8%A1%E5%9D%97%E5%92%8C%E4%BD%93%E7%B3%BB.md-2019102314154123559/</url>
    <content><![CDATA[<p>title: Spring简介、模块和体系<br>date: ‘2018-05-27 01:27:31’<br>updated: ‘2018-05-27 01:59:14’<br>tags: [JavaEE, Spring]<br>permalink: /articles/2018/05/27/1527355650775.html</p>
<hr>
<h3 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h3><ul>
<li>Sping 是一个轻量级企业开发的一站式解决方案，用于解决Java EE开发中的所有问题。Spring框架主要提供IOC容器、AOP、数据访问、WEB开发、消息、测试相关技术的支持</li>
<li>Spring 采用简单的POJO来进行企业级开发。</li>
<li>POJO：Plain Ordinary Java Object简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。</li>
<li>Java对象-&gt;Bean&lt;-IOC容器来初始化，提供依赖管理和对象使用。<h3 id="Spring中的模块"><a href="#Spring中的模块" class="headerlink" title="Spring中的模块"></a>Spring中的模块</h3><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/7d0efef18fc842928cd604ef1732659f_1e559f862506b9bf46544c2890f4b37c_1527353485719.jpg" alt="1e559f862506b9bf46544c2890f4b37c_1527353485719jpg"> </li>
</ul>
<p><strong>核心容器</strong> </p>
<ul>
<li>Spring-Core：核心工具类</li>
<li>Spring-Beans：Spring定义bean的支持  </li>
<li>Spring-Context：运行时Spring容器  </li>
<li>Spring-Context：Spring容器对第三方包的集成支持  </li>
<li>Spring-Expression：使用表达式语言在进行查询时和操作的对象</li>
</ul>
<p><strong>AOP</strong>  </p>
<ul>
<li>Spring-AOP：基于代理的AspectJ的AOP支持  </li>
<li>Spring-Aspects：基于AspectJ的AOP支持  </li>
</ul>
<p><strong>消息</strong>    </p>
<ul>
<li>Spring-messaging：对消息架构和协议的支持  </li>
</ul>
<p><strong>Web</strong> </p>
<ul>
<li>Spring-Web：基础Web集成功能，Web项目的容器</li>
<li>Spring-Webmvc：基于Servlet的SpringMVC</li>
<li>Spring-WebSocket：提供Websocket功能</li>
<li>Spring-Webmvc-Portlet：提供Porlet环境支持  </li>
</ul>
<p><strong>数据访问/集成</strong> </p>
<ul>
<li>Spring-JDBC：提供以JDBC访问数据库的支持</li>
<li>Spring-TX：提供编程式和声明式的事务支持  </li>
<li>Spring-ORM：对象-关系映射支持  </li>
<li>Spring-OXM：对象-XML映射支持  </li>
<li>Spring-JMS：提供JMS支持</li>
</ul>
<h3 id="Spring中的模块-1"><a href="#Spring中的模块-1" class="headerlink" title="Spring中的模块"></a>Spring中的模块</h3><ul>
<li>Spring Framework(Core)： Spring的核心项目,其中包含了一系列的IOC容器的设计，提供了依赖注入的实现；同时,还集成了AOP,提供了面向切面编程的实现;当然还有MVC、JDBC、事务处理模块的实现。目前官网最高版本4.3.0</li>
<li>Spring Boot :提供了快速构建Spring应用,提供开发效率,达到 开箱即用—- 快速开始需求开发而不被其他方面影响 “即时运行”。</li>
<li>Spring Batch:提供构建批处理应用和自动化操作的框架，专门用于离线分析程序,数据批处理等场景。</li>
<li>Spring Data:提供使用非关系型数据的能力,比如当基础数据并非存储在关系数据库中,或MapReduce中的分布式存储、云计算存储环境等 </li>
<li>Spring Security:用户认证、授权、安全服务等工具,最先前在Spring社区中的名字是Acegi框架。</li>
<li>Spring Security OAuth:OAuth是一个第三方的模块,提供一个开放的协议的实现,通过这个协议前端桌面应用可以对web应用进行简单而标准的安全调用</li>
<li>Spring Web Flow:Web工作流引擎,定义了一种特定的语言来描述工作流,同时高级的工作流控制器引擎可以管理会话状态。</li>
<li>Spring BlazeDS Integration :提供Spring与Adobe Flex技术集成的模块。</li>
<li>Spring Dynamic Modules:提供Spring 应用运行在OSGi平台上 OSGi面向java的动态模型系统,Eclipse就是构建在OSGi平台上的。</li>
<li>Spring Intergration:为企业的数据集成提供了解决方案,</li>
<li>Spring AMQP:高级消息队列协议,支持java 和.NET两个版本。SpringSoruce旗下的Rabbit MQ就是一个开源的AMQP的消息服务器,Rabbit MQ 是用Erlang语言开发的。</li>
<li>Spring .NET：为.NET提供Spring相关的技术支持,如IOC容器、AOP等。</li>
<li>Spring Android:为Android终端开发应用提供Sring支持。</li>
<li>Spring Mobile:为移动终端的服务器应用开发提供支持</li>
<li>Spring Social：Spring框架的扩展,提供了SNS服务,如FaceBook和Twitter服务</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>BBR加速配置</title>
    <url>/2020/02/17/%E5%85%B6%E4%BB%96/BBR%E5%8A%A0%E9%80%9F%E9%85%8D%E7%BD%AE-bbr%E5%8A%A0%E9%80%9F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>bbr这个东西真乃神器，所以如果你的代理服务器在国外，强烈建议开启bbr的功能。我的小鸡使用的是debian 9，默认内核是支持bbr加速的，但是没有开启。如果你的系统过于陈旧，需要更新linux内核至4.9以上并编译安装bbr。<br>开启方法</p>
<pre><code>1. 修改系统变量

echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf
echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf

2. 保存生效

sysctl -p

3. 查看内核是否已开启BBR

sysctl net.ipv4.tcp_available_congestion_control

显示以下即已开启：

net.ipv4.tcp_available_congestion_control = bbr cubic reno

4. 查看BBR是否启动

lsmod | grep bbr

显示以下即启动成功：

# lsmod | grep bbr tcp_bbr 20480 14
</code></pre>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA_断点调试不进入class文件的方法.md</title>
    <url>/2018/07/20/%E5%85%B6%E4%BB%96/IDEA_%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E4%B8%8D%E8%BF%9B%E5%85%A5class%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95.md-2019102314160208592/</url>
    <content><![CDATA[<p>title: IDEA 断点调试不进入class文件的方法<br>date: ‘2018-07-20 10:59:53’<br>updated: ‘2018-07-20 10:59:53’<br>tags: [IDEA]<br>permalink: /articles/2018/07/20/1532055593214.html</p>
<hr>
<p>settings-&gt;build,execution,deployment-&gt;debugger-&gt;stepping，Do not step into the classes勾掉，不要用f7，调试用f8下一步</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA安装lombok插件.md</title>
    <url>/2018/06/19/%E5%85%B6%E4%BB%96/IDEA%E5%AE%89%E8%A3%85lombok%E6%8F%92%E4%BB%B6.md-2019102314160594386/</url>
    <content><![CDATA[<p>title: IDEA安装lombok插件<br>date: ‘2018-06-19 23:34:17’<br>updated: ‘2018-06-19 23:34:17’<br>tags: [IDEA]<br>permalink: /articles/2018/06/19/1529422457178.html</p>
<hr>
<p>项目中经常使用bean，entity等类，绝大部分数据类类中都需要get、set、toString、equals和hashCode方法，虽然eclipse和idea开发环境下都有自动生成的快捷方式，但自动生成这些代码后，如果bean中的属性一旦有修改、删除或增加时，需要重新生成或删除get/set等方法，给代码维护增加负担。而使用了lombok则不一样，使用了lombok的注解(@Setter,@Getter,@ToString,@@RequiredArgsConstructor,@EqualsAndHashCode或@Data)之后，就不需要编写或生成get/set等方法，很大程度上减少了代码量，而且减少了代码维护的负担。故强烈建议项目中使用lombok，去掉bean中get、set、toString、equals和hashCode等方法的代码。<br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/06/09881d2c1cba406fb35e2c29d8f1984f_Snipaste_20180619_233151.png" alt="Snipaste_20180619_233151png"><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/06/f7ce0e950fc7457bab0fb9056d376d92_Snipaste_20180619_233210.png" alt="Snipaste_20180619_233210png"><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/06/c45b05eefebd4dbd85a91185d637df76_Snipaste_20180619_233235.png" alt="Snipaste_20180619_233235png"> </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA配置注释模板</title>
    <url>/2019/07/13/%E5%85%B6%E4%BB%96/IDEA%E9%85%8D%E7%BD%AE%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF-idea%E9%85%8D%E7%BD%AE%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h4 id="1-打开如下配置界面"><a href="#1-打开如下配置界面" class="headerlink" title="1. 打开如下配置界面"></a>1. 打开如下配置界面</h4><p><img src="https://www.github.com/QuinnTian/imgchr/raw/master/imgs/1562991072983.png" alt="enter description here"></p>
<p>setting-&gt;live templates</p>
<h4 id="2-自己创建一个组"><a href="#2-自己创建一个组" class="headerlink" title="2. 自己创建一个组"></a>2. 自己创建一个组</h4><p>添加如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * <span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>$method$ method<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line">$params$</span><br><span class="line"> * @<span class="keyword">return</span> $return$</span><br><span class="line"> * @author &lt;a href=<span class="string">&quot;mailto:sdtkin1996@gmail.com&quot;</span>&gt;QuinnTian&lt;/a&gt; </span><br><span class="line"> * @since $DATE$ $time$ </span><br><span class="line"> */!</span><br></pre></td></tr></table></figure>

<h4 id="3-编辑参数列表"><a href="#3-编辑参数列表" class="headerlink" title="3. 编辑参数列表"></a>3. 编辑参数列表</h4><p><img src="https://www.github.com/QuinnTian/imgchr/raw/master/imgs/1562991209203.png" alt="enter description here"></p>
<p><img src="https://www.github.com/QuinnTian/imgchr/raw/master/imgs/1562991254605.png" alt="enter description here"></p>
<p>第二个参数脚本代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">groovyScript(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27; * @param &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\n&#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, methodParameters())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>IEDA_2018.1_安装插件_Mybatis_plugin_v3.58_crack_Iedis_v2.56_crack.md</title>
    <url>/2018/07/14/%E5%85%B6%E4%BB%96/IEDA_2018.1_%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6_Mybatis_plugin_v3.58_crack_Iedis_v2.56_crack.md-2019102314160545343/</url>
    <content><![CDATA[<p>title: IEDA 2018.1 安装插件 Mybatis plugin v3.58 crack Iedis v2.56 crack<br>date: ‘2018-07-14 11:55:54’<br>updated: ‘2018-07-14 12:07:40’<br>tags: [IDEA, Mybatis plugin]<br>permalink: /articles/2018/07/14/1531539806011.html</p>
<hr>
<p>ideaagent v1.2 下载地址 <a href="https://github.com/mrshawnho/ideaagent">https://github.com/mrshawnho/ideaagent</a><br>同时下载插件+破解软件 <a href="https://pan.baidu.com/s/1FgRz7r9Pu2fb2ybZkGFJVA">下载地址</a>密码：zju3</p>
<h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a><a href="https://shawnho.me/2017/12/20/ideaagent/#%E7%89%B9%E8%89%B2%E5%8A%9F%E8%83%BD" title="特色功能"></a>特色功能</h2><h3 id="ideaagent-v1-2"><a href="#ideaagent-v1-2" class="headerlink" title="ideaagent v1.2"></a><a href="https://shawnho.me/2017/12/20/ideaagent/#ideaagent-v1-2" title="ideaagent v1.2"></a>ideaagent v1.2</h3><p>Mybatis plugin v3.58 crack<br>Iedis v2.56 crack<br>支持 IntelliJ IDEA 2018.1</p>
<h3 id="ideaagent-v1-12"><a href="#ideaagent-v1-12" class="headerlink" title="ideaagent v1.12"></a><a href="https://shawnho.me/2017/12/20/ideaagent/#ideaagent-v1-12" title="ideaagent v1.12"></a>ideaagent v1.12</h3><p>Mybatis plugin v3.53 crack<br>Iedis v2.43 crack<br>支持 IntelliJ IDEA 2017.3.5</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a><a href="https://shawnho.me/2017/12/20/ideaagent/#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" title="使用方法"></a>使用方法</h2><ol>
<li> 下载 <a href="https://github.com/mrshawnho/ideaagent/releases">ideaagent-1.2.jar</a></li>
<li>打开 idea.vmoptions (Help -&gt; Edit Custom VM Options…)<br> 最下方插入 <code>-javaagent:/download/ideaagent-1.2.jar</code><br> <a href="https://shawnho.me/uploads/ideaagent/001.png"><img src="https://shawnho.me/uploads/ideaagent/001.png"></a></li>
<li>重启 idea<br> 首次启动需要信任本地服务器 ssl 证书，点击接受后如未激活，再次重启即可<br> <a href="https://shawnho.me/uploads/ideaagent/002.png"><img src="https://shawnho.me/uploads/ideaagent/002.png"></a></li>
</ol>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a><a href="https://shawnho.me/2017/12/20/ideaagent/#%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83" title="测试环境"></a>测试环境</h2><ol>
<li> Windows 10 &amp;&amp; MacOS High Sierra</li>
<li> JDK 1.8</li>
<li> IDEA 2018.1</li>
</ol>
<h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a><a href="https://shawnho.me/2017/12/20/ideaagent/#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0" title="技术实现"></a>技术实现</h2><ol>
<li> 使用 java instrumentation 创建代理</li>
<li> 使用 javassist 动态修改代码</li>
<li> 使用 vertx web 创建本地认证服务器<br>原文地址：<a href="https://shawnho.me/2017/12/20/ideaagent/">https://shawnho.me/2017/12/20/ideaagent/</a></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Idea插件.ignore用于忽略不需要提交Git的文件.md</title>
    <url>/2018/07/23/%E5%85%B6%E4%BB%96/Idea%E6%8F%92%E4%BB%B6.ignore%E7%94%A8%E4%BA%8E%E5%BF%BD%E7%95%A5%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8F%90%E4%BA%A4Git%E7%9A%84%E6%96%87%E4%BB%B6.md-2019102314160540242/</url>
    <content><![CDATA[<p>title: Idea插件.ignore用于忽略不需要提交Git的文件<br>date: ‘2018-07-23 11:20:40’<br>updated: ‘2018-08-16 08:27:00’<br>tags: [IDEA]<br>permalink: /articles/2018/07/23/1532316040291.html</p>
<hr>
<h2 id="标准的Maven结构"><a href="#标准的Maven结构" class="headerlink" title="标准的Maven结构"></a>标准的Maven结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  + project  </span><br><span class="line">2.    |  </span><br><span class="line">3.    + pom.xml  </span><br><span class="line">4.    |  </span><br><span class="line">5.    + src /  </span><br><span class="line">6.       + main /  </span><br><span class="line">7.       | + java    java源代码文件,最终会打包编译到WEB/INF下的classes目录  </span><br><span class="line">8.       | + resources 资源库，会自动复制到classes目录里  </span><br><span class="line">9.       | + filters  资源过滤文件  </span><br><span class="line">10.       | + webapp web应用程序资源文件  </span><br><span class="line">11.       + test /  </span><br><span class="line">12.       | + java  测试java源文件内容  </span><br><span class="line">13.       | + resources 测试的资源文件  </span><br><span class="line">14.       | + filters  测试的资源过滤文件  </span><br><span class="line">15.       + it /  </span><br><span class="line">16.       + assembly /  </span><br><span class="line">17.       + site / |  </span><br><span class="line">18.    + .idea /  </span><br><span class="line">19.    +  project.iml  </span><br><span class="line">20.  + LICENSE.txt   工程许可说明  </span><br><span class="line">21.  + NOTICE.txt   项目所需要的依赖的说明文件  </span><br><span class="line">22.  + README.txt 项目工程说明文档</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://res.quinntian.xyz//file/2018/07/52892db58d80427f90a7b8e9e7864adf_Snipaste_20180723_110629.png" alt="Snipaste_20180723_110629png"> </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>V2ray+caddy+tls+websocket配置全记录</title>
    <url>/2020/02/16/%E5%85%B6%E4%BB%96/V2ray+caddy+tls+websocket%E9%85%8D%E7%BD%AE%E5%85%A8%E8%AE%B0%E5%BD%95-v2raycaddytlswebsocket%E9%85%8D%E7%BD%AE%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>参考的安装过程<br>V2ray官方说明文档：<a href="https://www.v2ray.com/">https://www.v2ray.com/</a></p>
<h1 id="1-安装v2ray"><a href="#1-安装v2ray" class="headerlink" title="1. 安装v2ray"></a>1. 安装v2ray</h1><pre><code>参考网址：https://toutyrater.github.io/prep/install.html
wget https://install.direct/go.sh

sudo bash go.sh

查看位置 whereis v2ray
</code></pre>
<h1 id="2-编辑配置文件"><a href="#2-编辑配置文件" class="headerlink" title="2. 编辑配置文件"></a>2. 编辑配置文件</h1><pre><code>将配置文件vsftpd传送到本地电脑进行配置，配置好后进行覆盖。
uuid生成地址：https://www.uuidgenerator.net/
文件的位置位于：/etc/v2ray/config.json
&#123;
  &quot;inbounds&quot;: [
    &#123;&quot;sniffing&quot;: &#123;
        &quot;enabled&quot;: true,
        &quot;destOverride&quot;: [
          &quot;http&quot;,
          &quot;tls&quot;
        ]
      &#125;,
      &quot;port&quot;: 19966, // 服务器监听端口
      &quot;protocol&quot;: &quot;vmess&quot;,    // 主传入协议
      &quot;settings&quot;: &#123;
        &quot;clients&quot;: [
          &#123;
            &quot;id&quot;: &quot;&quot;,  // 用户 ID，客户端与服务器必须相同
            &quot;alterId&quot;: 196
          &#125;
        ]
      &#125;
    &#125;,
        &#123; &quot;sniffing&quot;: &#123;
        &quot;enabled&quot;: true,
        &quot;destOverride&quot;: [
          &quot;http&quot;,
          &quot;tls&quot;
        ]
      &#125;,
      &quot;port&quot;: 205, // 服务器监听端口
      &quot;protocol&quot;: &quot;vmess&quot;,    // 主传入协议
      &quot;settings&quot;: &#123;
        &quot;clients&quot;: [
          &#123;
            &quot;id&quot;: &quot;&quot;,  // 用户 ID，客户端与服务器必须相同
            &quot;alterId&quot;: 196
          &#125;
        ]
      &#125;,
          &quot;streamSettings&quot;: &#123;
        &quot;network&quot;: &quot;ws&quot;, //使用websocket协议作为传输协议
        &quot;wsSettings&quot;: &#123;
            &quot;path&quot;: &quot;/v2&quot; //WebSocket所使用的HTTP协议路径
                &#125;
        &#125;
    &#125;
  ],
  &quot;outbounds&quot;: [
    &#123;
      &quot;protocol&quot;: &quot;freedom&quot;,  // 主传出协议
      &quot;settings&quot;: &#123;&#125;
    &#125;,
        &#123;
      &quot;protocol&quot;: &quot;blackhole&quot;,
      &quot;settings&quot;: &#123;&#125;,
      &quot;tag&quot;: &quot;block&quot;
    &#125;
  ],
          &quot;routing&quot;: &#123;
                &quot;domainStrategy&quot;: &quot;AsIs&quot;,
                &quot;rules&quot;: [
                  &#123;
                        &quot;type&quot;: &quot;field&quot;,
                        &quot;outboundTag&quot;: &quot;block&quot;,
                        &quot;protocol&quot;: [
                          &quot;bittorrent&quot;
                        ]
                  &#125;
                ]
          &#125;
&#125;

v2ray自带的检查json格式的命令：
$ /usr/bin/v2ray/v2ray -test -config /etc/v2ray/config.json
如下提示为json格式正确
V2Ray v3.26 (die Commanderin) 20180614
A unified platform for anti-censorship.
Configuration OK.
遇到的坑
    ○ alterId: 不要设置过大，否则不识别，虽然官方文档给的数字很大。
    ○ 端口号不要设置过大，尤其是在用caddy转发的时候，caddy有bug比如你转发一个上万的端口号，无法转发。
</code></pre>
<h1 id="3-常见的命令"><a href="#3-常见的命令" class="headerlink" title="3. 常见的命令"></a>3. 常见的命令</h1><pre><code>systemctl status v2ray
</code></pre>
<h1 id="4-caddy安装"><a href="#4-caddy安装" class="headerlink" title="4. caddy安装"></a>4. caddy安装</h1><pre><code>在完成V2Ray的安装和配置后，下面就需要实现Web+TLS的功能了。我们可以使用源码或脚本的方式安装Caddy，但是因为Caddy使用的是Go语音编写的，可能需要golang的编译器，存在一些门槛，所以推荐脚本方式安装。运行下面的命令，等待脚本执行完成。
curl https://getcaddy.com | bash -s personal
是用caddy搭建tls简单，证书可以自申请。
</code></pre>
<h1 id="5-Caddy配置"><a href="#5-Caddy配置" class="headerlink" title="5. Caddy配置"></a>5. Caddy配置</h1><pre><code>我选择使用生产环境的配置，这样比较规范吧。一般情况下会放到 /etc/caddy 里。

mkdir /etc/caddy
touch /etc/caddy/Caddyfile
chown -R root:www-data /etc/caddy

除了配置文件，caddy 会自动生成 ssl 证书，需要一个文件夹放置 ssl 证书。

mkdir /etc/ssl/caddy
chown -R www-data:root /etc/ssl/caddy
chmod 0770 /etc/ssl/caddy

因为 ssl 文件夹里会放置私钥，所以权限设置成 770 禁止其他用户访问。
创建好这些文件和目录了之后，我们需要把 caddy 配置成一个服务，这样就可以开机自动运行，并且管理起来也方便。因为目前大多数发行版都使用 systemd 了，所以这里只讲一下如何配置 system。

# 从 github 下载 systemd 配置文件 
curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service 
sudo systemctl daemon-reload # 重新加载 systemd 配置

将caddy.service文件中以下三项配置选项的注释符#删除，如下：

CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE
NoNewPrivileges=true

启动Caddy服务。

systemctl enable caddy.service # 设置 caddy 服务自启动
systemctl status caddy.service # 查看 caddy 状态
</code></pre>
<h1 id="6-Caddy配置"><a href="#6-Caddy配置" class="headerlink" title="6. Caddy配置"></a>6. Caddy配置</h1><pre><code>ray.mydomain.me #你的站点域名
&#123;
  log /var/log/caddy/caddy.log
  tls test@csds.xxx
  proxy /v2ray localhost:1028 &#123; #注意这里需要与v2ray中配置的监听端口及WebSocket所使用的HTTP协议路径一致
    websocket
    header_upstream -Origin
  &#125;
&#125;
注意要有空格
第四行的 tls 指令告诉 caddy 为网站开启 https 并自动申请证书，后面的 email 参数是告知 CA 申请人的邮箱。（caddy 会默认使用 let’s encrypt 申请证书并续约，很方便吧）

这里需要注意一点的是，因为caddy.service中默认的进程运行用户和用户组为www-data，所以日志文件也需要让www-data用户能够有权限读写，当然你也可以选择将日志文件存放在配置文件目录中。

touch /var/log/caddy/caddy.log
chown -R root:www-data /var/log/caddy/
chmod 777 /var/log/caddy/caddy.log 
</code></pre>
<h1 id="7-配置v2rayN客户端"><a href="#7-配置v2rayN客户端" class="headerlink" title="7. 配置v2rayN客户端"></a>7. 配置v2rayN客户端</h1><pre><code>下载地址：https://github.com/2dust/v2rayN
</code></pre>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>XMind8破解版.md</title>
    <url>/2018/07/11/%E5%85%B6%E4%BB%96/XMind8%E7%A0%B4%E8%A7%A3%E7%89%88.md-2019102314154425017/</url>
    <content><![CDATA[<p>title: XMind8破解版<br>date: ‘2018-07-11 16:25:32’<br>updated: ‘2018-08-16 15:18:10’<br>tags: [xmind]<br>permalink: /articles/2018/07/11/1531297531630.html</p>
<hr>
<p><img src="https://res.quinntian.xyz//file/2018/07/d94d1d7c9503400bbc1cbcdbdccfd302_Snipaste_20180711_164834.png" alt="Snipaste_20180711_164834png"><br><strong>xmind 8 update 1补丁破解方法</strong></p>
<p>安装版本如果你安装的是 Xmind 8 原版，即全新安装，请根据以下教程执行破解：<br>Step 1 -全新下载最新版本的 Xmind 8（注必须是英文官方的版本，中文代{过}{滤}理网站的版本修改过，无法使用破解）。<br>Step 2 -安装完毕后，点击文末的下载按钮下载破解补丁文件包，将 XMindCrack.zip 内的文件解压到 Xmind 的安装目录，默认安装路径为 C:\Program Files (x86)\XMind；<br>Step 3 -将 XMindCrack.jar 复制到 D 盘根目录；<br>Step 4 -将 Xmind 安装目录下的 XMind.ini 复制至桌面，使用记事本打开增加一行“-javaagent:D:/XMindCrack.jar”（引号内的内容，引号无需复制），保存后将文件重新拖拽或者复制到 Xmind 的安装目录；<br>Step 5 -断开网络, 或者使用防火墙阻止 XMind 联网, 或者在 hosts 中添加 0.0.0.0 <a href="http://www.xmind.net(建议采用断网或者增加hosts记录法)./">www.xmind.net（建议采用断网或者增加hosts记录法）。</a><br>Step 6 -打开 XMind, “帮助-序列号”，随便输入邮箱地址和下面的序列号激活软件<br><strong>输入序列号</strong>，XAka34A2rVRYJ4XBIU35UZMUEEF64CMMIYZCK2FZZUQNODEKUHGJLFMSLIQMQUCUBXRENLK6NZL37JXP4PZXQFILMQ2RG5R7G4QNDO3PSOEUBOCDRYSSXZGRARV6MGA33TN2AMUBHEL4FXMWYTTJDEINJXUAV4BAYKBDCZQWVF3LWYXSDCXY546U3NBGOI3ZPAP2SO3CSQFNB7VVIY123456789012345</p>
<blockquote>
<p>关注微信公众号    回复关键字xmind</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>jdbc连接报The server time zone value &#39;ÖÐ¹ú±ê×¼Ê±¼ä&#39; is unrecognized o</title>
    <url>/2020/12/08/%E5%85%B6%E4%BB%96/jdbc%E8%BF%9E%E6%8E%A5%E6%8A%A5The%20server%20time%20zone%20value%20&#39;%C3%96%C3%90%C2%B9%C3%BA%C2%B1%C3%AA%C3%97%C2%BC%C3%8A%C2%B1%C2%BC%C3%A4&#39;%20is%20unrecognized%20o-jdbc%E8%BF%9E%E6%8E%A5%E6%8A%A5theservertimezonevalueisunrecognizedo/</url>
    <content><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote>
<p>在安装mysql的时候时区设置的不正确， mysql默认的是美国的时区，而我们中国大陆要比他们迟8小时，采用+8:00格式<br>使用的数据库是MySQL，没有指定MySQL驱动版本的情况下它自动依赖的驱动是8.0.12很高的版本，这是由于数据库和系统时区差异所造成的，在jdbc连接的url后面加上serverTimezone=GMT即可解决问题，如果需要使用gmt+8时区，需要写成GMT%2B8，否则会被解析为空。再一个解决办法就是使用低版本的MySQL jdbc驱动，5.1.28不会存在时区的问题。</p>
</blockquote>
<h1 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h1><p>在url配置加上  ?serverTimezone=GMT%2B8</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">localhost:3306/tk-admin?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br></pre></td></tr></table></figure>

<h1 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h1><p>修改mysql的my.ini配置文件</p>
<p>找到这个文件之后，在[mysqld]节点在节点下面加上下面这句话</p>
<p>default-time-zone=’+08:00’</p>
<p>然后记得重启MySQL的服务，打开cmd窗口登录MySQL执行show variables like ‘%time_zone%’;这句命令，</p>
<p>然后在mysql执行语句:</p>
<p>set global time_zone=’+8:00’</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>v2ray报错汇总</title>
    <url>/2022/01/06/%E5%85%B6%E4%BB%96/v2ray%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端报错</span><br><span class="line">app/proxyman/inbound: connection ends &gt; proxy/socks: connection ends &gt; context canceled</span><br><span class="line">V2Ray 4.41.1 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.16.6 windows/amd64)</span><br><span class="line">2022/01/06 00:43:37 [Info] [2751399112] app/proxyman/outbound: failed to process outbound traffic &gt; proxy/vmess/outbound: connection ends &gt; context canceled</span><br><span class="line">服务端报错</span><br><span class="line">rejected  common/drain: common/drain: unable to drain connection &gt; websocket: close 1000 (normal) &gt; proxy/vmess/encoding: invalid user: VMessAEAD is enforced and a non VMessAEAD connection is received. You can still disable this security feature with environment variable v2ray.vmess.aead.forced = false . You will not be able to enable legacy header workaround in the future.</span><br></pre></td></tr></table></figure>
<p>解决方法</p>
<p>TIP</p>
<p>在 v4.28.1 版本后，**客户端 AlterID 设置为 0 **代表启用 VMessAEAD ；服务端为自动适配，可同时兼容启用和未开启 VMessAEAD 的客户端。</p>
<p>对于 VMess MD5 认证信息的兼容可以被关闭。(v4.35.0+)<br>TIP</p>
<p>客户端可通过设置环境变量 <strong>V2RAY_VMESS_AEAD_DISABLED=true</strong> 强行禁用 VMessAEAD （不推荐，仅用于兼容服务端版本在 v4.28.1 前且设置了 alterId=0 ）</p>
<p>VMess MD5 认证信息 玷污机制<br>为了进一步对抗可能的探测和封锁，自 v4.24 版本起，每个 VMess 认证数据的服务器端结构都会包含一个一次写入的玷污状态标记，初始状态为无瑕状态，当服务器检测到重放探测时或者因为其他原因入站连接出错以致校验数据不正确时，该连接所对应的请求认证数据会被玷污。</p>
<p>被玷污的认证数据无法被用于建立连接，当攻击者或客户端使用被玷污的认证数据建立连接时，服务器会输出包含 “invalid user” “ErrTainted” 的错误信息，并阻止该连接。</p>
<p>当服务器没有受到重放攻击时，该机制对正常连接的客户端没有影响。如果服务器正在被重放攻击，可能会出现连接不稳定的情况。</p>
<p>拥有服务器 UUID 以及其他连接数据的恶意程序可能根据此机制对服务器发起拒绝服务攻击，受到此类攻击的服务可以通过修改 proxy/vmess/validator.go 文件中 func (v *TimedUserValidator) BurnTaintFuse(userHash []byte) error 函数的 atomic.CompareAndSwapUint32(pair.taintedFuse, 0, 1) 语句为 atomic.CompareAndSwapUint32(pair.taintedFuse, 0, 0) 来解除服务器对此类攻击的安全保护机制。使用 VMessAEAD 认证机制的客户端不受到 VMess MD5 认证信息 玷污机制 的影响。</p>
<p>#VMess MD5 认证信息 淘汰机制<br>VMessAEAD 协议已经经过同行评议并已经整合了相应的修改。 VMess MD5 认证信息 的淘汰机制已经启动。</p>
<p>自 2022 年 1 月 1 日起，服务器端将默认禁用对于 MD5 认证信息 的兼容。任何使用 MD5 认证信息的客户端将无法连接到禁用 VMess MD5 认证信息的服务器端。</p>
<p><strong>在服务器端可以通过设置环境变量 v2ray.vmess.aead.forced = true 以关闭对于 MD5 认证信息的兼容。 或者 v2ray.vmess.aead.forced = false 以强制开启对于 MD5 认证信息 认证机制的兼容 （不受到 2022 年自动禁用机制的影响） 。 (v4.35.0+)</strong></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>vscode配置picgo插件实现GitHub当图床</title>
    <url>/2022/01/05/%E5%85%B6%E4%BB%96/vscode%E9%85%8D%E7%BD%AEpicgo%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0GitHub%E5%BD%93%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<ol>
<li><p>安装vscode</p>
</li>
<li><p>打开vscode，侧面插件市场搜索picgo安装</p>
</li>
<li><p>安装后重启，再次打开插件市场，选择picgo右下方的设置小按钮，选择扩展设置，配置Github有关信息，具体配置如图和下面配置信息</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">配置信息说明</span><br><span class="line">current:选择github</span><br><span class="line">branch:选择你所在分支，一般是master或main</span><br><span class="line">custom url:选择CDN用于加速图片输出，用如果不配置，会导致图片无法预览</span><br><span class="line">    配置格式https:<span class="comment">//cdn.jsdelivr.net/gh/你的GitHub用户名/存放图床的仓库名</span></span><br><span class="line">path:仓库下的文件夹</span><br><span class="line">    如果需要存放在某个仓库下文件夹</span><br><span class="line">    比如picgo仓库里的img文件夹</span><br><span class="line">        img/</span><br><span class="line">        不可以省略/，否则不会识别为文件夹</span><br><span class="line">        不可以写成/img，否则会识别服务端错误</span><br><span class="line">repo:你的GitHub用户名/仓库名</span><br><span class="line">token:GitHub申请的token</span><br><span class="line">    申请步骤</span><br><span class="line">    登录GitHub后点击头像下拉选择setting，选择developer setting，选择personal access token，新建一个token，输入名称和设置有效期，勾选repo权限，生成后的授权码赋值到此</span><br></pre></td></tr></table></figure>

<p> <img src="https://cdn.jsdelivr.net/gh/QuinnTian/imgchr/imgs/20220104220611.png" alt="20220104220611"></p>
</li>
<li><p>快捷键</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">win/unix系统</span><br><span class="line">    ctrl alt u 从剪贴板复制上传</span><br><span class="line">    ctrl alt e 弹出文件管理器选择上传</span><br><span class="line">    ctrl alt o 弹出截屏上传</span><br><span class="line">苹果系统</span><br><span class="line">    ctrl opt u</span><br><span class="line">    ctrl opt e</span><br><span class="line">    ctrl opt o</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>华为光猫破解教程+工具</title>
    <url>/2021/03/08/%E5%85%B6%E4%BB%96/%E5%8D%8E%E4%B8%BA%E5%85%89%E7%8C%AB%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B+%E5%B7%A5%E5%85%B7-%E5%8D%8E%E4%B8%BA%E5%85%89%E7%8C%AB%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>吐槽工信部域名备案的各种坑</title>
    <url>/2021/02/26/%E5%85%B6%E4%BB%96/%E5%90%90%E6%A7%BD%E5%B7%A5%E4%BF%A1%E9%83%A8%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91-tu-cao-gong-xin-bu-yu-ming-bei-an/</url>
    <content><![CDATA[<ol>
<li><p>空壳主体和空壳网站清理不及时，各个省清理时间也不固定，感觉想起来就清。我朋友的域名空壳网站两三年至今未清理。</p>
</li>
<li><p>备案查询系统简陋无比，早年备案系统还能用身份证查询，现在倒好只能用备案号或姓名查询，试问我如何知道我的信息被盗用？好歹增加一个根据身份证查把。不知道姓名会有重名吗？</p>
</li>
<li><p>域名备案各省规范不一，甚至不知道存不存在一个人有多个备案主体可能。</p>
</li>
<li><p>注销备案各个省份不一，甚至某些省份连个申请注销备案方式都找不到，有些省份可以线上，有些省份必须邮寄，真不敢相信……，同样注册备案也是，不同省要求不一样，有的允许跨省，有的不允许，有的限制年龄，有的不限制，有的要求要本省手机号，还有有的甚至需要备案关闭网站，……无语了</p>
</li>
<li><p><strong>域名备案信息是个人都能查到，查姓名查出一堆主体，试问这样有什么意义，假设查出三个主体，一个主体关联网站发布违法信息但网站信息上并没有公布联系方式，去找另外两个网站的站长怎么办？前几天就遇到了，人家查到了通过域名查到了姓名，但是那个网站上没有站长联系方式，于是通过姓名查到相同姓名的网站主体，找上门来了。我也很无奈，只能解释是重名，备案要看主体号，而不是姓名。这不是坑人吗</strong>。某些第三方网站，查到后会把该企业名称（姓名）的所有备案主体列出来，这是为什么呢？因为对于个人备案<strong>企业名称</strong>会显示网站负责人名字也就是<strong>你名字</strong>，搞笑吧，所以网站负责人虽然不显示又有何用呢。</p>
<blockquote>
<p>备案主体：就是比如粤B2-20090059这就是备案主体，一般来说一个人只能有一个，也就是身份证一一对应，如果想有接入多个网站在后面加-1，比如粤B2-20090059-1，粤B2-20090059-2等等</p>
</blockquote>
</li>
<li><p><span style="color:red!important;">提示，如果你备案主题下只有一个网站，千万不要取消接入否则你的备案直接在域名托管商那消失，但是工信部可以查到，也就是所谓的<strong>空壳网站</strong>.<br>这时候你要办注销备案很麻烦，得填表邮寄到通信局。如果你不想要了，直接注销备案或注销网站也不要点取消接入。<strong>空壳主体</strong>就是你的备案号在，但是没有关联网站，一般办理注销网站会导致空壳主体。<strong>空壳网站</strong>就是办理取消接入或者域名过期，且没有办理接入另一家托管商，工信部那仍然会显示你关联的域名。<br>这两种，正常来说工信部会清理，但是正如上面所说清理看心情，看省份，有时候清理是随机的。<strong>这时候如果你域名过期了，有人注册了你不用的域名，备案还是显示你的信息，如果他拿来干违法事情很麻烦</strong>。</span></p>
</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>华为光猫破解教程和工具</title>
    <url>/2021/03/13/%E5%85%B6%E4%BB%96/%E5%8D%8E%E4%B8%BA%E5%85%89%E7%8C%AB%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B%E5%92%8C%E5%B7%A5%E5%85%B7-hua-wei-guang-mao-po-jie-jiao-cheng-he-gong-ju/</url>
    <content><![CDATA[<p><a href="https://cloud.quinntian.com/s/tkW5QLbABXxc6XA">下载地址</a><br>密码：请留言</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>思维导图软件Mindmanager_2016_64位原版+破解方法.md</title>
    <url>/2018/07/11/%E5%85%B6%E4%BB%96/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E8%BD%AF%E4%BB%B6Mindmanager_2016_64%E4%BD%8D%E5%8E%9F%E7%89%88+%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95.md-2019102314155185645/</url>
    <content><![CDATA[<p>title: 思维导图软件Mindmanager 2016 64位原版+破解方法<br>date: ‘2018-07-11 16:37:56’<br>updated: ‘2018-08-16 15:17:04’<br>tags: [Mindmanager, 思维导图, 破解]<br>permalink: /articles/2018/07/11/1531298276159.html</p>
<hr>
<p><img src="https://res.quinntian.xyz//file/2018/07/693db6b8f90f48f592522388cd76ac05_Snipaste_20180711_173614.png" alt="Snipaste_20180711_173614png"> </p>
<p>mindjet_mindmanager_2016_trial_64_wm.exe<br>mindjet_mindmanager_2016_trial_32_wm.exe<br>分别为对应系统的安装文件（windows）</p>
<p>安装后不要打开，打开对应系统的文件夹<br>MP16-999-2P94-6338-2254-32位<br>MP16-999-2P94-6338-2254-64位<br>然后将里面的文件替换到C盘安装目录下</p>
<p>MP16-999-2P94-6338-2254（64位）<br>MP16-999-2P94-6338-2254（32位）<br>分别为对应系统的注册码</p>
<blockquote>
<p>关注微信公众号    回复关键字mind</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>用Navicat自动备份MySQL数据库</title>
    <url>/2018/05/25/%E5%85%B6%E4%BB%96/%E7%94%A8Navicat%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDMySQL%E6%95%B0%E6%8D%AE%E5%BA%93-2019102314155123408/</url>
    <content><![CDATA[<p>title: 用Navicat自动备份Mysql数据库<br>date: ‘2018-05-25 16:43:27’<br>updated: ‘2018-05-25 18:16:05’<br>tags: [Navicat, Mysql]<br>permalink: /articles/2018/05/25/1527237800309.html</p>
<hr>
<h4 id="1-选择计划任务"><a href="#1-选择计划任务" class="headerlink" title="1.选择计划任务"></a>1.选择计划任务</h4><h4 id="2-选择数据库双击后有方自动创建脚本"><a href="#2-选择数据库双击后有方自动创建脚本" class="headerlink" title="2.选择数据库双击后有方自动创建脚本"></a>2.选择数据库双击后有方自动创建脚本</h4><h4 id="3-双击创建好的脚本后，下方自动生成"><a href="#3-双击创建好的脚本后，下方自动生成" class="headerlink" title="3.双击创建好的脚本后，下方自动生成"></a>3.双击创建好的脚本后，下方自动生成</h4><h4 id="4-点击保存输入名称"><a href="#4-点击保存输入名称" class="headerlink" title="4.点击保存输入名称"></a>4.点击保存输入名称</h4><h4 id="5-点击设置计划任务"><a href="#5-点击设置计划任务" class="headerlink" title="5.点击设置计划任务"></a>5.点击设置计划任务</h4><h4 id="6-设置密码和备份周期后应用"><a href="#6-设置密码和备份周期后应用" class="headerlink" title="6.设置密码和备份周期后应用"></a>6.设置密码和备份周期后应用</h4><p><strong>相关截图</strong><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/046ec44707814862afe07b94084ef3b9_Snipaste_20180525_161954.png" alt="Snipaste_20180525_161954png"><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/3a383774cbdb446c95b2d1cb61a3618c_Snipaste_20180525_162113.png" alt="Snipaste_20180525_162113png"><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/3d8e2763d63c48bd80eb3358d663ad4e_Snipaste_20180525_162124.png" alt="Snipaste_20180525_162124png"><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/069a2e3c38f8419091ae7a6a97cea7d8_Snipaste_20180525_162403.png" alt="Snipaste_20180525_162403png"><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/4b103a67dc9b4916948eb25a14eb31dc_Snipaste_20180525_162610.png" alt="Snipaste_20180525_162610png"><br><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/3457172472ca4bae86f4e41abece6fd7_Snipaste_20180525_162947.png" alt="Snipaste_20180525_162947png"> </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>资源分享_Spring4视频教程_.md</title>
    <url>/2018/05/30/%E5%85%B6%E4%BB%96/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB_Spring4%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B_.md-2019102314155438064/</url>
    <content><![CDATA[<p>title: ‘资源分享:Spring4视频教程 ‘<br>date: ‘2018-05-30 02:47:07’<br>updated: ‘2018-08-16 15:18:39’<br>tags: [资源分享]<br>permalink: /articles/2018/05/30/1527619343942.html</p>
<hr>
<p><img src="https://res.quinntian.xyz//file/2018/05/e2072cb09e2448be925ec279c718d5e5_Snipaste_20180530_025016.png" alt="Snipaste_20180530_025016png"> </p>
<blockquote>
<p>关注微信公众号    回复关键字spring4</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>资源分享：柯林斯COBUILD中阶英汉双解学习词典.md</title>
    <url>/2018/10/25/%E5%85%B6%E4%BB%96/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB%EF%BC%9A%E6%9F%AF%E6%9E%97%E6%96%AFCOBUILD%E4%B8%AD%E9%98%B6%E8%8B%B1%E6%B1%89%E5%8F%8C%E8%A7%A3%E5%AD%A6%E4%B9%A0%E8%AF%8D%E5%85%B8.md-2019102314155140300/</url>
    <content><![CDATA[<p><img src="https://res-qiniu.quinntian.com//file/2018/10/79731afaff7a4a07b990dedf9973a09c_image.png" alt="imagepng"> </p>
<blockquote>
<p>获取资源关注微信公众号 回复klszj</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>资源分享：软考软件设计师第五版教材.md</title>
    <url>/2018/10/25/%E5%85%B6%E4%BB%96/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB%EF%BC%9A%E8%BD%AF%E8%80%83%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%AC%AC%E4%BA%94%E7%89%88%E6%95%99%E6%9D%90.md-2019102314155473109/</url>
    <content><![CDATA[<p>title: 资源分享：软考软件设计师第五版教材<br>date: ‘2018-10-25 11:00:55’<br>updated: ‘2018-10-25 11:21:54’<br>tags: [软件设计师, 资源分享, 电子书]<br>permalink: /articles/2018/10/25/1540436424333.html</p>
<hr>
<p><img src="https://res.quinntian.xyz//file/2018/10/7d56652d6cd34f11a113baa230c9703a_image.png" alt="imagepng"><br><img src="https://res.quinntian.xyz//file/2018/10/e3de7b72df9d4b5c89b2df5f3c46fb83_image.png" alt="imagepng"><br><img src="https://res.quinntian.xyz//file/2018/10/6fc14a400c444a8e957fa8173ec456e5_image.png" alt="imagepng"></p>
<blockquote>
<p><strong>获取资源关注微信公众号  回复rs5</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Java的代理机制实现日志输出.md</title>
    <url>/2018/05/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E7%9A%84%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA.md-2019102314160899348/</url>
    <content><![CDATA[<p>title: Java的代理机制实现日志输出<br>date: ‘2018-05-28 03:04:10’<br>updated: ‘2018-05-29 15:50:44’<br>tags: [Java]<br>permalink: /articles/2018/05/28/1527447850230.html</p>
<hr>
<p>通用日志输出：在每个类中都要添加具体的日志输出代码<br>面向接口日志输出：实现了业务逻辑与日志代码的分离，但还是要依赖具体的接口<br>Java代理日志输出：真正实现对日志代码重用，且不依赖具体的接口</p>
<h3 id="通用日志输出方式"><a href="#通用日志输出方式" class="headerlink" title="通用日志输出方式"></a>通用日志输出方式</h3><p><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/8ce0cd7019074276b2445f337d3116c3_Snipaste_20180528_034455.png" alt="Snipaste_20180528_034455png"> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.gen;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TimeBook timeBook = <span class="keyword">new</span> TimeBook();</span><br><span class="line">        timeBook.doAuditing(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.gen;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeBook</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    <span class="comment">//审核数据相关程序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAuditing</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        logger.log(Level.INFO ,name + <span class="string">&quot;开始审核数据&quot;</span>);</span><br><span class="line">        <span class="comment">//审核数据相关程序</span></span><br><span class="line">        logger.log(Level.INFO ,name + <span class="string">&quot;审核数据结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面向编程接口进行日志输出"><a href="#面向编程接口进行日志输出" class="headerlink" title="面向编程接口进行日志输出"></a>面向编程接口进行日志输出</h3><p><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/ce09123c52314c03ab3e7467350307e7_Snipaste_20180528_034415.png" alt="Snipaste_20180528_034415png"> </p>
<p><strong>接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeBookInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAuditing</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>实现接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeBook</span> <span class="keyword">implements</span> <span class="title">TimeBookInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAuditing</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//审核数据相关程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>代理类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java代理类</span></span><br><span class="line"><span class="comment"> * 用来实现日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeBookProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(<span class="keyword">this</span>.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimeBookInterface timeBookInterface;</span><br><span class="line">    <span class="comment">//在该类中针对前面的接口编程，而不针对具体的类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeBookProxy</span><span class="params">(TimeBookInterface timeBookInterface)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeBookInterface = timeBookInterface;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实际业务的处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">doAuditing</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        logger.log(Level.INFO,name+<span class="string">&quot;开始审核数据&quot;</span>);</span><br><span class="line">        timeBookInterface.doAuditing(name);</span><br><span class="line">        logger.log(Level.INFO,name+<span class="string">&quot;审核数据结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeBook</span> <span class="keyword">implements</span> <span class="title">TimeBookInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAuditing</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//审核数据相关程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java代理机制实现日志输出"><a href="#Java代理机制实现日志输出" class="headerlink" title="Java代理机制实现日志输出"></a>Java代理机制实现日志输出</h3><p><img src="http://p95x8s7hh.bkt.clouddn.com//file/2018/05/5e7fae49444940b08551e9b5e63f0023_Snipaste_20180528_034253.png" alt="Snipaste_20180528_034253png"> </p>
<p><strong>代理类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    <span class="keyword">private</span> Object delegate;</span><br><span class="line">    <span class="comment">//绑定代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object delegate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(delegate.getClass().getClassLoader(),delegate.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//针对接口编程</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//方法调用前进行日志输出</span></span><br><span class="line">        logger.log(Level.INFO,args[<span class="number">0</span>] + <span class="string">&quot;开始审核数据&quot;</span>);</span><br><span class="line">        result = method.invoke(delegate,args);</span><br><span class="line">        logger.log(Level.INFO,args[<span class="number">0</span>] + <span class="string">&quot;审核数据结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.log.java;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实现对日志的重用</span></span><br><span class="line">        LogProxy logProxy = <span class="keyword">new</span> LogProxy();</span><br><span class="line">        TimeBookInterface timeBookProxy = (TimeBookInterface) logProxy.bind(<span class="keyword">new</span> TimeBook());</span><br><span class="line">        timeBookProxy.doAuditing(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/12/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-dan-li-mo-shi/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h1 id="单例模式的什么"><a href="#单例模式的什么" class="headerlink" title="单例模式的什么"></a>单例模式的什么</h1><p>singleton pattern是指确保某一个类只有一个实例，并且自动实例化向整个系统提供。</p>
<h1 id="单例模式最简单例子"><a href="#单例模式最简单例子" class="headerlink" title="单例模式最简单例子"></a>单例模式最简单例子</h1><p>大臣参见皇帝，每天面见的皇帝都是同一个，用UML图可以表示成如图。<br><img src="https://quinntian.com/upload/2020/12/image-f6c7b2f5e96043ed9250de64b2a87c4a.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;皇帝类&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emperor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*初始化一个皇帝，静态和最终关键字是关键*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Emperor emperor = <span class="keyword">new</span> Emperor();</span><br><span class="line">    <span class="comment">/*皇帝类的构造方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Emperor</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">/*静态方法用于获取皇帝的对象*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Emperor <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  emperor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*皇帝说话*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我就是皇帝某某.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minister</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> day = <span class="number">0</span>;day&lt;<span class="number">3</span>;day++)&#123;</span><br><span class="line">            Emperor emperor = Emperor.getInstance();</span><br><span class="line">            emperor.say();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*运行输出三天见得皇帝是同一个人*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">运行结果</span><br><span class="line">我就是皇帝某某.....</span><br><span class="line">我就是皇帝某某.....</span><br><span class="line">我就是皇帝某某.....</span><br></pre></td></tr></table></figure>
<h1 id="单例模式的通用模板"><a href="#单例模式的通用模板" class="headerlink" title="单例模式的通用模板"></a>单例模式的通用模板</h1><p>上面例子可以抽象成一个通用模板，类图如下。<br><img src="https://quinntian.com/upload/2020/12/image-2341a94c960c435584af398f98ed2a35.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;单例模式通用代码&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*限制产生多个对象*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">/*获取对象实例*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*该类的其他方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomeing</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">写法<span class="number">2</span>：不推荐</span><br><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;通用单例类-线程不安全&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonUnSafe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  SingletonUnSafe singletonUnSafe = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonUnSafe</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonUnSafe <span class="title">singletonUnSafe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( singletonUnSafe == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singletonUnSafe  = <span class="keyword">new</span> SingletonUnSafe();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonUnSafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面写法关键点</p>
<ul>
<li><p>确保类的实例只能有一个，因此要添加<strong>static和final</strong></p>
</li>
<li><p>构造方法必须使用<strong>private</strong>以此来保证，类不会在外部类中意外实例化</p>
</li>
<li><p>定义静态方法，专门提供实例化的方法，在外部类中调用</p>
</li>
<li><p>第二种写法，在高并发的情况会发生线程不安全，因为初始化实例需要时间，意思是假设线程A初始化实例，这时候线程B也来到了IF条件，但此时线程A并没有完成实例初始化，则判断条件为真，导致进程中出现了第二个实例，因此说明该线程不安全。</p>
<h1 id="单例模式扩展-指定单例个数"><a href="#单例模式扩展-指定单例个数" class="headerlink" title="单例模式扩展-指定单例个数"></a>单例模式扩展-指定单例个数</h1><p>第一个简单的例子只是在内存中存在一个单例，如果我们要求在内存中指定指定数量的实例，如何做？这就是单例模式扩展情况，下面是类图。<br><img src="https://quinntian.com/upload/2020/12/image-20a7da25631347ac86218f70f4920477.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;单例模式扩展：生成多个单例&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emperor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*定义能够产生最多的单例的数目*/</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">int</span> maxNumOfEmperor = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/*定义每个皇帝的名字*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; nameList = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//高并发下使用vector</span></span><br><span class="line">    <span class="comment">/*定义一个列表容纳所有皇帝的实例*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Emperor&gt; emperorArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/*当前皇帝的序列号*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> countNumOfEmperor = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*默认构造方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Emperor</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">/*构造方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Emperor</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        nameList.add(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*产生所有对象*/</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; maxNumOfEmperor;i++)&#123;</span><br><span class="line">            emperorArrayList.add(<span class="keyword">new</span> Emperor(<span class="string">&quot;皇帝，序号：&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*随机获得一个皇帝*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Emperor <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        countNumOfEmperor = random.nextInt(maxNumOfEmperor);</span><br><span class="line">        <span class="keyword">return</span>  emperorArrayList.get(countNumOfEmperor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*皇帝说话*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(nameList.get(countNumOfEmperor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> case3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minister</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span></span>&#123;</span><br><span class="line">        <span class="comment">/*定义五个大臣*/</span></span><br><span class="line">        <span class="keyword">int</span> ministerNum = <span class="number">5</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>  i =<span class="number">0</span>;i&lt;ministerNum;i++)&#123;</span><br><span class="line">            Emperor emperor = Emperor.getInstance();</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="number">1</span>+<span class="string">&quot;个大臣参拜的是：&quot;</span>);</span><br><span class="line">            emperor.say();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="单例模式的应用"><a href="#单例模式的应用" class="headerlink" title="单例模式的应用"></a>单例模式的应用</h1></li>
<li><p>要求唯一生成序列号</p>
</li>
<li><p>Web页面的计数器，不要每次刷新都写入数据库，可以开一个单例</p>
</li>
<li><p>工具类</p>
</li>
<li><p>Spring中的容器Bean的默认模式就是单例模式</p>
</li>
</ul>
<p>代码参考：<a href="https://github.com/QuinnTian/design-pattern">https://github.com/QuinnTian/design-pattern</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>工厂方法模式（上）</title>
    <url>/2020/12/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8A%EF%BC%89-gong-chang-mo-shi--shang-/</url>
    <content><![CDATA[<h1 id="什么是工厂方法模式"><a href="#什么是工厂方法模式" class="headerlink" title="什么是工厂方法模式"></a>什么是工厂方法模式</h1><p>定义一个抽象接口，这个接口其实现类来选择实例化哪一个类。简单来说就是实例化不再通过new而是通过一个类，这个类是工厂类。</p>
<h1 id="工厂方法模式最简单例子"><a href="#工厂方法模式最简单例子" class="headerlink" title="工厂方法模式最简单例子"></a>工厂方法模式最简单例子</h1><p>我们想象女娲造人，这里涉及三样，女娲、炼造炉、人类，其中人类是一个抽象类，其有很多实现类，有黄色、白色和黑色人种。锻造炉就是一个工厂，在这个工厂可以指定去造哪一种类型的人。这里我们吧锻造炉用一个接口声明，其实现类里有相应的方法来选择去锻造哪一种类型的人类。女娲就是一个场景类。具体UML图和代码如下<br><img src="https://quinntian.com/upload/2020/12/image-bd3f6bd8ba184fa9a49b4c5393e7626e.png" alt="image.png"><br>package case1;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;人类总称&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*获取人类的颜色*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*人类说话*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;黑色人种&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackHuman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黑色人种的皮肤是黑色的。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黑人正在说话..&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhiteHuman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白色人种的皮肤是白色的。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白色人种在说话。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YellowHuman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄色人种的皮肤是黄色的。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄色人种正在说话。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;创建人类的抽象工厂&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHumanFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Human&gt; <span class="function">T <span class="title">createHuman</span><span class="params">(Class&lt;T&gt; c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HumanFactory</span> <span class="keyword">extends</span> <span class="title">AbstractHumanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Human&gt; <span class="function">T <span class="title">createHuman</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*定义一个生产的人种*/</span></span><br><span class="line">        Human human = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/*产生一个人种*/</span></span><br><span class="line">            human = (T)Class.forName(c.getName()).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;人类产生错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T)human;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NvWa</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">/*模拟女娲造人*/</span></span><br><span class="line">        AbstractHumanFactory abstractHumanFactory = <span class="keyword">new</span> HumanFactory();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次造出的人是黑人&quot;</span>);</span><br><span class="line">        Human blackHuman = abstractHumanFactory.createHuman(BlackHuman.class);</span><br><span class="line">        blackHuman.getColor();;</span><br><span class="line">        blackHuman.talk();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第二次造出的人是白人&quot;</span>);</span><br><span class="line">        Human whiteHuma = abstractHumanFactory.createHuman(WhiteHuman.class);</span><br><span class="line">        whiteHuma.getColor();</span><br><span class="line">        whiteHuma.talk();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第三次造出的人是黄人&quot;</span>);</span><br><span class="line">        Human yellowHuman = abstractHumanFactory.createHuman(YellowHuman.class);</span><br><span class="line">        yellowHuman.getColor();</span><br><span class="line">        yellowHuman.talk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="工厂方法模式通用模板"><a href="#工厂方法模式通用模板" class="headerlink" title="工厂方法模式通用模板"></a>工厂方法模式通用模板</h1><p>上面的女娲造人的过程，可以用一个通用的代码模板来表示，UML图。<br><img src="https://quinntian.com/upload/2020/12/image-6bb9c8e788744891ad4060ea3b11bc63.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;抽象产品类&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*产品类的公用方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*业务逻辑处理*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*抽象方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*业务逻辑处理*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*业务逻辑处理*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;抽象工厂类&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**/</span></span><br><span class="line"><span class="comment">    public abstract &lt;T extends Product&gt; T createPoduct(Class&lt;T&gt; c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createPoduct</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            product = (Product) Class.forName((c.getName())).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T)product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;场景类&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Creator creator = <span class="keyword">new</span> ConcreteCreator();</span><br><span class="line">        Product product = creator.createPoduct(ConcreteProduct1.class);</span><br><span class="line">        <span class="comment">/*......*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>工厂方法模式（下）4种扩展</title>
    <url>/2021/01/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8B%EF%BC%894%E7%A7%8D%E6%89%A9%E5%B1%95-gong-chang-fang-fa-mo-shi--xia--4-zhong-kuo-zhan/</url>
    <content><![CDATA[<h1 id="工厂方法模式（下）4种扩展"><a href="#工厂方法模式（下）4种扩展" class="headerlink" title="工厂方法模式（下）4种扩展"></a>工厂方法模式（下）4种扩展</h1><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>所谓简单工厂模式就是把工厂的抽象类去掉，直接只有一个工厂类即可。其UML图如下<br><img src="https://quinntian.com/upload/2021/01/image-e5e37bbc9fa8434e8ad095d01b326681.png" alt="image.png"><br>工厂类，去掉了接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;简单工厂模式：去掉了抽象接口&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HumanFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Human&gt; <span class="function">T <span class="title">createHuman</span><span class="params">(Class&lt;T&gt; c)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*定义一个生产出的人种*/</span></span><br><span class="line">        Human human = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            human = (Human) Class.forName(c.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T)human;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="多个工厂类"><a href="#多个工厂类" class="headerlink" title="多个工厂类"></a>多个工厂类</h1><p>与名字相同，一种产品对应一种工厂类，其类图如下<br><img src="https://quinntian.com/upload/2021/01/image-71fe7a6833674563a3e6e146c838fb8e.png" alt="image.png"><br>其中，人类接口和实现类不变，一个色种对应一个工厂。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackHumanFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlackHuman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhiteHumanFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WhiteHuman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YellowHumanFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> YellowHuman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NvWa</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">/*模拟女娲造人*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第一次造出的人是黑人&quot;</span>);</span><br><span class="line">        Human blackHuman = <span class="keyword">new</span> BlackHumanFactory().createHuman();</span><br><span class="line">        blackHuman.getColor();;</span><br><span class="line">        blackHuman.talk();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第二次造出的人是白人&quot;</span>);</span><br><span class="line">        Human whiteHuma = <span class="keyword">new</span> WhiteHumanFactory().createHuman();</span><br><span class="line">        whiteHuma.getColor();</span><br><span class="line">        whiteHuma.talk();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第三次造出的人是黄人&quot;</span>);</span><br><span class="line">        Human yellowHuman = <span class="keyword">new</span> YellowHumanFactory().createHuman();</span><br><span class="line">        yellowHuman.getColor();</span><br><span class="line">        yellowHuman.talk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="替代单例类"><a href="#替代单例类" class="headerlink" title="替代单例类"></a>替代单例类</h1><p>用一个工厂来生产单例类，其中要用到Java的<strong>反射特性</strong>。<br><img src="https://quinntian.com/upload/2021/01/image-25aaefac30e84441a9b40d6b87bd0e9f.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*private不允许通过new产生一个对象*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeing</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class c1 = Class.forName(Singleton.class.getName());</span><br><span class="line">            <span class="comment">/*获得无参构造*/</span></span><br><span class="line">            Constructor constructor = c1.getDeclaredConstructor();</span><br><span class="line">            <span class="comment">/*设置无参构造可访问*/</span></span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">/*产生一个实例对象*/</span></span><br><span class="line">            singleton = (Singleton) constructor.newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h1><p>所谓延迟初始化就是，将对象存起来，用到时候再调用，不是用完就销毁。<br><img src="https://quinntian.com/upload/2021/01/image-f54e06d46a7e4dea9bcff9255cb5655d.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;延迟初始化&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,Product&gt; prMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span>  Product <span class="title">createProduct</span><span class="params">(String type)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*如果map已经有*/</span></span><br><span class="line">        <span class="keyword">if</span> (prMap.containsKey(type))&#123;</span><br><span class="line">            product = prMap.get(type);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (type.equals(<span class="string">&quot;Product1&quot;</span>))&#123;</span><br><span class="line">                product = <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                product = <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">            &#125;</span><br><span class="line">            prMap.put(type,product);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case6;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;抽象产品类&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*产品类的公用方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*业务逻辑处理*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*抽象方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case6;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*业务逻辑处理*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> case6;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*业务逻辑处理*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2021/01/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-chou-xiang-gong-chang-mo-shi/</url>
    <content><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h1 id="什么是抽象工厂模式"><a href="#什么是抽象工厂模式" class="headerlink" title="什么是抽象工厂模式"></a>什么是抽象工厂模式</h1><p>比较官方的定义是：<strong>为创建一组相关的或相互依赖的对象提供一个接口，而且无需指定他们的实体类</strong>。官方这个定义十分的拗口也不易理解，可能也是因为英文翻译过来的。<br>我的理解是两个词，细化+组装，比如生产产品，那么在定义这个产品的时候会越来越细化，比如我们考虑女娲造人这个例子，首先，我们创建一个人类的接口，然后下面又实现了人类接口的两个抽象类叫做黑人、白人和黄人，那么我们继续细化，人肯定有男性和女性吧，于是我们在此基础上就扩展出也就是继承三个色种，单独定义继承他们的黑人男性和女性，白人男性和女性、黄人的男性和女性，这些一共6个类全部是通过继承相应的有色人种来实现的。<br>那我们再看工厂类，同样需要建立一个抽象工厂接口，定义第一层即在接口中分别生产各色人种的方法，但是呢每个人种还有男性和女性之分，因此我们可以继续继承这个接口，扩展出专门生产男性和女性的类，在他们类中分别定义生产各色人种男性或女性的方法。<br>综上我们看工厂模式就是把产品细化了，然后我们想要什么的样的产品，就在工厂下面分为不同的车间，每个车间又分为不同的生产线，怎么扩展呢，就是通过继承or实现等来实现横向或纵向扩展。<br>具体实现的UML的类图如下，第二个是具体调用图。</p>
<h1 id="最简单的例子"><a href="#最简单的例子" class="headerlink" title="最简单的例子"></a>最简单的例子</h1><p><img src="https://quinntian.com/upload/2021/01/image-89bd5107a3e84b5d848ae2d3450862c7.png" alt="image.png"><br><img src="https://quinntian.com/upload/2021/01/image-3c773df03aff4cb09136ad42922e688b.png" alt="image.png"><br><strong>人类接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*人种的颜色*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*人类会说话*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*人的性别*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>三个人类接口的抽象实现类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBlackHuman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黑色人种的皮肤是黑色的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黑色人种也会说话啊！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractWhiteHuman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白色人种的皮肤是白色的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白色人也会说话啊！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractYellowHuman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄人种的皮肤是黄色的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄色人种也会说话啊！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>**<br><strong>各色人种，每个人种的两个分支男性和女性</strong></p>
<ul>
<li><strong>男性黑色人种和女性黑色人种</strong></li>
<li><strong>男性黄色人种和女性黄色人种</strong></li>
<li><strong>男性白色人种和女性白色人种</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleBlackHuman</span> <span class="keyword">extends</span> <span class="title">AbstractBlackHuman</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*黑人女性*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黑人女性！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleBlackHuman</span> <span class="keyword">extends</span> <span class="title">AbstractBlackHuman</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*黑人男性*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黑人男性！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleWhiteHuman</span> <span class="keyword">extends</span> <span class="title">AbstractWhiteHuman</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*白人女性*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白人女性！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleWhiteHuman</span> <span class="keyword">extends</span> <span class="title">AbstractWhiteHuman</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*白人男性*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白人男性！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleYellowHuman</span> <span class="keyword">extends</span> <span class="title">AbstractYellowHuman</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*黄人女性*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄人女性！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleYellowHuman</span> <span class="keyword">extends</span> <span class="title">AbstractYellowHuman</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*黄人男性*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄人男性！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>**</p>
<p><strong>人类抽象工厂接口</strong><br>**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;八卦炉之定义&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HumanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*制造一个黄色人种*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createYellowHuman</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*制造一个白色人种*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createWhiteHuman</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*制造一个黑色人种*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createBlackHuman</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>生产男性的工厂</strong></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleFactory</span> <span class="keyword">implements</span> <span class="title">HumanFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createYellowHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaleYellowHuman();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createWhiteHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaleWhiteHuman();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createBlackHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaleBlackHuman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>生产女性的工厂</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleFactory</span> <span class="keyword">implements</span> <span class="title">HumanFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createYellowHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FemaleYellowHuman();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createWhiteHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FemaleWhiteHuman();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Human <span class="title">createBlackHuman</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FemaleBlackHuman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>场景类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> QuinnTian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NvWa</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">/*第一条生产线，男性生产线*/</span></span><br><span class="line">        HumanFactory maleHumanFactory = <span class="keyword">new</span> MaleFactory();</span><br><span class="line">        <span class="comment">/*第二条生产线，女性生产线*/</span></span><br><span class="line">        HumanFactory femaleHumanFactory = <span class="keyword">new</span> FemaleFactory();</span><br><span class="line">        <span class="comment">/*生产线建立完毕，开始生产人*/</span></span><br><span class="line">        <span class="comment">/*生产第一个黄人男性*/</span></span><br><span class="line">        Human maleYellowHuman = maleHumanFactory.createYellowHuman();</span><br><span class="line">        maleYellowHuman.getColor();</span><br><span class="line">        maleYellowHuman.talk();</span><br><span class="line">        <span class="comment">/*生产第二个黄人女性*/</span></span><br><span class="line">        Human femaleYellowHuman = femaleHumanFactory.createYellowHuman();</span><br><span class="line">        femaleYellowHuman.getColor();</span><br><span class="line">        femaleYellowHuman.talk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
</search>
